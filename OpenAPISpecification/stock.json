{
  "openapi": "3.0.1",
  "info": {
    "title": "Sage 200 v1 Extra Stock",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.columbus.sage.com/uk/sage200extra/accounts/v1/"
    }
  ],
  "tags": [
    {
      "name": "Alternative Product Views",
      "description": ""
    },
    {
      "name": "Alternative Products",
      "description": ""
    },
    {
      "name": "Auto Generate Option Types",
      "description": ""
    },
    {
      "name": "Auto Generate Separators",
      "description": ""
    },
    {
      "name": "Bin Holdings",
      "description": ""
    },
    {
      "name": "Bom Cost Heading Types",
      "description": ""
    },
    {
      "name": "Bom Cost Headings",
      "description": ""
    },
    {
      "name": "Bom Item Types",
      "description": ""
    },
    {
      "name": "Costing Method Types",
      "description": ""
    },
    {
      "name": "Cross Sell Product Views",
      "description": ""
    },
    {
      "name": "Cross Sell Products",
      "description": ""
    },
    {
      "name": "Discrepancy Status Types",
      "description": ""
    },
    {
      "name": "Entry Source Types",
      "description": ""
    },
    {
      "name": "Fulfilment Method Types",
      "description": ""
    },
    {
      "name": "Fulfilment Sequence Types",
      "description": ""
    },
    {
      "name": "Internal Areas",
      "description": ""
    },
    {
      "name": "Label Printing Option Types",
      "description": ""
    },
    {
      "name": "Landed Costs Types",
      "description": ""
    },
    {
      "name": "Lookup Product Groups",
      "description": ""
    },
    {
      "name": "Lookup Products",
      "description": ""
    },
    {
      "name": "Lookup Stock Item Units",
      "description": ""
    },
    {
      "name": "Pricing Source Types",
      "description": ""
    },
    {
      "name": "Product Group Search Category Values",
      "description": ""
    },
    {
      "name": "Product Groups",
      "description": ""
    },
    {
      "name": "Product Memos",
      "description": ""
    },
    {
      "name": "Product Purchase Figures",
      "description": ""
    },
    {
      "name": "Product Sales Figures",
      "description": ""
    },
    {
      "name": "Product Search",
      "description": ""
    },
    {
      "name": "Product Search Types",
      "description": ""
    },
    {
      "name": "Product Status Types",
      "description": ""
    },
    {
      "name": "Product Suppliers",
      "description": ""
    },
    {
      "name": "Product Transaction Group Types",
      "description": ""
    },
    {
      "name": "Product Transaction Types",
      "description": ""
    },
    {
      "name": "Product Transaction Views",
      "description": ""
    },
    {
      "name": "Product Types",
      "description": ""
    },
    {
      "name": "Product Views",
      "description": ""
    },
    {
      "name": "Product Warehouse Bin Views",
      "description": ""
    },
    {
      "name": "Product Warehouse Views",
      "description": ""
    },
    {
      "name": "Products",
      "description": ""
    },
    {
      "name": "Products Duplicate",
      "description": ""
    },
    {
      "name": "Search Categories",
      "description": ""
    },
    {
      "name": "Search Values",
      "description": ""
    },
    {
      "name": "Serial Allocated To Who Types",
      "description": ""
    },
    {
      "name": "Source Area Types",
      "description": ""
    },
    {
      "name": "Stock Settings",
      "description": ""
    },
    {
      "name": "Stock Transfer Traceable Items",
      "description": ""
    },
    {
      "name": "Stock Transfers",
      "description": ""
    },
    {
      "name": "Stocktake Amend Items",
      "description": ""
    },
    {
      "name": "Stocktake Approve Complete",
      "description": ""
    },
    {
      "name": "Stocktake Count Sheet Items",
      "description": ""
    },
    {
      "name": "Stocktake Criteria Templates",
      "description": ""
    },
    {
      "name": "Stocktake Enter Values",
      "description": ""
    },
    {
      "name": "Stocktake New Items",
      "description": ""
    },
    {
      "name": "Stocktake Selector Value Types",
      "description": ""
    },
    {
      "name": "Stocktake Status Types",
      "description": ""
    },
    {
      "name": "Stocktake Traceable Types",
      "description": ""
    },
    {
      "name": "Stocktake Types",
      "description": ""
    },
    {
      "name": "Stocktake View Adjustments",
      "description": ""
    },
    {
      "name": "Stocktake Views",
      "description": ""
    },
    {
      "name": "Stocktakes",
      "description": ""
    },
    {
      "name": "Traceable Issue Status Types",
      "description": ""
    },
    {
      "name": "Traceable Item Allocations",
      "description": ""
    },
    {
      "name": "Traceable Item Balances",
      "description": ""
    },
    {
      "name": "Traceable Item Issues",
      "description": ""
    },
    {
      "name": "Traceable Item Locations",
      "description": ""
    },
    {
      "name": "Traceable Item Receipts",
      "description": ""
    },
    {
      "name": "Traceable Item Transactions",
      "description": ""
    },
    {
      "name": "Traceable Items Amend",
      "description": ""
    },
    {
      "name": "Traceable Items Amend Traceable Items",
      "description": ""
    },
    {
      "name": "Traceable Items Assign",
      "description": ""
    },
    {
      "name": "Traceable Items Assign Traceable Items",
      "description": ""
    },
    {
      "name": "Traceable Types",
      "description": ""
    },
    {
      "name": "Unit Types",
      "description": ""
    },
    {
      "name": "Units",
      "description": ""
    },
    {
      "name": "Warehouse Holdings",
      "description": ""
    },
    {
      "name": "Warehouse Types",
      "description": ""
    },
    {
      "name": "Warehouses",
      "description": ""
    }
  ],
  "paths": {
    "/bom_cost_heading_types": {
      "get": {
        "tags": [
          "Bom Cost Heading Types"
        ],
        "summary": "BOM Cost Heading Types",
        "description": "When calculating the cost of BOMs, estimates or works orders, the values are accumulated in a cost heading.<P>The API endpoint returns details of the cost heading types that can be used.</P>",
        "operationId": "GetBomCostHeadingTypes",
        "responses": {
          "200": {
            "description": "The list of cost heading types has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bom_cost_heading_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "BOM Cost Heading Types",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/search_categories": {
      "get": {
        "tags": [
          "Search Categories"
        ],
        "summary": "Search Categories",
        "description": "This API endpoint returns a list of allowed search categories.",
        "operationId": "GetSearchCategories",
        "responses": {
          "200": {
            "description": "The list of search categories has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/search_category"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Search categories",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/search_categories/{Id}": {
      "get": {
        "tags": [
          "Search Categories"
        ],
        "summary": "Search Category",
        "description": "This API endpoint returns the search category matching the specified Id.",
        "operationId": "GetSearchCategory",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the search category.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the search category have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_category"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Search category"
    },
    "/search_values": {
      "get": {
        "tags": [
          "Search Values"
        ],
        "summary": "Search Values",
        "description": "This API endpoint returns a list of allowed search values.",
        "operationId": "GetSearchValues",
        "responses": {
          "200": {
            "description": "The list of search values has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/search_value"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Search values",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/search_values/{Id}": {
      "get": {
        "tags": [
          "Search Values"
        ],
        "summary": "Search Value",
        "description": "This API endpoint returns the search value matching the specified Id.",
        "operationId": "GetSearchValue",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the search value.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the search value have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_value"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Search value"
    },
    "/bom_cost_headings": {
      "get": {
        "tags": [
          "Bom Cost Headings"
        ],
        "summary": "BOM Cost Headings",
        "description": "When calculating the cost of BOMs, estimates or works orders, the values are accumulated in a cost heading.",
        "operationId": "GetBomCostHeadings",
        "responses": {
          "200": {
            "description": "The list of cost headings has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bom_cost_heading"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "BOM Cost Headings",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/bom_cost_headings/{Id}": {
      "get": {
        "tags": [
          "Bom Cost Headings"
        ],
        "summary": "BOM Cost Heading",
        "description": "When calculating the cost of BOMs, estimates or works orders, the values are accumulated in a cost heading.",
        "operationId": "GetBomCostHeading",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the cost heading.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the cost heading have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bom_cost_heading"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "BOM Cost Heading"
    },
    "/auto_generate_option_types": {
      "get": {
        "tags": [
          "Auto Generate Option Types"
        ],
        "summary": "Auto Generate Option Types",
        "description": "Auto generate option types are used to auto generate the batch or serial numbers associated with the product that exist within the application. Products can be 'No automatic number generation', 'Use sequence numbers', 'Use date and sequence numbers' or 'Use order number and sequence number'.<P>The API endpoint returns details of the auto generate option types that can be used.</P>",
        "operationId": "GetAutoGenerateOptionTypes",
        "responses": {
          "200": {
            "description": "The details of the auto generate option types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/auto_generate_option_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Auto generate option types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/fulfilment_sequence_types": {
      "get": {
        "tags": [
          "Fulfilment Sequence Types"
        ],
        "summary": "Fulfilment Sequence Types",
        "description": "Fulfilment sequence types are the sequence options for the fulfilment methods used for product allocation which determines how products are allocated to sales orders within the application. Products can sequenced by 'Bin Priority', 'Smallest Quantity First', 'Largest Quantity First', 'Oldest Sell By Date', 'Oldest Use By Date' or 'FIFO'.<P>The API endpoint returns details of the fulfilment sequence types that can be used.</P>",
        "operationId": "GetFulfilmentSequenceTypes",
        "responses": {
          "200": {
            "description": "The details of the fulfilment sequence types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fulfilment_sequence_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Fulfilment sequence types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/fulfilment_method_types": {
      "get": {
        "tags": [
          "Fulfilment Method Types"
        ],
        "summary": "Fulfilment Method Types",
        "description": "Fulfilment method types are the method of fulfilment for your products on sales orders. This determines how the products are allocated. Fulfmilment methods are 'From Stock', 'From Supplier Via Stock' and 'Direct To Customer'.<P>The API endpoint returns details of the fulfilment method types that can be used.</P>",
        "operationId": "GetFulfilmentMethodTypes",
        "responses": {
          "200": {
            "description": "The details of the fulfilment method types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/fulfilment_method_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Fulfilment method types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/label_printing_option_types": {
      "get": {
        "tags": [
          "Label Printing Option Types"
        ],
        "summary": "Label Printing Option Types",
        "description": "Label printing option types used to determine how to print order lablels. The label printing option types are 'Label not required', 'Label required per item' and 'Label required per batch'.<P>The API endpoint returns details of the label printing option types that can be used.</P>",
        "operationId": "GetLabelPrintingOptionTypes",
        "responses": {
          "200": {
            "description": "The details of the label printing option types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/label_printing_option_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Label printing option types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/auto_generate_separators": {
      "get": {
        "tags": [
          "Auto Generate Separators"
        ],
        "summary": "Auto Generate Separators",
        "description": "Auto generate separators are used to auto generate the batch or serial numbers associated with the product that exist within the application. Auto generate separators can be 'None', 'Space', 'Colon', 'Forward Slash', 'Backward Slash', 'Dot' or 'Hyphen'.<P>The API endpoint returns details of the auto generate option types that can be used.</P>",
        "operationId": "GetAutoGenerateSeparators",
        "responses": {
          "200": {
            "description": "The details of the auto generate separators have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/auto_generate_separator"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Auto generate separators",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/auto_generate_separators/{Id}": {
      "get": {
        "tags": [
          "Auto Generate Separators"
        ],
        "summary": "Auto Generate Separator",
        "description": "Auto generate separators are used to auto generate the batch or serial numbers associated with the product that exist within the application. Auto generate separators can be 'None', 'Space', 'Colon', 'Forward Slash', 'Backward Slash', 'Dot' or 'Hyphen'.<P>The API endpoint returns details of the auto generate option types that can be used.</P>",
        "operationId": "GetAutoGenerateSeparator",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the auto generate separator.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the auto generate separator has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auto_generate_separator"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Auto generate separator"
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Products",
        "description": "Products are used to track stock within Sage 200. This is not just for physical items, but also for items that are ordered direct from suppliers, services, and time or labour that can be included on customer invoices.<P>Each stock item has default settings that are used each time the item is bought or sold. Some of these are inherited from the product group and some are set on each item.</P><P>If stock setting UseMultipleLocations is true, you must specify warehouse holding(s) when creating products. <br /><br />If stock setting UseMultipleLocations is false, then new product will be automatically linked to the default (home) warehouse.</P>",
        "operationId": "GetProducts",
        "responses": {
          "200": {
            "description": "The details of the products have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Products",
        "description": "Products are used to track stock within Sage 200. This is not just for physical items, but also for items that are ordered direct from suppliers, services, and time or labour that can be included on customer invoices.<P>Each stock item has default settings that are used each time the item is bought or sold. Some of these are inherited from the product group and some are set on each item.</P>",
        "operationId": "PostProduct",
        "requestBody": {
          "description": "Product to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The product was created. Response body will include the product details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "product"
      },
      "x-sage-pathtitle": "Products",
      "x-sage-changelog": [
        {
          "date": "25/05/2017",
          "title": "Extended operations",
          "description": "Get, Put and Post operations now includes the array property warehouse_holdings. When the stock setting UseMultipleLocations is set to 'true' this MUST be specified during Post operations. It is used (during Post) to associated the product with a warehouse or, during Put, the reorder_level, minimum_level and maximum_level can be amended. During Get the property can be expanded."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'free_stock_quantity', 'fulfilment_sequence_type', 'traceable_type', 'sale_from_single_batch', 'allow_duplicate_numbers', 'uses_alternative_ref', 'uses_sell_by_date', 'uses_use_by_date', 'shelf_life', 'shelf_life_type', 'record_nos_on_goods_received', 'include_nos_on_count_sheets', 'auto_generate_option_type', 'auto_generate_separator_id', 'auto_generate_prefix', 'auto_generate_next_number', 'auto_generate_padding', 'base_unit_id', 'stock_unit_id', 'auto_generate_separator', 'base_unit', 'stock_unit', 'quantity_sold_this_period', 'quantity_bought_this_period', 'quantity_sold_last_period', 'quantity_bought_last_period', 'quantity_on_order_for_direct_delivery' and 'date_time_created'."
        },
        {
          "date": "02/11/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the field 'holding'.<br />This operation has had the fields 'quantity_sold_this_period', 'quantity_bought_this_period', 'quantity_sold_last_period', 'quantity_bought_last_period' and 'quantity_on_order_for_direct_delivery' removed."
        },
        {
          "date": "15/03/2021",
          "title": "Extended operation",
          "description": "This endpoint was enhanced with a PUT operation."
        },
        {
          "date": "15/03/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'use_description_on_documents', 'product_status_type', 'fulfilment_method_type', 'inactivation_date', 'manufacturer', 'part_number', 'label_printing_option_type', 'stocktake_cycle_period', 'standard_cost', 'average_buying_price', 'default_picking_list_comment', 'default_despatch_note_comment', 'commodity_code', 'country_of_origin_id', 'weight', 'suppress_mass_on_declaration', 'is_weee_item', 'use_supplementary_units', 'supplementary_unit_conversion_ratio', 'use_reverse_charge_vat_rules', 'landed_costs_type', 'landed_costs_percentage', 'landed_costs_per_item', 'bom_item_type', 'stock_nominal_code_id', 'revenue_nominal_code_id', 'accrual_nominal_code_id', 'issue_nominal_code_id', 'analysis_code_1', 'analysis_code_2', 'analysis_code_3', 'analysis_code_4', 'analysis_code_5', 'analysis_code_6', 'analysis_code_7', 'analysis_code_8', 'analysis_code_9', 'analysis_code_10', 'analysis_code_11', 'analysis_code_12', 'analysis_code_13', 'analysis_code_14', 'analysis_code_15', 'analysis_code_16', 'analysis_code_17', 'analysis_code_18', 'analysis_code_19', 'analysis_code_20', 'accrual_nominal_code', 'country_of_origin', 'issue_nominal_code', 'revenue_nominal_code', 'status', 'stock_nominal_code', 'alternative_products', 'cross_sell_products', 'memos' and 'suppliers'."
        },
        {
          "date": "10/05/2021",
          "title": "Extended operations",
          "description": "Get, Put and Post operations now includes the array property search_categories. It is used (during Post) to associate the product with a search category or, during Put, the search_value can be amended by setting the search_value_id. During Get the property can be expanded."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'bom_settings', 'search_category_values' and 'units'."
        },
        {
          "date": "08/11/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'has_alternative_products', 'has_cross_sell_products' and 'has_preferred_supplier'."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'spare_text_1', 'spare_text_2', 'spare_text_3', 'spare_text_4', 'spare_text_5', 'spare_text_6', 'spare_text_7', 'spare_text_8', 'spare_text_9', 'spare_text_10', 'spare_number_1', 'spare_number_2', 'spare_number_3', 'spare_number_4', 'spare_number_5', 'spare_number_6', 'spare_number_7', 'spare_number_8', 'spare_number_9', 'spare_number_10', 'spare_date_1', 'spare_date_2', 'spare_date_3', 'spare_date_4', 'spare_date_5', 'spare_bool_1', 'spare_bool_2', 'spare_bool_3', 'spare_bool_4' and 'spare_bool_5'."
        }
      ]
    },
    "/products/{Id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Product",
        "description": "Products are used to track stock within Sage 200. This is not just for physical items, but also for items that are ordered direct from suppliers, services, and time or labour that can be included on customer invoices.<P>Each stock item has default settings that are used each time the item is bought or sold. Some of these are inherited from the product group and some are set on each item.</P>",
        "operationId": "GetProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of product successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Product",
        "description": "Products are used to track stock within Sage 200. This is not just for physical items, but also for items that are ordered direct from suppliers, services, and time or labour that can be included on customer invoices.<P>Each stock item has default settings that are used each time the item is bought or sold. Some of these are inherited from the product group and some are set on each item.</P>",
        "operationId": "PutProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Product to update in Sage 200 Stock Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The product was updated. Response body will include the product details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Product"
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Product",
        "description": "Products are used to track stock within Sage 200. This is not just for physical items, but also for items that are ordered direct from suppliers, services, and time or labour that can be included on customer invoices.<P>Each stock item has default settings that are used each time the item is bought or sold. Some of these are inherited from the product group and some are set on each item.</P>",
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product"
    },
    "/products_duplicate": {
      "post": {
        "tags": [
          "Products Duplicate"
        ],
        "summary": "Duplicate Product",
        "description": "Returns a duplicate product using the product options specified.",
        "operationId": "DuplicateProduct",
        "requestBody": {
          "description": "The options to duplicate the product.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product_duplicate_flags"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The duplicate product was successfully returned. Response body will include the product details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ProductDuplicateFlags"
      },
      "x-sage-pathtitle": "Duplicate product",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'bom_settings', 'search_category_values' and 'units'."
        },
        {
          "date": "08/11/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'has_alternative_products', 'has_cross_sell_products' and 'has_preferred_supplier'."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'spare_text_1', 'spare_text_2', 'spare_text_3', 'spare_text_4', 'spare_text_5', 'spare_text_6', 'spare_text_7', 'spare_text_8', 'spare_text_9', 'spare_text_10', 'spare_number_1', 'spare_number_2', 'spare_number_3', 'spare_number_4', 'spare_number_5', 'spare_number_6', 'spare_number_7', 'spare_number_8', 'spare_number_9', 'spare_number_10', 'spare_date_1', 'spare_date_2', 'spare_date_3', 'spare_date_4', 'spare_date_5', 'spare_bool_1', 'spare_bool_2', 'spare_bool_3', 'spare_bool_4' and 'spare_bool_5'."
        }
      ]
    },
    "/product_suppliers": {
      "get": {
        "tags": [
          "Product Suppliers"
        ],
        "summary": "Product Suppliers",
        "description": "Product suppliers are used to record suppliers of products. The supplier details are used when creating purchase orders. A supplier can be the preferred supplier for a product. The preferred supplier details are suggested when entering a purchase order for the product.",
        "operationId": "GetProductSuppliers",
        "responses": {
          "200": {
            "description": "The details of the product suppliers have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_supplier"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Product Suppliers"
        ],
        "summary": "Product Suppliers",
        "description": "Product suppliers are used to record suppliers of products. The supplier details are used when creating purchase orders. A supplier can be the preferred supplier for a product. The preferred supplier details are suggested when entering a purchase order for the product.",
        "operationId": "PostProductSupplier",
        "requestBody": {
          "description": "Product supplier to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product_supplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The product supplier was created. Response body will include the product supplier details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_supplier"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "productSupplier"
      },
      "x-sage-pathtitle": "Product suppliers",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_suppliers/{Id}": {
      "get": {
        "tags": [
          "Product Suppliers"
        ],
        "summary": "Product Supplier",
        "description": "Product suppliers are used to record suppliers of products. The supplier details are used when creating purchase orders. A supplier can be the preferred supplier for a product. The preferred supplier details are suggested when entering a purchase order for the product.",
        "operationId": "GetProductSupplier",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product supplier.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the product supplier successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_supplier"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Product Suppliers"
        ],
        "summary": "Product Supplier",
        "description": "Product suppliers are used to record suppliers of products. The supplier details are used when creating purchase orders. A supplier can be the preferred supplier for a product. The preferred supplier details are suggested when entering a purchase order for the product.",
        "operationId": "PutProductSupplier",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product supplier.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Product supplier to update in Sage 200 Stock Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product_supplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The product supplier was updated. Response body will include the product supplier details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_supplier"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ProductSupplier"
      },
      "delete": {
        "tags": [
          "Product Suppliers"
        ],
        "summary": "Product Supplier",
        "description": "Product suppliers are used to record suppliers of products. The supplier details are used when creating purchase orders. A supplier can be the preferred supplier for a product. The preferred supplier details are suggested when entering a purchase order for the product.",
        "operationId": "DeleteProductSupplier",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product supplier.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product supplier was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product supplier"
    },
    "/alternative_products": {
      "get": {
        "tags": [
          "Alternative Products"
        ],
        "summary": "Alternative Products",
        "description": "Alternative products are suitable products that can be offered when a requested product is unavailable. An alternative product can be the preferred alternative for a product. When stock is issued for a sales order, if the product is unavailable, the preferred alternative can be chosen, if stock is available.",
        "operationId": "GetAlternativeProducts",
        "responses": {
          "200": {
            "description": "The details of the alternative products have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/alternative_product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Alternative Products"
        ],
        "summary": "Alternative Products",
        "description": "Alternative products are suitable products that can be offered when a requested product is unavailable. An alternative product can be the preferred alternative for a product. When stock is issued for a sales order, if the product is unavailable, the preferred alternative can be chosen, if stock is available.",
        "operationId": "PostAlternativeProduct",
        "requestBody": {
          "description": "Alternative product to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alternative_product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The alternative product was created. Response body will include the alternative product details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/alternative_product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "alternativeProduct"
      },
      "x-sage-pathtitle": "Alternative products",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/alternative_products/{Id}": {
      "get": {
        "tags": [
          "Alternative Products"
        ],
        "summary": "Alternative Product",
        "description": "Alternative products are suitable products that can be offered when a requested product is unavailable. An alternative product can be the preferred alternative for a product. When stock is issued for a sales order, if the product is unavailable, the preferred alternative can be chosen, if stock is available.",
        "operationId": "GetAlternativeProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the alternative product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the alternative product successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/alternative_product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Alternative Products"
        ],
        "summary": "Alternative Product",
        "description": "Alternative products are suitable products that can be offered when a requested product is unavailable. An alternative product can be the preferred alternative for a product. When stock is issued for a sales order, if the product is unavailable, the preferred alternative can be chosen, if stock is available.",
        "operationId": "PutAlternativeProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the alternative product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Alternative product to update in Sage 200 Stock Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alternative_product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The alternative product was updated. Response body will include the alternative product details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/alternative_product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "AlternativeProduct"
      },
      "delete": {
        "tags": [
          "Alternative Products"
        ],
        "summary": "Alternative Product",
        "description": "Alternative products are suitable products that can be offered when a requested product is unavailable. An alternative product can be the preferred alternative for a product. When stock is issued for a sales order, if the product is unavailable, the preferred alternative can be chosen, if stock is available.",
        "operationId": "DeleteAlternativeProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the alternative product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alternative product was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Alternative product"
    },
    "/cross_sell_products": {
      "get": {
        "tags": [
          "Cross Sell Products"
        ],
        "summary": "Cross Sell Products",
        "description": "Cross sell products are complimentary products which are often sold together with another product. For example, if you sell a printer, you might want to show print cartridges or cables for that printer. Cross sell products can help speed up entering a full sales order.",
        "operationId": "GetCrossSellProducts",
        "responses": {
          "200": {
            "description": "The details of the cross sell products have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cross_sell_product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Cross Sell Products"
        ],
        "summary": "Cross Sell Products",
        "description": "Cross sell products are complimentary products which are often sold together with another product. For example, if you sell a printer, you might want to show print cartridges or cables for that printer. Cross sell products can help speed up entering a full sales order.",
        "operationId": "PostCrossSellProduct",
        "requestBody": {
          "description": "Cross sell product to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cross_sell_product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The cross sell product was created. Response body will include the cross sell product details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cross_sell_product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "crossSellProduct"
      },
      "x-sage-pathtitle": "Cross sell products",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/cross_sell_products/{Id}": {
      "get": {
        "tags": [
          "Cross Sell Products"
        ],
        "summary": "Cross Sell Product",
        "description": "Cross sell products are complimentary products which are often sold together with another product. For example, if you sell a printer, you might want to show print cartridges or cables for that printer. Cross sell products can help speed up entering a full sales order.",
        "operationId": "GetCrossSellProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the cross sell product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the cross sell product successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cross_sell_product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Cross Sell Products"
        ],
        "summary": "Cross Sell Product",
        "description": "Cross sell products are complimentary products which are often sold together with another product. For example, if you sell a printer, you might want to show print cartridges or cables for that printer. Cross sell products can help speed up entering a full sales order.",
        "operationId": "PutCrossSellProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the cross sell product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Cross sell product to update in Sage 200 Stock Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cross_sell_product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The cross sell product was updated. Response body will include the cross sell product details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cross_sell_product"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "CrossSellProduct"
      },
      "delete": {
        "tags": [
          "Cross Sell Products"
        ],
        "summary": "Cross Sell Product",
        "description": "Cross sell products are complimentary products which are often sold together with another product. For example, if you sell a printer, you might want to show print cartridges or cables for that printer. Cross sell products can help speed up entering a full sales order.",
        "operationId": "DeleteCrossSellProduct",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the cross sell product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cross sell product was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Cross sell product"
    },
    "/product_memos": {
      "get": {
        "tags": [
          "Product Memos"
        ],
        "summary": "Product Memos",
        "description": "Memos are sections of text that can be used to make comments about a product.<br/><br/>Multiple memos can be added to each product. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetProductMemos",
        "responses": {
          "200": {
            "description": "The list of product memos has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_memo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Product Memos"
        ],
        "summary": "Product Memos",
        "description": "Memos are sections of text that can be used to make comments about a product.<br/><br/>Multiple memos can be added to each product. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "PostProductMemo",
        "requestBody": {
          "description": "Product memo to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product_memo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The product memo was created. Response body will include the product memo details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ProductMemo"
      },
      "x-sage-pathtitle": "Product memos",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_memos/{Id}": {
      "get": {
        "tags": [
          "Product Memos"
        ],
        "summary": "Product Memo",
        "description": "Memos are sections of text that can be used to make comments about a product.<br/><br/>Multiple memos can be added to each product. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetProductMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of product memo successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Product Memos"
        ],
        "summary": "Product Memo",
        "description": "Memos are sections of text that can be used to make comments about a product.<br/><br/>Multiple memos can be added to each product. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "PutProductMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Product memo to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product_memo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The product memo was updated. Response body will include the product memo details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ProductMemo"
      },
      "delete": {
        "tags": [
          "Product Memos"
        ],
        "summary": "Product Memo",
        "description": "Memos are sections of text that can be used to make comments about a product.<br/><br/>Multiple memos can be added to each product. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "DeleteProductMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product memo was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product memo"
    },
    "/product_groups/{productGroupId}/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Products For Product Group",
        "description": "Products are used to track stock within Sage 200. This is not just for physical items, but also for items that are ordered direct from suppliers, services, and time or labour that can be included on customer invoices.<P>Each stock item has default settings that are used each time the item is bought or sold. Some of these are inherited from the product group and some are set on each item.</P>",
        "operationId": "GetProductsForProductGroup",
        "parameters": [
          {
            "name": "productGroupId",
            "in": "path",
            "description": "Unique Id of the product group.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the products have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Products for product group"
    },
    "/units": {
      "get": {
        "tags": [
          "Units"
        ],
        "summary": "Units",
        "description": "The units of measure in which products are stored as well as those used when buying or selling products.",
        "operationId": "GetUnits",
        "responses": {
          "200": {
            "description": "The list of units has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/unit"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Units",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/units/{Id}": {
      "get": {
        "tags": [
          "Units"
        ],
        "summary": "Unit",
        "description": "The units of measure in which products are stored as well as those used when buying or selling products.",
        "operationId": "GetUnit",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the unit.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of unit successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Unit"
    },
    "/unit_types": {
      "get": {
        "tags": [
          "Unit Types"
        ],
        "summary": "Unit Types",
        "description": "Unit types are used to indicate the unit of measure type within the application. The types can be 'Base', 'Stock' or 'Additional'.<P>The API endpoint returns details of the unit of measure types that can be used.</P>",
        "operationId": "GetUnitTypes",
        "responses": {
          "200": {
            "description": "The details of the unit types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/unit_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Unit types",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_views": {
      "get": {
        "tags": [
          "Product Views"
        ],
        "summary": "Product Views",
        "description": "When making larger requests for product information, the Product Views resource can be a faster alternative to the 'Product' resource. The Product Views resource also returns a wider breadth of information than the Product resource. Using Product Views could therefore reduce the quantity of API requests needed to return the same information from multiple API resources.",
        "operationId": "GetProductViews",
        "responses": {
          "200": {
            "description": "Get a collection of products using views.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product views",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "02/11/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'bom_item_type_id'."
        }
      ]
    },
    "/product_status_types": {
      "get": {
        "tags": [
          "Product Status Types"
        ],
        "summary": "Product Status Types",
        "description": "Product status types are used to identify when a product can have a stock movement recorded against it within the application. Products can be 'Active' or 'Inactive'.<P>The API endpoint returns details of the product status types that can be used.</P>",
        "operationId": "GetProductStatusTypes",
        "responses": {
          "200": {
            "description": "The details of the product status types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_status_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product status types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_group_search_category_values": {
      "get": {
        "tags": [
          "Product Group Search Category Values"
        ],
        "summary": "Product Group Search Category Values",
        "description": "This API endpoint returns a list of the allowed values for a product group search category.",
        "operationId": "GetProductGroupSearchCategoryValues",
        "responses": {
          "200": {
            "description": "The details of the product status types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_group_search_category_value"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product group search category values",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/bom_item_types": {
      "get": {
        "tags": [
          "Bom Item Types"
        ],
        "summary": "Bill Of Materials Item Types",
        "description": "Bill of materials item types are used to identify how this product will be used in a bill of materials within the application. Products can be 'Component', 'Subassembly', 'Phantom' or 'Built/Bought'.<P>The API endpoint returns details of the bill of materials item types that can be used.</P>",
        "operationId": "GetBOMItemTypes",
        "responses": {
          "200": {
            "description": "The details of the bill of materials item types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bom_item_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bill of materials item types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_types": {
      "get": {
        "tags": [
          "Traceable Types"
        ],
        "summary": "Traceable Types",
        "description": "Traceable types are used to identify the different traceable options of the product that exist within the application. Products can be 'Non-Traceable', 'Serial Numbered' or 'Batch Numbered'.<P>The API endpoint returns details of the traceable types that can be used.</P>",
        "operationId": "GetTraceableTypes",
        "responses": {
          "200": {
            "description": "The details of the traceable types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Traceable types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_types": {
      "get": {
        "tags": [
          "Product Types"
        ],
        "summary": "Product Types",
        "description": "Product types are used to identify the different types of product that exist within the application. Products can be 'Stock', 'Miscellaneous' or 'Service/Labour'.<P>The API endpoint returns details of the product types that can be used.</P>",
        "operationId": "GetProductTypes",
        "responses": {
          "200": {
            "description": "The details of the product types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product types"
    },
    "/product_transaction_group_types": {
      "get": {
        "tags": [
          "Product Transaction Group Types"
        ],
        "summary": "Product Transaction Group Types",
        "description": "Product transaction group types are used to group the different (secondary) transaction types of the product within the application. Product transaction group types can be 'Allocation', 'Goods Out', 'Goods In', 'On POP Order'.<P>The API endpoint returns details of the product transaction group types that can be used.</P>",
        "operationId": "GetProductTransactionGroupTypes",
        "responses": {
          "200": {
            "description": "The details of the product transaction group types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_transaction_group_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product transaction group types",
      "x-sage-changelog": [
        {
          "date": "14/12/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_transaction_types": {
      "get": {
        "tags": [
          "Product Transaction Types"
        ],
        "summary": "Product Transaction Types",
        "description": "Product transaction types are used to identify the different types of product movement transactions. These transactions are created when products are moved in and out of stock and, can be from various sources such as purchase orders or sales orders.",
        "operationId": "GetProductTransactionTypes",
        "responses": {
          "200": {
            "description": "The details of the product transaction types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_transaction_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product transaction types"
    },
    "/product_transaction_views": {
      "get": {
        "tags": [
          "Product Transaction Views"
        ],
        "summary": "Product Transaction Views",
        "description": "A product transaction is created each time a product is moved in, or out of stock. Product transactions are created from various sources such as purchase orders, sales orders, transfers between warehouses etc.. This resource returns the details of product transactions. The default sort (orderby) field is by 'Id' descending.",
        "operationId": "GetProductTransactionViews",
        "responses": {
          "200": {
            "description": "The details of the product transaction views have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_transaction_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product transaction views",
      "x-sage-changelog": [
        {
          "date": "16/04/2019",
          "title": "Extended operation",
          "description": "The default sort (orderby) field is by 'Id' descending."
        },
        {
          "date": "09/05/2019",
          "title": "Extended operation",
          "description": "This operation now supports analysis codes 6-20 in professional."
        },
        {
          "date": "14/12/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'transaction_group_id', 'transaction_type_id' and 'source_area_type_id'."
        }
      ]
    },
    "/product_transactions/{traceableHistoryId}/traceable_item_transactions": {
      "get": {
        "tags": [
          "Traceable Item Transactions"
        ],
        "summary": "Traceable Item Details For A Product Traceable History Record",
        "description": "Returns the collection of traceable item details for a product traceable history record. (Sage 200 Professional only).",
        "operationId": "GetTransactionsForTraceableHistory",
        "parameters": [
          {
            "name": "traceableHistoryId",
            "in": "path",
            "description": "Unique Id of the product traceable history record.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of traceable item details for a product traceable history record have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_transaction_traceable_item_history_record"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Traceable item details for a product traceable history record",
      "x-sage-professional-only": true,
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/costing_method_types": {
      "get": {
        "tags": [
          "Costing Method Types"
        ],
        "summary": "Costing Method Types",
        "description": "Costing method types are used to calculate the cost of sales from your sales orders, the value of stock and the transactions posted to your stock nominal accounts within the application. Product groups can be 'FIFO', 'Average', 'Standard' or 'Actual'.<P>The API endpoint returns details of the costing method types that can be used.</P>",
        "operationId": "GetCostingMethodTypes",
        "responses": {
          "200": {
            "description": "The details of the costing method types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/costing_method_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Costing method types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/landed_costs_types": {
      "get": {
        "tags": [
          "Landed Costs Types"
        ],
        "summary": "Landed Costs Types",
        "description": "Landed costs refer to any costs associated with the shipping, handling and importing of stock items on purchase orders. These additional costs are often invoiced separately, for example, by a courier. Landed costs type can be 'Not Applicable', 'Percentage Based', or 'Value Based'.<P>The API endpoint returns details of the costing method types that can be used.</P>",
        "operationId": "GetLandedCostsTypes",
        "responses": {
          "200": {
            "description": "The details of the landed costs types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/landed_costs_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Landed costs types",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_search": {
      "post": {
        "tags": [
          "Product Search"
        ],
        "summary": "Product Search",
        "description": "Returns matching products associated with the search category values passed.",
        "operationId": "PostProductSearch",
        "responses": {
          "200": {
            "description": "The matching products was successfully returned. Response body will include the customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_search"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product search",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "22/08/2022",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'show_only_allow_sales_order'."
        }
      ]
    },
    "/product_search_types": {
      "get": {
        "tags": [
          "Product Search Types"
        ],
        "summary": "Product Search Types",
        "description": "Product search types.<P>The API endpoint returns details of the product search types that can be used.</P>",
        "operationId": "GetProductSearchTypes",
        "responses": {
          "200": {
            "description": "The details of the product search types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_search_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product search types",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_groups": {
      "get": {
        "tags": [
          "Product Groups"
        ],
        "summary": "Product Groups",
        "description": "Product groups are used to group stock items together with similar characteristics or requirements. Product Groups provide several default settings for stock items and have their own unique code and description.",
        "operationId": "GetProductGroups",
        "responses": {
          "200": {
            "description": "The details of the product groups have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_group"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product groups",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'costing_method', 'selling_quantities_use_multiple_units', 'selling_prices_use_multiple_units' and 'date_time_created'."
        },
        {
          "date": "15/03/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'stocktake_cycle_period', 'label_printing_option_type', 'keep_movement_history', 'can_over_allocate_negative_stock', 'use_description_on_documents', 'use_reverse_charge_vat_rules', 'do_items_use_units', 'buying_quantities_use_multiple_units', 'buying_prices_use_multiple_units', 'do_items_use_markup', 'use_landed_costs', 'landed_costs_type', 'landed_costs_percentage', 'landed_costs_per_item', 'traceable_type', 'stock_nominal_code_id', 'revenue_nominal_code_id', 'accrual_nominal_code_id', 'issue_nominal_code_id', 'accrual_nominal_code', 'issue_nominal_code', 'revenue_nominal_code' and 'stock_nominal_code'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'this_is_the_sop_product_group', 'sale_from_single_batch', 'allow_duplicate_numbers', 'uses_alternative_ref', 'uses_sell_by_date', 'uses_use_by_date', 'base_unit_id', 'stock_unit_id', 'base_unit', 'stock_unit', 'search_categories', 'units' and 'bom_settings'."
        }
      ]
    },
    "/product_groups/{Id}": {
      "get": {
        "tags": [
          "Product Groups"
        ],
        "summary": "Product Group",
        "description": "Product groups are used to group stock items together with similar characteristics or requirements. Product Groups provide several default settings for stock items and have their own unique code and description.",
        "operationId": "GetProductGroup",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product group.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of product group successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_group"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product group"
    },
    "/lookup_product_groups": {
      "get": {
        "tags": [
          "Lookup Product Groups"
        ],
        "summary": "Lookup Product Groups",
        "description": "Gets a subset of product group information for populating a lookup.",
        "operationId": "GetLookupProductGroups",
        "responses": {
          "200": {
            "description": "Get a collection of product groups for populating a lookup.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/lookup_product_group"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Lookup Product Groups",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/lookup_products": {
      "get": {
        "tags": [
          "Lookup Products"
        ],
        "summary": "Lookup Products",
        "description": "Gets a subset of product information for populating a lookup.",
        "operationId": "GetLookupProducts",
        "responses": {
          "200": {
            "description": "Get a collection of products for populating a lookup.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/lookup_product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Lookup Products",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "15/03/2021",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'allow_sales_order'."
        }
      ]
    },
    "/lookup_stock_item_units": {
      "get": {
        "tags": [
          "Lookup Stock Item Units"
        ],
        "summary": "Lookup Stock Item Units",
        "description": "Gets a subset of Stock Item Unit information for populating a lookup.",
        "operationId": "GetLookupStockItemUnits",
        "responses": {
          "200": {
            "description": "Get a collection of Stock Item Units for populating a lookup.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/lookup_stock_item_unit"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Lookup Stock Item Units",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'unit_id'."
        }
      ]
    },
    "/stock_transfers": {
      "post": {
        "tags": [
          "Stock Transfers"
        ],
        "summary": "Stock Transfers",
        "description": "A stock transfer is used to move stock from one location to another.",
        "operationId": "PostStockTransfers",
        "requestBody": {
          "description": "Product to transfer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stock_transfer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The stock transfer was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_transfer_response"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Stock transfers"
      },
      "x-sage-pathtitle": "Stock transfers",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stock_transfer_traceable_items": {
      "post": {
        "tags": [
          "Stock Transfer Traceable Items"
        ],
        "summary": "Stock Transfer - Get Traceable Items",
        "description": "Gets the list of traceable items for a product and bin.",
        "operationId": "PostStockTransferTraceableItems",
        "requestBody": {
          "description": "Product to transfer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stock_transfer_traceable_items_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The traceable items were successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_transfer"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Stock transfer"
      },
      "x-sage-pathtitle": "Stock transfer - Get Traceable Items",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_new_items": {
      "post": {
        "tags": [
          "Stocktake New Items"
        ],
        "summary": "Stocktake New Items",
        "description": "Retrieves a list of stock items or bins that are available for a new stocktake.",
        "operationId": "PostStocktakeNewItems",
        "requestBody": {
          "description": "The items available for a new stocktake.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stocktake"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The retrieving of new items for a stocktake was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Stocktake New Items"
      },
      "x-sage-pathtitle": "Stocktake new items",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_amend_items": {
      "post": {
        "tags": [
          "Stocktake Amend Items"
        ],
        "summary": "Stocktake Amend Items",
        "description": "Retrieves a list of stock items or bins that are available for an existing stocktake.",
        "operationId": "PostStocktakeAmendItems",
        "requestBody": {
          "description": "The items available for an existing stocktake.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stocktake"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The retrieving of items for an existing stocktake was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Stocktake Amend Items"
      },
      "x-sage-pathtitle": "Stocktake amend items",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/cross_sell_product_views": {
      "get": {
        "tags": [
          "Cross Sell Product Views"
        ],
        "summary": "Cross Sell Product Views",
        "description": "\"This resource returns a lookup linking products with products that it can be cross sold with.\"",
        "operationId": "GetCrossSellProductViews",
        "responses": {
          "200": {
            "description": "The list of cross sell products has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cross_sell_product_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Cross Sell Product views",
      "x-sage-changelog": [
        {
          "date": "08/11/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "18/02/2022",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'cross_sell_product_status_type_id' and 'cross_sell_product_traceable_type_id'.<br />This operation has had the field 'cross_sell_product_status_type' removed."
        }
      ]
    },
    "/alternative_product_views": {
      "get": {
        "tags": [
          "Alternative Product Views"
        ],
        "summary": "Alternative Product Views",
        "description": "\"This specifies a lookup linking products with products that are an alternative for it.\"",
        "operationId": "GetAlternativeProductViews",
        "responses": {
          "200": {
            "description": "The list of alternative products has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/alternative_product_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Alternative Product views",
      "x-sage-changelog": [
        {
          "date": "08/11/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "18/02/2022",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'alternative_product_status_type_id' and 'alternative_product_traceable_type_id'.<br />This operation has had the field 'alternative_product_status_type' removed."
        }
      ]
    },
    "/serial_allocated_to_who_types": {
      "get": {
        "tags": [
          "Serial Allocated To Who Types"
        ],
        "summary": "Serial Allocated To Who Types",
        "description": "The serial allocated to who type, used to determine the type of allocation of a serial number.<P>The API endpoint returns the following values: EnumSerialAllocatedToWhoNot, EnumSerialAllocatedToWhoThis, EnumSerialAllocatedToWhoOther.</P>",
        "operationId": "GetSerialAllocatedToWhoTypes",
        "responses": {
          "200": {
            "description": "The details of the serial allocated to who types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/serial_allocated_to_who_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Serial allocated to who types",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stock_settings": {
      "get": {
        "tags": [
          "Stock Settings"
        ],
        "summary": "Stock Settings",
        "description": "The Stock Settings are used to choose how to process and manage your stock.",
        "operationId": "GetStockSettings",
        "responses": {
          "200": {
            "description": "Details of stock settings successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stock_settings"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stock settings",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Extended operation",
          "description": "This endpoint was enhanced with a GET by Id operation."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'use_search_categories', 'integrate_stock_management_with_nominal', 'generate_cos_for_sop', 'allow_negative_stocktake', 'allow_negative_stocktake_with_purchase_order' and 'allocate_individual_items'."
        },
        {
          "date": "14/12/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'internal_areas' and 'date_time_created'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'record_numbers_on_goods_received', 'allow_fulfilment_from_stock', 'allow_fulfilment_from_supplier_via_stock', 'allow_fulfilment_from_supplier_direct_to_customer', 'use_landed_costs' and 'landed_costs_nominal_code_id'."
        }
      ]
    },
    "/stock_settings/{Id}": {
      "get": {
        "tags": [
          "Stock Settings"
        ],
        "summary": "Stock Setting",
        "description": "The Stock Settings are used to choose how to process and manage your stock.",
        "operationId": "GetStockSetting",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stock settings.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stock settings successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_settings"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stock setting"
    },
    "/internal_areas": {
      "get": {
        "tags": [
          "Internal Areas"
        ],
        "summary": "Internal Areas",
        "description": "The internal areas represent departments such as sales, retail and production. Use them to monitor stock issued for internal use.",
        "operationId": "GetInternalAreas",
        "responses": {
          "200": {
            "description": "Internal areas successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/internal_area"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Internal areas",
      "x-sage-changelog": [
        {
          "date": "14/12/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/internal_areas/{Id}": {
      "get": {
        "tags": [
          "Internal Areas"
        ],
        "summary": "Internal Area",
        "description": "The internal areas represent departments such as sales, retail and production. Use them to monitor stock issued for internal use.",
        "operationId": "GetInternalArea",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the internal area.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Internal areas successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internal_area"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Internal area"
    },
    "/warehouses": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Warehouses",
        "description": "All stock within Sage 200, regardless of type (Stock, Service/labour, or Miscellaneous), requires a holding location. By default, the HOME warehouse is created within Sage 200, you can then create your own warehouses.",
        "operationId": "GetWarehouses",
        "responses": {
          "200": {
            "description": "The list of warehouses has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Warehouses",
        "description": "All stock within Sage 200, regardless of type (Stock, Service/labour, or Miscellaneous), requires a holding location. By default, the HOME warehouse is created within Sage 200, you can then create your own warehouses.",
        "operationId": "PostWarehouse",
        "requestBody": {
          "description": "Warehouse to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The warehouse was created. Response body will include the warehouse details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Warehouse"
      },
      "x-sage-pathtitle": "Warehouses",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'description', 'warehouse_type', 'use_for_sales_trading', 'postal_name', 'address_1', 'address_2', 'address_3', 'address_4', 'city', 'county', 'postcode', 'country', 'contact', 'telephone_number', 'fax_number', 'email', 'website', 'country_code_id', 'country_code' and 'bom_settings'."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'spare_text_1', 'spare_text_2', 'spare_text_3', 'spare_text_4', 'spare_text_5', 'spare_text_6', 'spare_text_7', 'spare_text_8', 'spare_text_9', 'spare_text_10', 'spare_number_1', 'spare_number_2', 'spare_number_3', 'spare_number_4', 'spare_number_5', 'spare_number_6', 'spare_number_7', 'spare_number_8', 'spare_number_9', 'spare_number_10', 'spare_date_1', 'spare_date_2', 'spare_date_3', 'spare_date_4', 'spare_date_5', 'spare_bool_1', 'spare_bool_2', 'spare_bool_3', 'spare_bool_4' and 'spare_bool_5'."
        }
      ]
    },
    "/warehouses/{Id}": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Warehouse",
        "description": "Return a single warehouse resource by supplying a warehouse Id.",
        "operationId": "GetWarehouse",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the warehouse.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of warehouse successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Warehouse",
        "description": "All stock within Sage 200, regardless of type (Stock, Service/labour, or Miscellaneous), requires a holding location. By default, the HOME warehouse is created within Sage 200, you can then create your own warehouses.",
        "operationId": "PutWarehouse",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the warehouse.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Warehouse to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The warehouse was updated. Response body will include the warehouse details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Warehouse"
      },
      "delete": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Warehouse",
        "description": "All stock within Sage 200, regardless of type (Stock, Service/labour, or Miscellaneous), requires a holding location. By default, the HOME warehouse is created within Sage 200, you can then create your own warehouses.",
        "operationId": "DeleteWarehouse",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the warehouse.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Warehouse was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouse"
    },
    "/products/{productId}/warehouses": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Warehouses For A Product",
        "description": "Returns the collection of warehouses for a product.",
        "operationId": "GetWarehousesForProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Unique Id of a product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of warehouses has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouses for a product"
    },
    "/warehouse_types": {
      "get": {
        "tags": [
          "Warehouse Types"
        ],
        "summary": "Warehouse Types",
        "description": "The warehouse type.",
        "operationId": "GetWarehouseTypes",
        "responses": {
          "200": {
            "description": "The details of the warehouse types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouse Types"
    },
    "/warehouse_holdings": {
      "get": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holdings",
        "description": "All stock within Sage 200 regardless of type (Stock, Service/labour, or Miscellaneous), require a holding location. The location indicates where an item is stored and the stock level settings for each product in the warehouse i.e. the re-order level, the minimum and maximum stock levels. <br /><br />Items with a type of 'Stock' have levels recorded for each warehouse location and the levels are used when allocating, issuing and receiving stock. ",
        "operationId": "GetWarehouseHoldings",
        "responses": {
          "200": {
            "description": "The details of the warehouse holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holdings",
        "description": "All stock within Sage 200 regardless of type (Stock, Service/labour, or Miscellaneous), require a holding location. The location indicates where an item is stored and the stock level settings for each product in the warehouse i.e. the re-order level, the minimum and maximum stock levels. <br /><br />Items with a type of 'Stock' have levels recorded for each warehouse location and the levels are used when allocating, issuing and receiving stock. ",
        "operationId": "PostWarehouseHolding",
        "requestBody": {
          "description": "WarehouseHolding to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_holding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The warehouse holding was created. Response body will include the warehouse holding details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_holding"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "WarehouseHolding"
      },
      "x-sage-pathtitle": "Warehouse holdings",
      "x-sage-changelog": [
        {
          "date": "25/05/2017",
          "title": "Extended operations",
          "description": "Put, Post and Delete operations have been included for WarehouseHoldings. When the stock setting UseMultipleLocations is set to true you can associate warehouses with products. Note, you cannot delete the last WarehouseHolding."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'quantity_reserved', 'quantity_in_stock_less_reserved', 'quantity_on_order', 'free_stock_available', 'free_stock_available_less_reserved', 'warehouse_name' and 'date_time_created'."
        },
        {
          "date": "15/03/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'is_default_manufacturing_warehouse' and 'bin_holdings'."
        },
        {
          "date": "22/08/2022",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'status'."
        }
      ]
    },
    "/warehouse_holdings/{Id}": {
      "get": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holding",
        "description": "Return a single warehouse holding resource by supplying a warehouse holding Id.",
        "operationId": "GetWarehouseHolding",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the warehouse holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of warehouse holding successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_holding"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holding",
        "description": "Update a single warehouse holding resource by supplying a warehouse holding Id.",
        "operationId": "PutWarehouseHolding",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the warehouse holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Warehouse holding to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse_holding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The warehouse holding was updated. Response body will include the warehouse holding details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_holding"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Warehouse_Holding"
      },
      "delete": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holding",
        "description": "Delete a single warehouse holding resource by supplying a warehouse holding Id.",
        "operationId": "DeleteWarehouseHolding",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the warehouse holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Warehouse holding was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouse holding"
    },
    "/warehouses/{warehouseId}/warehouse_holdings": {
      "get": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holdings For Warehouse",
        "description": "Returns collection of warehouse holdings for warehouse.",
        "operationId": "GetWarehouseHoldingsForWarehouse",
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Unique Id of the warehouse.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the warehouse holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouse holdings for warehouse"
    },
    "/products/{productId}/warehouse_holdings": {
      "get": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holdings For Product",
        "description": "Returns collection of warehouse holdings for product.",
        "operationId": "GetWarehouseHoldingsForProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the warehouse holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouse holdings for product"
    },
    "/warehouses/{warehouseId}/products/{productId}/warehouse_holdings": {
      "get": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holdings For Warehouse And Product",
        "description": "Returns collection of warehouse holdings for a warehouse and product.",
        "operationId": "GetWarehouseHoldingsForWarehouseAndProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Unique Id of the warehouse.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the warehouse holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouse holdings for warehouse and product"
    },
    "/products/{productId}/warehouses/{warehouseId}/warehouse_holdings": {
      "get": {
        "tags": [
          "Warehouse Holdings"
        ],
        "summary": "Warehouse Holdings For Product And Warehouse",
        "description": "Returns collection of warehouse holdings for a product and warehouse.",
        "operationId": "GetWarehouseHoldingsForProductAndWarehouse",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Unique Id of the warehouse.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the warehouse holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouse holdings for product and warehouse"
    },
    "/warehouse_holdings/{warehouseHoldingId}/traceable_item_balances": {
      "get": {
        "tags": [
          "Traceable Item Balances"
        ],
        "summary": "Traceable Item Balances For A Warehouse Holding",
        "description": "Returns the collection of traceable item balances for a warehouse holding of a product.",
        "operationId": "GetTraceableItemBalancesForAWarehouseHolding",
        "parameters": [
          {
            "name": "warehouseHoldingId",
            "in": "path",
            "description": "Unique Id of the warehouse holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of traceable item balances for a warehouse holding of a product have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_adjustment_item_balance"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Traceable item balances for a warehouse holding",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'bin_item_id'."
        }
      ]
    },
    "/bin_holdings": {
      "get": {
        "tags": [
          "Bin Holdings"
        ],
        "summary": "Bin Holdings",
        "description": "Bins allow you to specify a place in a Warehouse where stock is stored such as a shelf or aisle. Every Warehouse has a single Bin created by default called 'Unspecified'. If you don't want to use bins with your warehouses, all items are stored in the 'Unspecified' bin. You can rename the 'Unspecified' bin to something more meaningful for your company.",
        "operationId": "GetBinHoldings",
        "responses": {
          "200": {
            "description": "The details of the bin holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bin_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Bin Holdings"
        ],
        "summary": "Bin Holdings",
        "description": "Bins allow you to specify a place in a Warehouse where stock is stored such as a shelf or aisle. Every Warehouse has a single Bin created by default called 'Unspecified'. If you don't want to use bins with your warehouses, all items are stored in the 'Unspecified' bin. You can rename the 'Unspecified' bin to something more meaningful for your company.",
        "operationId": "PostBinHolding",
        "requestBody": {
          "description": "BinHolding to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bin_holding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bin holding was created. Response body will include the bin holding details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bin_holding"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "BinHolding"
      },
      "x-sage-pathtitle": "Bin holdings",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'spare_text_1', 'spare_text_2', 'spare_text_3', 'spare_text_4', 'spare_text_5', 'spare_text_6', 'spare_text_7', 'spare_text_8', 'spare_text_9', 'spare_text_10', 'spare_number_1', 'spare_number_2', 'spare_number_3', 'spare_number_4', 'spare_number_5', 'spare_number_6', 'spare_number_7', 'spare_number_8', 'spare_number_9', 'spare_number_10', 'spare_date_1', 'spare_date_2', 'spare_date_3', 'spare_date_4', 'spare_date_5', 'spare_bool_1', 'spare_bool_2', 'spare_bool_3', 'spare_bool_4' and 'spare_bool_5'."
        }
      ]
    },
    "/bin_holdings/{Id}": {
      "get": {
        "tags": [
          "Bin Holdings"
        ],
        "summary": "Bin Holding",
        "description": "Return a single bin holding resource by supplying a bin holding Id.",
        "operationId": "GetBinHolding",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the bin holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of bin holding successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bin_holding"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Bin Holdings"
        ],
        "summary": "Bin Holding",
        "description": "Update a single bin holding resource by supplying a bin holding Id.",
        "operationId": "PutBinHolding",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the bin holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Bin holding to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bin_holding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bin holding was updated. Response body will include the bin holding details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bin_holding"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "BinHolding"
      },
      "delete": {
        "tags": [
          "Bin Holdings"
        ],
        "summary": "Bin Holding",
        "description": "Delete a single bin holding resource by supplying a bin holding Id.",
        "operationId": "DeleteBinHolding",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the bin holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bin holding was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bin holding"
    },
    "/warehouse_holdings/{warehouseHoldingId}/bin_holdings": {
      "get": {
        "tags": [
          "Bin Holdings"
        ],
        "summary": "Bin Holdings For Warehouse Holding",
        "description": "Returns collection of bin holdings for warehouse holding.",
        "operationId": "GetBinHoldingsForWarehouseHolding",
        "parameters": [
          {
            "name": "warehouseHoldingId",
            "in": "path",
            "description": "Unique Id of the warehouse holding.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the bin holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bin_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bin holdings for warehouse holding"
    },
    "/products/{productId}/bin_holdings": {
      "get": {
        "tags": [
          "Bin Holdings"
        ],
        "summary": "Bin Holdings For Product",
        "description": "Returns collection of bin holdings for product.",
        "operationId": "GetBinHoldingsForProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the bin holdings have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bin_holding"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bin holdings for product"
    },
    "/traceable_items_assign_traceable_items": {
      "post": {
        "tags": [
          "Traceable Items Assign Traceable Items"
        ],
        "summary": "Assign Batch/Serial Numbers - Get Traceable Items",
        "description": "Gets the list of unassigned traceable items for a product.",
        "operationId": "PostTraceableItemsAssignTraceableItems",
        "requestBody": {
          "description": "A traceable product request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/traceable_items_assign_traceable_items_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The traceable items were successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/traceable_adjustment"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "TraceableItemsAssignTraceableItems"
      },
      "x-sage-pathtitle": "Assign Batch/Serial Numbers - Get Traceable Items",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_items_assign": {
      "post": {
        "tags": [
          "Traceable Items Assign"
        ],
        "summary": "Assign Batch/Serial Numbers",
        "description": "Assigns batch or serial numbers to unassigned traceable items.",
        "operationId": "PostTraceableItemsAssign",
        "requestBody": {
          "description": "Traceable adjustment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/traceable_adjustment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The traceable items were assigned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/traceable_adjustment"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Traceable adjustment"
      },
      "x-sage-pathtitle": "Assign Batch/Serial Numbers",
      "x-sage-professional-only": true,
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_items_amend_traceable_items": {
      "post": {
        "tags": [
          "Traceable Items Amend Traceable Items"
        ],
        "summary": "Amend Batch/Serial Numbers - Get Traceable Items",
        "description": "Gets the list of assigned traceable items for a product that can be amended.",
        "operationId": "PostTraceableItemsAmendTraceableItems",
        "requestBody": {
          "description": "A traceable product request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/traceable_items_amend_traceable_items_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The traceable items were successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/traceable_adjustment"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "TraceableItemsAmendTraceableItems"
      },
      "x-sage-pathtitle": "Amend Batch/Serial Numbers - Get Traceable Items",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_items_amend": {
      "post": {
        "tags": [
          "Traceable Items Amend"
        ],
        "summary": "Amend Batch/Serial Numbers",
        "description": "Amends batch or serial numbered items.",
        "operationId": "PostTraceableItemsAmend",
        "requestBody": {
          "description": "Traceable adjustment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/traceable_adjustment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The traceable items were amended successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/traceable_adjustment"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Traceable adjustment"
      },
      "x-sage-pathtitle": "Amend Batch/Serial Numbers",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_warehouse_bin_views": {
      "get": {
        "tags": [
          "Product Warehouse Bin Views"
        ],
        "summary": "Warehouses And Bins For A Product View",
        "description": "Returns the collection of warehouses and bins for a product. This view filters out the return and direct delivery warehouses. The default sort (orderby) field are by 'warehouse_name' and 'bin_holding_name' ascending.",
        "operationId": "GetProductWarehouseBinViews",
        "responses": {
          "200": {
            "description": "The list of warehouses and bins have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_warehouse_bin_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouses and Bins for a product view",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_warehouse_views": {
      "get": {
        "tags": [
          "Product Warehouse Views"
        ],
        "summary": "Warehouses For A Product View",
        "description": "Returns the collection of warehouses for a product. This view filters out the return and direct delivery warehouses. The default sort (orderby) field is by 'warehouse_name' ascending.",
        "operationId": "GetProductWarehouseViews",
        "responses": {
          "200": {
            "description": "The list of warehouses has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product_warehouse_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Warehouses for a product view",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'use_for_sales_trading' and 'free_stock_quantity'."
        }
      ]
    },
    "/product_sales_figures/{Id}": {
      "get": {
        "tags": [
          "Product Sales Figures"
        ],
        "summary": "Product Sales Figure",
        "description": "Sales trading figures are the quantities and value of goods sold in base currency. These figures are available if a stock item is set to maintain a movement history. Trading figures are not available for phantom BOM built items.<P>This endpoint has custom filtering on the following fields: 'no_of_periods', 'warehouse_name', 'source_area_reference' and analysis codes 1-20 (analysis_code_n).</P>",
        "operationId": "GetProductSalesFigures",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of product sales figures successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_sales_figures"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product sales figure",
      "x-sage-changelog": [
        {
          "date": "14/12/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/product_purchase_figures/{Id}": {
      "get": {
        "tags": [
          "Product Purchase Figures"
        ],
        "summary": "Product Purchase Figure",
        "description": "Purchase trading figures are the quantities and value of goods bought in base currency. These figures are available if a stock item is set to maintain a movement history. Trading figures are not available for phantom BOM built items.<P>This endpoint has custom filtering on the following fields: 'no_of_periods', 'warehouse_name', 'source_area_reference' and analysis codes 1-20 (analysis_code_n).</P>",
        "operationId": "GetProductPurchaseFigures",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the product.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of product purchase figures successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product_purchase_figures"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Product purchase figure",
      "x-sage-changelog": [
        {
          "date": "14/12/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/source_area_types": {
      "get": {
        "tags": [
          "Source Area Types"
        ],
        "summary": "Source Area Types",
        "description": "Source area types are used to describe the area or account type applicable to a stock transaction. Source area types can be 'EnumSourceAreaTypeSupplier', 'EnumSourceAreaTypeCustomer', 'EnumSourceAreaTypeInternal', 'EnumSourceAreaTypeWriteOff', 'EnumSourceAreaTypeOpeningBalance', 'EnumSourceAreaTypeBOM'.<P>The API endpoint returns details of the source area types that can be used.</P>",
        "operationId": "GetSourceAreaTypes",
        "responses": {
          "200": {
            "description": "The details of the source area types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/source_area_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Source area types",
      "x-sage-changelog": [
        {
          "date": "14/12/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/entry_source_types": {
      "get": {
        "tags": [
          "Entry Source Types"
        ],
        "summary": "Entry Source Types",
        "description": "Entry source types are used to describe the source module that was used to create a transaction. Entry source types can be 'EnumEntrySourceTypeStock', 'EnumEntrySourceTypeSOP', 'EnumEntrySourceTypePOP', 'EnumEntrySourceTypeBOM', 'EnumEntrySourceTypeManual'.<P>The API endpoint returns details of the entry source types that can be used.</P>",
        "operationId": "GetEntrySourceTypes",
        "responses": {
          "200": {
            "description": "The details of the source area types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/entry_source_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Entry source types",
      "x-sage-changelog": [
        {
          "date": "14/12/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_items/{traceableItemId}/traceable_item_receipts": {
      "get": {
        "tags": [
          "Traceable Item Receipts"
        ],
        "summary": "Receipt Movement History Records For A Traceable Item",
        "description": "Returns the collection of movement history records for a product. This view filters on the product movements of 'In - Unknown Source', 'In - SOP', 'In - POP', 'In (No Price) - POP' and 'BOM Build'. There is no default sort (orderby).",
        "operationId": "GetReceiptsForTraceableItem",
        "parameters": [
          {
            "name": "traceableItemId",
            "in": "path",
            "description": "Unique Id of the traceable item.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of product movement history records have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_item_history_record"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Receipt movement history records for a traceable item",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_items/{traceableItemId}/traceable_item_allocations": {
      "get": {
        "tags": [
          "Traceable Item Allocations"
        ],
        "summary": "Allocation Records For A Traceable Item",
        "description": "Returns the collection of allocations for a product. There is no default sort (orderby).",
        "operationId": "GetAllocationsForTraceableItem",
        "parameters": [
          {
            "name": "traceableItemId",
            "in": "path",
            "description": "Unique Id of the traceable item.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of allocation records have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_item_allocation_record"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Allocation records for a traceable item",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_items/{traceableItemId}/traceable_item_issues": {
      "get": {
        "tags": [
          "Traceable Item Issues"
        ],
        "summary": "Issue Movement History Records For A Traceable Item",
        "description": "Returns the collection of movement history records for a product. This view filters on the product movements of 'Out - Write Off', 'Out - Internal', 'Out - FOC', 'Out - SOP', 'Out - POP', 'Out (No Price) - POP' and 'BOM Issue'. There is no default sort (orderby).",
        "operationId": "GetIssuesForTraceableItem",
        "parameters": [
          {
            "name": "traceableItemId",
            "in": "path",
            "description": "Unique Id of the traceable item.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of product movement history records have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_item_history_record"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Issue movement history records for a traceable item",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_items/{traceableItemId}/traceable_item_locations": {
      "get": {
        "tags": [
          "Traceable Item Locations"
        ],
        "summary": "Location Records For A Traceable Item",
        "description": "Returns the collection of locations for a product. There is no default sort (orderby).",
        "operationId": "GetLocationsForTraceableItem",
        "parameters": [
          {
            "name": "traceableItemId",
            "in": "path",
            "description": "Unique Id of the traceable item.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of location records have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_item_location_record"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Location records for a traceable item",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/traceable_bin_items/{traceableBinItemId}/traceable_item_allocations": {
      "get": {
        "tags": [
          "Traceable Item Allocations"
        ],
        "summary": "Allocation Records For A Traceable Bin Item",
        "description": "Returns the collection of allocations for a product. There is no default sort (orderby).",
        "operationId": "GetAllocationsForTraceableBinItem",
        "parameters": [
          {
            "name": "traceableBinItemId",
            "in": "path",
            "description": "Unique Id of the traceable bin item.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of allocation records have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_item_allocation_record"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Allocation records for a traceable bin item"
    },
    "/traceable_issue_status_types": {
      "get": {
        "tags": [
          "Traceable Issue Status Types"
        ],
        "summary": "Traceable Issue Status Types",
        "description": "Traceable issue status types are used to describe the issued status of traceable items. Traceable issue status types can be 'All', 'Issued Only', or 'Not Issued'.<P>The API endpoint returns details of the traceable issue status types.</P>",
        "operationId": "GetTraceableIssueStatusTypes",
        "responses": {
          "200": {
            "description": "The details of the traceable issue status types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/traceable_issue_status_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Traceable issue status types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_criteria_templates": {
      "get": {
        "tags": [
          "Stocktake Criteria Templates"
        ],
        "summary": "Stocktake Criteria Templates",
        "description": "Stocktake criteria templates are a set of criteria used for auto selection of stock items to add to a stocktake sheet.",
        "operationId": "GetStocktakeCriteriaTemplates",
        "responses": {
          "200": {
            "description": "The list of stocktake criteria templates has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stocktake_criteria_template"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Stocktake Criteria Templates"
        ],
        "summary": "Stocktake Criteria Templates",
        "description": "Stocktake criteria templates are a set of criteria used for auto selection of stock items to add to a stocktake sheet.",
        "operationId": "PostStocktakeCriteriaTemplate",
        "requestBody": {
          "description": "Stocktake criteria template to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stocktake_criteria_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The stocktake criteria template was created. Response body will include the stocktake criteria template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake_criteria_template"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "StocktakeCriteriaTemplate"
      },
      "x-sage-pathtitle": "Stocktake criteria templates",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_criteria_templates/{Id}": {
      "get": {
        "tags": [
          "Stocktake Criteria Templates"
        ],
        "summary": "Stocktake Criteria Template",
        "description": "Stocktake criteria templates are a set of criteria used for auto selection of stock items to add to a stocktake sheet.",
        "operationId": "GetStocktakeCriteriaTemplate",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake criteria template.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of stocktake criteria template successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake_criteria_template"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Stocktake Criteria Templates"
        ],
        "summary": "Stocktake Criteria Template",
        "description": "Stocktake criteria templates are a set of criteria used for auto selection of stock items to add to a stocktake sheet.",
        "operationId": "PutStocktakeCriteriaTemplate",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake criteria template.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Stocktake criteria template to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stocktake_criteria_template"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The stocktake criteria template was updated. Response body will include the stocktake criteria template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake_criteria_template"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "StocktakeCriteriaTemplate"
      },
      "delete": {
        "tags": [
          "Stocktake Criteria Templates"
        ],
        "summary": "Stocktake Criteria Template",
        "description": "Stocktake criteria templates are a set of criteria used for auto selection of stock items to add to a stocktake sheet.",
        "operationId": "DeleteStocktakeCriteriaTemplate",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake criteria template.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stocktake criteria template was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake criteria template"
    },
    "/stocktake_traceable_types": {
      "get": {
        "tags": [
          "Stocktake Traceable Types"
        ],
        "summary": "Stocktake Traceable Types",
        "description": "Stocktake traceable types are used to select stock items by stock traceable type to be included on a stocktake. Selection can be on 'Non-Traceable', 'Serial Numbered', 'Batch Numbered' or 'Batch and Serial'.<P>The API endpoint returns details of the traceable types that can be used.</P>",
        "operationId": "GetStocktakeTraceableTypes",
        "responses": {
          "200": {
            "description": "The details of the stocktake traceable types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stocktake_traceable_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake traceable types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_selector_value_types": {
      "get": {
        "tags": [
          "Stocktake Selector Value Types"
        ],
        "summary": "Stocktake Selector Value Types",
        "description": "Stocktake selector value types are used to select stock items by stock value to be included on a stocktake. Stocktake selector value types can be either 'Average buying price' or 'Value of stock'.<P>The API endpoint returns details of the stocktake selector value types that can be used.</P>",
        "operationId": "GetStocktakeSelectorValueTypes",
        "responses": {
          "200": {
            "description": "The details of the stocktake selector value types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stocktake_selector_value_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake selector value types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_views": {
      "get": {
        "tags": [
          "Stocktake Views"
        ],
        "summary": "Stocktake Views",
        "description": "Gets the collection of stocktakes including warehouse name. The default sort (orderby) field is by 'stocktake_name' ascending.",
        "operationId": "GetStocktakeViews",
        "responses": {
          "200": {
            "description": "The details of the stocktakes have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stocktake_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake views",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_types": {
      "get": {
        "tags": [
          "Stocktake Types"
        ],
        "summary": "Stocktake Types",
        "description": "Stocktake method for selecting stocktake items. Stocktake type can be 'By Stock Item', or 'By Bin'.<P>The API endpoint returns details of the stocktake types that can be used.</P>",
        "operationId": "GetStocktakeTypes",
        "responses": {
          "200": {
            "description": "The details of the stocktake types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stocktake_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_status_types": {
      "get": {
        "tags": [
          "Stocktake Status Types"
        ],
        "summary": "Stocktake Status Types",
        "description": "Stocktake status types describe the possible states in which a stocktake can be. Stocktake status type can be 'No stocktake', 'Selecting items', 'Sheets printed', 'Entering counts', or 'Complete'.<P>The API endpoint returns details of the stocktake status types that can be used.</P>",
        "operationId": "GetStocktakeStatusTypes",
        "responses": {
          "200": {
            "description": "The details of the stocktake status types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stocktake_status_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake status types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/discrepancy_status_types": {
      "get": {
        "tags": [
          "Discrepancy Status Types"
        ],
        "summary": "Discrepancy Status Types",
        "description": "Discrepancy status types describe the possible states of a stocktake discrepancy. Discrepancy status type can be 'No Discrepancy', 'Discrepancy Found', or 'Discrepancy Resolved'.<P>The API endpoint returns details of the discrepancy status types that can be used.</P>",
        "operationId": "GetDiscrepancyStatusTypes",
        "responses": {
          "200": {
            "description": "The details of the discrepancy status types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/discrepancy_status_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Discrepancy status types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktakes": {
      "get": {
        "tags": [
          "Stocktakes"
        ],
        "summary": "Stocktakes",
        "description": "Stocktakes adjust the recorded stock levels in Sage 200 with actual stock levels in order to maintain accurate stock records. Stocktakes are recorded per warehouse. Items for a stocktake can be selected individually (by Stock Item) or by the bin they are stored in.",
        "operationId": "GetStocktakes",
        "responses": {
          "200": {
            "description": "The list of stocktakes has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stocktake"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Stocktakes"
        ],
        "summary": "Stocktakes",
        "description": "Stocktakes adjust the recorded stock levels in Sage 200 with actual stock levels in order to maintain accurate stock records. Stocktakes are recorded per warehouse. Items for a stocktake can be selected individually (by Stock Item) or by the bin they are stored in.",
        "operationId": "PostStocktake",
        "requestBody": {
          "description": "Stocktake to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stocktake"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The stocktake was created. Response body will include the stocktake.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Stocktake"
      },
      "x-sage-pathtitle": "Stocktakes",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktakes/{Id}": {
      "get": {
        "tags": [
          "Stocktakes"
        ],
        "summary": "Stocktake",
        "description": "Stocktakes adjust the recorded stock levels in Sage 200 with actual stock levels in order to maintain accurate stock records. Stocktakes are recorded per warehouse. Items for a stocktake can be selected individually (by Stock Item) or by the bin they are stored in.",
        "operationId": "GetStocktake",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of stocktake successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Stocktakes"
        ],
        "summary": "Stocktake",
        "description": "Stocktakes adjust the recorded stock levels in Sage 200 with actual stock levels in order to maintain accurate stock records. Stocktakes are recorded per warehouse. Items for a stocktake can be selected individually (by Stock Item) or by the bin they are stored in.",
        "operationId": "PutStocktake",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Stocktake to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stocktake"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The stocktake was updated. Response body will include the stocktake.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Stocktake"
      },
      "delete": {
        "tags": [
          "Stocktakes"
        ],
        "summary": "Stocktake",
        "description": "Stocktakes adjust the recorded stock levels in Sage 200 with actual stock levels in order to maintain accurate stock records. Stocktakes are recorded per warehouse. Items for a stocktake can be selected individually (by Stock Item) or by the bin they are stored in.",
        "operationId": "DeleteStocktake",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stocktake was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake"
    },
    "/stocktake_view_adjustments": {
      "post": {
        "tags": [
          "Stocktake View Adjustments"
        ],
        "summary": "Stocktake View Adjustments",
        "description": "Returns stocktake count sheet items on a stocktake including discrepancies.",
        "operationId": "PostStocktakeViewAdjustments",
        "responses": {
          "200": {
            "description": "The stocktake was successfully returned. Response body will include the stocktake details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake view adjustments",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_enter_values": {
      "post": {
        "tags": [
          "Stocktake Enter Values"
        ],
        "summary": "Stocktake Enter Values",
        "description": "Returns stocktake count sheet items to allow entry of actual quantities in stock for a stocktake.",
        "operationId": "PostStocktakeEnterValues",
        "responses": {
          "200": {
            "description": "The stocktake was successfully returned. Response body will include the stocktake details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake enter values",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_approve_complete": {
      "post": {
        "tags": [
          "Stocktake Approve Complete"
        ],
        "summary": "Stocktake Approve And Complete",
        "description": "Returns stocktake count sheet items for the approve and complete of a stocktake.",
        "operationId": "PostStocktakeApproveComplete",
        "responses": {
          "200": {
            "description": "The stocktake was successfully returned. Response body will include the stocktake details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Stocktake approve and complete",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/stocktake_count_sheet_items/{Id}": {
      "get": {
        "tags": [
          "Stocktake Count Sheet Items"
        ],
        "summary": "Stocktake Count Sheet Item",
        "description": "Stocktake count sheet items for the stocktake.",
        "operationId": "GetStocktakeCountSheetItems",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake count sheet item.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of stocktake count sheet items successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake_count_sheet_item"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Stocktake Count Sheet Items"
        ],
        "summary": "Stocktake Count Sheet Item",
        "description": "Stocktake count sheet items for the stocktake.",
        "operationId": "PutStocktakeCountSheetItems",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the stocktake count sheet item.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Stocktake count sheet item to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stocktake_count_sheet_item"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The stocktake count sheet items was updated. Response body will include the stocktake count sheet item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stocktake_count_sheet_item"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "StocktakeCountSheetItems"
      },
      "x-sage-pathtitle": "Stocktake count sheet item",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "02/11/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'costing_method_type', 'standard_cost' and 'average_buying_price'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'include_nos_on_count_sheets'."
        }
      ]
    },
    "/pricing_source_types": {
      "get": {
        "tags": [
          "Pricing Source Types"
        ],
        "summary": "Pricing Source Types",
        "description": "The pricing source type for product suppliers. Pricing source type can be 'LastBuyingPrice', or 'ListPrice'.<P>The API endpoint returns details of the pricing source types that can be used.</P>",
        "operationId": "GetPricingSourceTypes",
        "responses": {
          "200": {
            "description": "The list of pricing source types has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pricing_source_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Pricing source types",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "bom_cost_heading_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description."
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value."
          }
        },
        "description": "The list of different cost heading types. When calculating the cost of BOMs, estimates or works orders, the values are accumulated in a cost heading."
      },
      "bom_cost_heading": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "record Id.",
            "format": "int64",
            "readOnly": true
          },
          "bom_cost_heading_type": {
            "maxLength": 50,
            "type": "string",
            "description": "Cost heading type.",
            "readOnly": true
          },
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Cost heading name.",
            "readOnly": true
          },
          "markup": {
            "type": "number",
            "description": "Markup percentage. This value is used when calculating a suggested selling price during costing operations.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "overhead_recovery_percent": {
            "type": "number",
            "description": "Percentage to be recovered.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "reserved": {
            "type": "boolean",
            "description": "Reserved.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "When calculating the cost of BOMs, estimates or works orders, the values are accumulated in a cost heading."
      },
      "product": {
        "required": [
          "code",
          "name",
          "product_group_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64",
            "readOnly": true
          },
          "code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code."
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name."
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Product description."
          },
          "use_description_on_documents": {
            "type": "boolean",
            "description": "Whether to use the product description on order and invoice documents."
          },
          "barcode": {
            "maxLength": 60,
            "type": "string",
            "description": "Product bar code."
          },
          "allow_sales_order": {
            "type": "boolean",
            "description": "Indicates whether the product is allowed on sales orders and invoicing.",
            "default": true
          },
          "free_stock_quantity": {
            "type": "number",
            "description": "The quantity of free stock available.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "product_group_id": {
            "type": "integer",
            "description": "Product group record Id.",
            "format": "int64"
          },
          "tax_code_id": {
            "type": "integer",
            "description": "Tax code record Id.",
            "format": "int64"
          },
          "product_status_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The product status type."
          },
          "fulfilment_method_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The fulfilment method type of the product."
          },
          "fulfilment_sequence_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The fulfilment sequence type of the product."
          },
          "inactivation_date": {
            "type": "string",
            "description": "If the product was made inactive, the date on which the product was made inactive.",
            "format": "date-time"
          },
          "manufacturer": {
            "maxLength": 40,
            "type": "string",
            "description": "The product manufacturer."
          },
          "part_number": {
            "maxLength": 60,
            "type": "string",
            "description": "The product part number."
          },
          "label_printing_option_type": {
            "maxLength": 60,
            "type": "string",
            "description": "The label printing option type. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "traceable_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The traceable type of the product. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "sale_from_single_batch": {
            "type": "boolean",
            "description": "Indicates whether the product is sold from a single batch. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "allow_duplicate_numbers": {
            "type": "boolean",
            "description": "Indicates whether the product allows duplicate numbers. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "uses_alternative_ref": {
            "type": "boolean",
            "description": "Indicates whether the product uses alternative references. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "uses_sell_by_date": {
            "type": "boolean",
            "description": "Indicates whether the product uses sell by dates. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "uses_use_by_date": {
            "type": "boolean",
            "description": "Indicates whether the product uses use by dates. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "shelf_life": {
            "type": "integer",
            "description": "The shelf life of the product. (Sage 200 Professional only).",
            "format": "int32",
            "x-sage-professional-only": true
          },
          "shelf_life_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The shelf life type of the product. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "record_nos_on_goods_received": {
            "type": "boolean",
            "description": "Indicates whether the product is assigned batch/serial numbers when received. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "include_nos_on_count_sheets": {
            "type": "boolean",
            "description": "Indicates whether the products batch/serial numbers are displayed on stocktake sheets. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "auto_generate_option_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The auto generate option of the product. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "auto_generate_separator_id": {
            "type": "integer",
            "description": "Auto generate separator record Id. (Sage 200 Professional only).",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "auto_generate_prefix": {
            "maxLength": 20,
            "type": "string",
            "description": "Products auto generated prefix. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "auto_generate_next_number": {
            "type": "integer",
            "description": "Products next auto generated number. (Sage 200 Professional only).",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "auto_generate_padding": {
            "type": "integer",
            "description": "Products auto generated padding. (Sage 200 Professional only).",
            "format": "int32",
            "x-sage-professional-only": true
          },
          "stocktake_cycle_period": {
            "type": "integer",
            "description": "The period of time in days between each stocktake of the product.",
            "format": "int16"
          },
          "standard_cost": {
            "type": "number",
            "description": "The standard cost of the product, if the product group uses the Standard costing method.",
            "format": "decimal 5dp"
          },
          "average_buying_price": {
            "type": "number",
            "description": "The average buying price of the product, if the product group uses either the FIFO or Average costing method.",
            "format": "decimal 5dp"
          },
          "default_picking_list_comment": {
            "maxLength": 160,
            "type": "string",
            "description": "The default comment to print on picking lists for the product."
          },
          "default_despatch_note_comment": {
            "maxLength": 160,
            "type": "string",
            "description": "The default comment to print on despatch notes for the product."
          },
          "commodity_code": {
            "maxLength": 10,
            "type": "string",
            "description": "The product commodity code as defined by HM Revenue and Customs, or Irish Revenue Commissioners, as applicable."
          },
          "country_of_origin_id": {
            "type": "integer",
            "description": "The product country of origin. Country code record Id.",
            "format": "int64"
          },
          "weight": {
            "type": "number",
            "description": "The product weight per stock unit, in kilograms.",
            "format": "decimal 4dp"
          },
          "suppress_mass_on_declaration": {
            "type": "boolean",
            "description": "Whether to suppress the net weight on Intrastat declaration."
          },
          "is_weee_item": {
            "type": "boolean",
            "description": "Whether the product is subject to Waste Electrical and Electronic Equipment directives."
          },
          "use_supplementary_units": {
            "type": "boolean",
            "description": "Whether the product uses supplementary units."
          },
          "supplementary_unit_conversion_ratio": {
            "type": "number",
            "description": "The ratio to convert to supplementary unit.",
            "format": "decimal 9dp"
          },
          "use_reverse_charge_vat_rules": {
            "type": "boolean",
            "description": "Whether the product is subject to domestic reverse charge VAT rules."
          },
          "landed_costs_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The landed costs type of the product."
          },
          "landed_costs_percentage": {
            "type": "number",
            "description": "The percentage of the product's cost which is landed costs (if the landed costs type is Percentage Based).",
            "format": "decimal 2dp"
          },
          "landed_costs_per_item": {
            "type": "number",
            "description": "The amount of the product's cost which is landed costs (if the landed costs type is Value Based).",
            "format": "decimal 2dp"
          },
          "bom_item_type": {
            "maxLength": 30,
            "type": "string",
            "description": "The BOM item type of the product."
          },
          "stock_nominal_code_id": {
            "type": "integer",
            "description": "Stock nominal code record Id. Use custom expand 'nominal_codes' to include in the response.",
            "format": "int64"
          },
          "revenue_nominal_code_id": {
            "type": "integer",
            "description": "Revenue nominal code record Id. Use custom expand 'nominal_codes' to include in the response.",
            "format": "int64"
          },
          "accrual_nominal_code_id": {
            "type": "integer",
            "description": "Accrual nominal code record Id. (Sage 200 Professional only). Use custom expand 'nominal_codes' to include in the response.",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "issue_nominal_code_id": {
            "type": "integer",
            "description": "Issue nominal code record Id. (Sage 200 Professional only). Use custom expand 'nominal_codes' to include in the response.",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "base_unit_id": {
            "type": "integer",
            "description": "Base unit record Id. Use custom expand 'units' or 'base_unit' to include in the response.",
            "format": "int64"
          },
          "stock_unit_id": {
            "type": "integer",
            "description": "Stock unit record Id. Use custom expand 'units' or 'stock_unit' to include in the response.",
            "format": "int64"
          },
          "has_alternative_products": {
            "type": "boolean",
            "description": "Whether the product has alternative products. Use custom expand sop_status to include in the response and/or expand alternative_products to have the details of all the alternative products in the response.",
            "readOnly": true
          },
          "has_cross_sell_products": {
            "type": "boolean",
            "description": "Whether the product has cross sell products. Use custom expand sop_status to include in the response and/or expand cross_sell_products to have the details of all the cross sell products in the response.",
            "readOnly": true
          },
          "has_preferred_supplier": {
            "type": "boolean",
            "description": "Whether the product has a preferred supplier. Use custom expand sop_status to include in the response and/or expand suppliers to have the details of all the product suppliers in the response.",
            "readOnly": true
          },
          "analysis_code_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 1."
          },
          "analysis_code_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 2."
          },
          "analysis_code_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 3."
          },
          "analysis_code_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 4."
          },
          "analysis_code_5": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 5."
          },
          "analysis_code_6": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 6."
          },
          "analysis_code_7": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 7."
          },
          "analysis_code_8": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 8."
          },
          "analysis_code_9": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 9."
          },
          "analysis_code_10": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 10."
          },
          "analysis_code_11": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 11."
          },
          "analysis_code_12": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 12."
          },
          "analysis_code_13": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 13."
          },
          "analysis_code_14": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 14."
          },
          "analysis_code_15": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 15."
          },
          "analysis_code_16": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 16."
          },
          "analysis_code_17": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 17."
          },
          "analysis_code_18": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 18."
          },
          "analysis_code_19": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 19."
          },
          "analysis_code_20": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 20."
          },
          "spare_text_1": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 1."
          },
          "spare_text_2": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 2."
          },
          "spare_text_3": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 3."
          },
          "spare_text_4": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 4."
          },
          "spare_text_5": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 5."
          },
          "spare_text_6": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 6."
          },
          "spare_text_7": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 7."
          },
          "spare_text_8": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 8."
          },
          "spare_text_9": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 9."
          },
          "spare_text_10": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 10."
          },
          "spare_number_1": {
            "type": "number",
            "description": "Spare number 1.",
            "format": "decimal 5dp"
          },
          "spare_number_2": {
            "type": "number",
            "description": "Spare number 2.",
            "format": "decimal 5dp"
          },
          "spare_number_3": {
            "type": "number",
            "description": "Spare number 3.",
            "format": "decimal 5dp"
          },
          "spare_number_4": {
            "type": "number",
            "description": "Spare number 4.",
            "format": "decimal 5dp"
          },
          "spare_number_5": {
            "type": "number",
            "description": "Spare number 5.",
            "format": "decimal 5dp"
          },
          "spare_number_6": {
            "type": "number",
            "description": "Spare number 6.",
            "format": "decimal 5dp"
          },
          "spare_number_7": {
            "type": "number",
            "description": "Spare number 7.",
            "format": "decimal 5dp"
          },
          "spare_number_8": {
            "type": "number",
            "description": "Spare number 8.",
            "format": "decimal 5dp"
          },
          "spare_number_9": {
            "type": "number",
            "description": "Spare number 9.",
            "format": "decimal 5dp"
          },
          "spare_number_10": {
            "type": "number",
            "description": "Spare number 10.",
            "format": "decimal 5dp"
          },
          "spare_date_1": {
            "type": "string",
            "description": "Spare date 1 (UTC).",
            "format": "date-time"
          },
          "spare_date_2": {
            "type": "string",
            "description": "Spare date 2 (UTC).",
            "format": "date-time"
          },
          "spare_date_3": {
            "type": "string",
            "description": "Spare date 3 (UTC).",
            "format": "date-time"
          },
          "spare_date_4": {
            "type": "string",
            "description": "Spare date 4 (UTC).",
            "format": "date-time"
          },
          "spare_date_5": {
            "type": "string",
            "description": "Spare date 5 (UTC).",
            "format": "date-time"
          },
          "spare_bool_1": {
            "type": "boolean",
            "description": "Spare bool 1.",
            "default": false
          },
          "spare_bool_2": {
            "type": "boolean",
            "description": "Spare bool 2.",
            "default": false
          },
          "spare_bool_3": {
            "type": "boolean",
            "description": "Spare bool 3.",
            "default": false
          },
          "spare_bool_4": {
            "type": "boolean",
            "description": "Spare bool 4.",
            "default": false
          },
          "spare_bool_5": {
            "type": "boolean",
            "description": "Spare bool 5.",
            "default": false
          },
          "accrual_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products accrual nominal code. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "auto_generate_separator": {
            "type": "object",
            "properties": {},
            "description": "The products auto generate separator. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "base_unit": {
            "type": "object",
            "properties": {},
            "description": "The products base unit of measure.",
            "readOnly": true
          },
          "bom_settings": {
            "$ref": "#/components/schemas/bom_settings"
          },
          "country_of_origin": {
            "type": "object",
            "properties": {},
            "description": "The product country of origin.",
            "readOnly": true
          },
          "holding": {
            "type": "object",
            "properties": {
              "average_buying_price": {
                "type": "number",
                "description": "The average buying price of the stock item.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_on_order_for_direct_delivery": {
                "type": "number",
                "description": "The quantity on order for direct delivery of the stock item.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_in_stock": {
                "type": "number",
                "description": "Quantity in stock of the stock item.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_allocated": {
                "type": "number",
                "description": "Quantity allocated of the stock item.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_on_order": {
                "type": "number",
                "description": "The quantity on POP order of the stock item.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_sold_this_period": {
                "type": "number",
                "description": "Quantity of the stock item sold this period.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_bought_this_period": {
                "type": "number",
                "description": "Quantity of the stock item bought this period.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_sold_last_period": {
                "type": "number",
                "description": "Quantity of the stock item sold last period.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "quantity_bought_last_period": {
                "type": "number",
                "description": "Quantity of the stock item bought last period.",
                "format": "decimal 5dp",
                "readOnly": true
              },
              "buying_prices": {
                "type": "array",
                "description": "A collection of confirmed and unconfirmed stock buying prices",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/buying_price"
                }
              }
            },
            "description": "Use the stock item holding object to return stock quantities and values across each WarehouseItem and BinItem. Note the WarehouseItemHolding and BinItemHolding objects return similar information.",
            "readOnly": true
          },
          "issue_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products issue nominal code. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "product_group": {
            "type": "object",
            "properties": {},
            "description": "The products product group.",
            "readOnly": true
          },
          "revenue_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products revenue nominal code.",
            "readOnly": true
          },
          "status": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Product record Id.",
                "format": "int64",
                "readOnly": true
              },
              "has_negative_stock_quantities": {
                "type": "boolean",
                "description": "True if the product has negative stock quantities, else False.",
                "readOnly": true
              },
              "has_movement_balances": {
                "type": "boolean",
                "description": "True if the product has a movement balance, else False.",
                "readOnly": true
              },
              "has_active_pop_orders": {
                "type": "boolean",
                "description": "True if the product has active POP orders, else False.",
                "readOnly": true
              },
              "has_sop_or_pop_documents": {
                "type": "boolean",
                "description": "True if the product has either SOP or POP documents, else False.",
                "readOnly": true
              },
              "has_active_sop_or_pop_documents": {
                "type": "boolean",
                "description": "True if the product has active either SOP or POP documents, else False.",
                "readOnly": true
              },
              "has_traceable_items": {
                "type": "boolean",
                "description": "True if the product has traceable items, else False.",
                "readOnly": true
              },
              "has_unassigned_traceable_items": {
                "type": "boolean",
                "description": "True if the product has unassigned traceable items, else False.",
                "readOnly": true
              },
              "has_traceable_sop_allocations": {
                "type": "boolean",
                "description": "True if the product has sales order traceable allocations, else False.",
                "readOnly": true
              },
              "is_in_use_by_bom": {
                "type": "boolean",
                "description": "True if the product is being used by bill of materials, else False.",
                "readOnly": true
              },
              "date_time_created": {
                "type": "string",
                "description": "The date and time this entity was created (UTC).",
                "format": "date-time",
                "readOnly": true
              },
              "date_time_updated": {
                "type": "string",
                "description": "The date and time this entity was last updated (UTC).",
                "format": "date-time",
                "readOnly": true
              }
            },
            "description": "The products status. Note: This could take a long time to complete the request.",
            "readOnly": true
          },
          "stock_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products stock nominal code.",
            "readOnly": true
          },
          "stock_unit": {
            "type": "object",
            "properties": {},
            "description": "The products stock unit of measure.",
            "readOnly": true
          },
          "tax_code": {
            "type": "object",
            "properties": {},
            "description": "The products tax code.",
            "readOnly": true
          },
          "alternative_products": {
            "type": "array",
            "description": "Alternative products are suitable products that can be offered when a requested product is unavailable. An alternative product can be the preferred alternative for a product. When stock is issued for a sales order, if the product is unavailable, the preferred alternative can be chosen, if stock is available.",
            "items": {
              "$ref": "#/components/schemas/alternative_product"
            }
          },
          "cross_sell_products": {
            "type": "array",
            "description": "Cross sell products are complimentary products which are often sold together with another product. For example, if you sell a printer, you might want to show print cartridges or cables for that printer. Cross sell products can help speed up entering a full sales order.",
            "items": {
              "$ref": "#/components/schemas/cross_sell_product"
            }
          },
          "memos": {
            "type": "array",
            "description": "Memos are sections of text that can be used to make comments about a product.<br/><br/>Multiple memos can be added to each product. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
            "items": {
              "$ref": "#/components/schemas/product_memo"
            }
          },
          "search_category_values": {
            "type": "array",
            "description": "Search categories are used to help you search for stock items without knowing the item's stock code. <br/><br/>A search category consists of:<ul><li>A category. This is the type such as colour, size or voltage.</li><li>A value. This is the specifics of the category such as green, red and blue for the category colour.</li></ul>Search categories are inherited from the product group.",
            "items": {
              "$ref": "#/components/schemas/product_search_category_value"
            }
          },
          "suppliers": {
            "type": "array",
            "description": "Product suppliers are used to record suppliers of products. The supplier details are used when creating purchase orders. A supplier can be the preferred supplier for a product. The preferred supplier details are suggested when entering a purchase order for the product.",
            "items": {
              "$ref": "#/components/schemas/product_supplier"
            }
          },
          "units": {
            "type": "array",
            "description": "The products units of measure.",
            "items": {
              "$ref": "#/components/schemas/product_unit"
            }
          },
          "warehouse_holdings": {
            "type": "array",
            "description": "If stock setting UseMultipleLocations is true, you must specify warehouse holding(s) when creating products. <br /><br />If stock setting UseMultipleLocations is false, then new product will be automatically linked to the default (home) warehouse.",
            "items": {
              "$ref": "#/components/schemas/warehouse_holding"
            }
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Products are used to track stock within Sage 200. This is not just for physical items, but also for items that are ordered direct from suppliers, services, and time or labour that can be included on customer invoices.<P>Each stock item has default settings that are used each time the item is bought or sold. Some of these are inherited from the product group and some are set on each item.</P><p>Note: When creating products via the API, each product is assigned to a warehouse. If the stock setting UseMultipleLocations is true then multiple warehouse holdings can be specified. You cannot delete the last warehouse holding associated with a product.</p>"
      },
      "product_supplier": {
        "required": [
          "product_id",
          "supplier_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product supplier record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64",
            "readOnly": true
          },
          "supplier_id": {
            "type": "integer",
            "description": "Supplier record Id.",
            "format": "int64"
          },
          "supplier_stock_code": {
            "maxLength": 60,
            "type": "string",
            "description": "The supplier stock code."
          },
          "lead_time": {
            "type": "integer",
            "description": "Lead time in lead time units for the product from the supplier.",
            "format": "int16"
          },
          "lead_time_unit": {
            "maxLength": 20,
            "type": "string",
            "description": "The lead time unit of the product."
          },
          "usual_order_quantity": {
            "type": "number",
            "description": "The usual order quantity for the product from the supplier.",
            "format": "decimal 5dp"
          },
          "minimum_order_quantity": {
            "type": "number",
            "description": "The minimum order quantity for the product from the supplier.",
            "format": "decimal 5dp"
          },
          "list_price": {
            "type": "number",
            "description": "The supplier's price for the product.",
            "format": "decimal 5dp"
          },
          "date_list_price_changed": {
            "type": "string",
            "description": "The date the list price changed.",
            "format": "date-time",
            "readOnly": true
          },
          "list_price_expiry_date": {
            "type": "string",
            "description": "The date the list price expires.",
            "format": "date-time"
          },
          "default_pricing_source_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The default pricing source type of the product."
          },
          "landed_costs_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The landed costs type of the product when ordering from the supplier."
          },
          "landed_costs_percentage": {
            "type": "number",
            "description": "The percentage of the product's cost which is landed costs (if the landed costs type is Percentage Based).",
            "format": "decimal 2dp"
          },
          "landed_costs_per_item": {
            "type": "number",
            "description": "The amount of the product's cost which is landed costs (if the landed costs type is Value Based).",
            "format": "decimal 2dp"
          },
          "order_quantity_year_to_date": {
            "type": "number",
            "description": "The total quantity of product ordered from the supplier in the year to date.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "order_value_year_to_date": {
            "type": "number",
            "description": "The total value of product ordered from the supplier in the year to date.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "last_order_date": {
            "type": "string",
            "description": "The date of the last order for the product from the supplier.",
            "format": "date-time",
            "readOnly": true
          },
          "last_order_quantity": {
            "type": "number",
            "description": "The quantity of the last order for the product from the supplier.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "last_buying_price": {
            "type": "number",
            "description": "The last price paid for the product from the supplier.",
            "format": "decimal 5dp"
          },
          "quantity_on_order": {
            "type": "number",
            "description": "The quantity of the product currently on order from the supplier.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "is_preferred": {
            "type": "boolean",
            "description": "Whether the supplier is the preferred supplier for the product."
          },
          "country_of_origin_id": {
            "type": "integer",
            "description": "If you produce Intrastat reports, the product country of origin record Id from the supplier.",
            "format": "int64"
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing product, whether to delete this supplier from the collection of product suppliers."
          },
          "country_of_origin": {
            "type": "object",
            "properties": {},
            "description": "If you produce Intrastat reports, the product country of origin from the supplier.",
            "readOnly": true
          },
          "product": {
            "type": "object",
            "properties": {},
            "description": "The product.",
            "readOnly": true
          },
          "supplier": {
            "type": "object",
            "properties": {},
            "description": "The supplier.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Product suppliers are used to record suppliers of products. The supplier details are used when creating purchase orders. A supplier can be the preferred supplier for a product. The preferred supplier details are suggested when entering a purchase order for the product."
      },
      "alternative_product": {
        "required": [
          "alternative_product_id",
          "product_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Alternative product record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "alternative_product_id": {
            "type": "integer",
            "description": "Alternative product record Id.",
            "format": "int64"
          },
          "is_preferred": {
            "type": "boolean",
            "description": "Whether the alternative product is the preferred alternative for the product."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing product, whether to delete this alternative product from the collection of product alternative products."
          },
          "alternative_product": {
            "type": "object",
            "properties": {},
            "description": "The alternative product.",
            "readOnly": true
          },
          "product": {
            "type": "object",
            "properties": {},
            "description": "The product.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Alternative products are suitable products that can be offered when a requested product is unavailable. An alternative product can be the preferred alternative for a product. When stock is issued for a sales order, if the product is unavailable, the preferred alternative can be chosen, if stock is available."
      },
      "cross_sell_product": {
        "required": [
          "cross_sell_product_id",
          "product_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Cross sell product record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "cross_sell_product_id": {
            "type": "integer",
            "description": "Cross sell product record Id.",
            "format": "int64"
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing product, whether to delete this cross sell product from the collection of product cross sell products."
          },
          "cross_sell_product": {
            "type": "object",
            "properties": {},
            "description": "The cross sell product.",
            "readOnly": true
          },
          "product": {
            "type": "object",
            "properties": {},
            "description": "The product.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Cross sell products are complimentary products which are often sold together with another product. For example, if you sell a printer, you might want to show print cartridges or cables for that printer. Cross sell products can help speed up entering a full sales order."
      },
      "product_memo": {
        "required": [
          "note",
          "product_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product memo record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "is_active": {
            "type": "boolean",
            "description": "True if memo status is active, false if it is inactive."
          },
          "note": {
            "maxLength": 1000,
            "type": "string",
            "description": "The memo text."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing product, whether to delete this memo from the collection of product memos."
          },
          "created_by": {
            "maxLength": 20,
            "type": "string",
            "description": "The user that created the memo.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Memos are sections of text that can be used to make comments about a product.<br/><br/>Multiple memos can be added to each product. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them."
      },
      "product_search_category_value": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product search category record Id.",
            "format": "int64"
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "search_category_id": {
            "type": "integer",
            "description": "The search category record Id.",
            "format": "int64"
          },
          "search_category_name": {
            "maxLength": 40,
            "type": "string",
            "description": "The search category name."
          },
          "search_value_id": {
            "type": "integer",
            "description": "The search value record Id.",
            "format": "int64"
          },
          "search_value_name": {
            "maxLength": 40,
            "type": "string",
            "description": "The search value name."
          },
          "search_value": {
            "type": "object",
            "properties": {},
            "description": "The search value.",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing product, whether to delete this search category."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Search categories are used to help you search for stock items without knowing the item's stock code. <br/><br/>A search category consists of:<ul><li>A category. This is the type such as colour, size or voltage.</li><li>A value. This is the specifics of the category such as green, red and blue for the category colour.</li></ul>Search categories are inherited from the product group."
      },
      "product_unit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unit record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "The associated product record Id.",
            "format": "int64"
          },
          "unit_id": {
            "type": "integer",
            "description": "The unit record Id.",
            "format": "int64"
          },
          "unit_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The unit type of the unit of measure.",
            "readOnly": true
          },
          "multiple_of_base_unit": {
            "type": "number",
            "description": "The multiple of base unit.",
            "format": "decimal 9dp"
          },
          "unit_precision": {
            "type": "number",
            "description": "The precision of the unit.",
            "format": "decimal 5dp"
          },
          "use_own_price": {
            "type": "boolean",
            "description": "Whether the product group unit uses specific pricing."
          },
          "has_sop_or_pop_documents": {
            "type": "boolean",
            "description": "True if the product has either SOP or POP documents, else False.",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing product, whether to delete this unit of measure from the collection of product unit of measures."
          },
          "unit": {
            "type": "object",
            "properties": {},
            "description": "The unit of measure.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The units of measure in which products are stored as well as those used when buying or selling products."
      },
      "product_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code."
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name."
          },
          "status_type_id": {
            "type": "integer",
            "description": "The status of the product.",
            "format": "int64"
          },
          "status_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the product."
          },
          "bom_item_type_id": {
            "type": "integer",
            "description": "The BOM item type.",
            "format": "int64"
          },
          "product_group_product_type_id": {
            "type": "integer",
            "description": "The product type of the product group.",
            "format": "int64"
          },
          "product_group_product_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The product type of the product group."
          },
          "product_group_code": {
            "maxLength": 20,
            "type": "string",
            "description": "The code of the product group."
          },
          "product_group_description": {
            "maxLength": 50,
            "type": "string",
            "description": "The description of the product group."
          },
          "product_group_do_items_use_markup": {
            "type": "boolean",
            "description": "Indicates whether the product is in a product group that uses markup pricing."
          },
          "product_group_costing_method_type_id": {
            "type": "integer",
            "description": "The costing method of the product group.",
            "format": "int64"
          },
          "product_group_costing_method_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The costing method of the product group."
          },
          "traceable_type_id": {
            "type": "integer",
            "description": "The traceable type of the product.",
            "format": "int64"
          },
          "traceable_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The traceable type of the product."
          },
          "inactive_date": {
            "type": "string",
            "description": "The date the product was inactive.",
            "format": "date-time"
          },
          "stock_multiple_of_base_unit": {
            "type": "number",
            "description": "The multiple of base unit.",
            "format": "decimal 9dp"
          },
          "stock_unit_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The stock unit name."
          },
          "base_unit_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The base unit name."
          },
          "manufacturer": {
            "maxLength": 40,
            "type": "string",
            "description": "The manufacturer of the product group."
          },
          "part_number": {
            "maxLength": 60,
            "type": "string",
            "description": "The part number of the product group."
          },
          "label_printing_option_type_id": {
            "type": "integer",
            "description": "The label printing option for the product.",
            "format": "int64"
          },
          "label_printing_option_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The label printing option for the product."
          },
          "allow_sales_order": {
            "type": "boolean",
            "description": "Indicates whether the product is allowed on sales orders and invoicing."
          },
          "average_buying_price": {
            "type": "number",
            "description": "The average buying price of the product.",
            "format": "decimal 5dp"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "Product description."
          },
          "use_description_on_docs": {
            "type": "boolean",
            "description": "Indicates whether the product uses the description on orders and invoices."
          },
          "sale_from_single_batch": {
            "type": "boolean",
            "description": "Indicates whether the product is sold from a single batch."
          },
          "allow_duplicate_numbers": {
            "type": "boolean",
            "description": "Indicates whether the product allows duplicate numbers."
          },
          "uses_sell_by_date": {
            "type": "boolean",
            "description": "Indicates whether the product uses sell by dates."
          },
          "uses_use_by_date": {
            "type": "boolean",
            "description": "Indicates whether the product uses use by dates."
          },
          "record_nos_on_goods_received": {
            "type": "boolean",
            "description": "Indicates whether this product is assigned batch/serial numbers when received."
          },
          "auto_generate_option_type_id": {
            "type": "integer",
            "description": "The auto generate option of the product.",
            "format": "int64"
          },
          "auto_generate_option_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The auto generate option of the product."
          },
          "auto_generate_prefix": {
            "maxLength": 20,
            "type": "string",
            "description": "The auto generated prefix for the product."
          },
          "auto_generate_next_number": {
            "type": "integer",
            "description": "The next auto generated number for the product.",
            "format": "int64"
          },
          "commodity_code": {
            "maxLength": 10,
            "type": "string",
            "description": "The commodity code."
          },
          "stock_take_cycle_period": {
            "type": "integer",
            "description": "The stock take cycle period in days.",
            "format": "int16"
          },
          "suppress_net_mass": {
            "type": "boolean",
            "description": "Indicates whether the product suppresses mass on declaration."
          },
          "weight": {
            "type": "number",
            "description": "The weight of the product.",
            "format": "decimal 4dp"
          },
          "std_cost_variance_last_reset": {
            "type": "string",
            "description": "The date the product cost variance was last reset.",
            "format": "date-time"
          },
          "uses_alternative_ref": {
            "type": "boolean",
            "description": "Indicates whether the product uses alternative references."
          },
          "selling_price": {
            "type": "number",
            "description": "The selling price of the product, taking into account costing method and markup.",
            "format": "decimal 5dp"
          },
          "standard_cost": {
            "type": "number",
            "description": "The standard cost of the product.",
            "format": "decimal 5dp"
          },
          "sop_item_price": {
            "type": "number",
            "description": "The SOP item price of the product. Used by sales order items.",
            "format": "decimal 5dp"
          },
          "last_archived_up_to": {
            "type": "string",
            "description": "The date the product history was last archived up to.",
            "format": "date-time"
          },
          "last_trace_archived_up_to": {
            "type": "string",
            "description": "The date the traceable product history was last archived up to.",
            "format": "date-time"
          },
          "fulfilment_method_type_id": {
            "type": "integer",
            "description": "The fulfilment method selected for the product.",
            "format": "int64"
          },
          "fulfilment_method_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The fulfilment method selected for the product."
          },
          "fulfilment_sequence_type_id": {
            "type": "integer",
            "description": "The fulfilment sequence type of the product.",
            "format": "int64"
          },
          "fulfilment_sequence_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The fulfilment sequence type of the product."
          },
          "shelf_life": {
            "type": "integer",
            "description": "The shelf life of the product.",
            "format": "int32"
          },
          "shelf_life_type_id": {
            "type": "integer",
            "description": "The shelf life type of the product.",
            "format": "int64"
          },
          "shelf_life_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The shelf life type of the product."
          },
          "this_is_the_standard_band": {
            "type": "boolean",
            "description": "Indicates whether the linked price band is the standard price band."
          },
          "landed_costs_value": {
            "type": "number",
            "description": "The landed costs value of the product.",
            "format": "decimal 5dp"
          },
          "default_despatch_note_comment": {
            "maxLength": 160,
            "type": "string",
            "description": "The default despatch note comment for the product."
          },
          "default_picking_list_comment": {
            "maxLength": 160,
            "type": "string",
            "description": "The default picking list note comment for the product."
          },
          "price": {
            "type": "number",
            "description": "The product's standard price.",
            "format": "decimal 5dp"
          },
          "free_stock_quantity": {
            "type": "number",
            "description": "The quantity of free stock of the product.",
            "format": "decimal 5dp"
          },
          "quantity_reserved": {
            "type": "number",
            "description": "Quantity reserved.",
            "format": "decimal 5dp"
          },
          "confirmed_quantity_in_stock": {
            "type": "number",
            "description": "Confirmed stock quantity.",
            "format": "decimal 5dp"
          },
          "unconfirmed_quantity_in_stock": {
            "type": "number",
            "description": "Unconfirmed stock quantity.",
            "format": "decimal 5dp"
          },
          "actual_quantity": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity.",
            "format": "decimal 5dp"
          },
          "quantity_allocated_stock": {
            "type": "number",
            "description": "Allocated stock quantity.",
            "format": "decimal 5dp"
          },
          "quantity_allocated_sop": {
            "type": "number",
            "description": "Allocated sales order quantity.",
            "format": "decimal 5dp"
          },
          "quantity_allocated_bom": {
            "type": "number",
            "description": "Allocated bill of materials quantity.",
            "format": "decimal 5dp"
          },
          "quantity_on_pop_order": {
            "type": "number",
            "description": "The quantity on order in POP.",
            "format": "decimal 5dp"
          },
          "date_of_last_sale": {
            "type": "string",
            "description": "The date the stock item was last sold.",
            "format": "date-time"
          },
          "date_of_last_stock_count": {
            "type": "string",
            "description": "The date of the last stock count.",
            "format": "date-time"
          },
          "reorder_level": {
            "type": "number",
            "description": "Reorder level.",
            "format": "decimal 5dp"
          },
          "analysis_code_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 1."
          },
          "analysis_code_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 2."
          },
          "analysis_code_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 3."
          },
          "analysis_code_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 4."
          },
          "analysis_code_5": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 5."
          },
          "analysis_code_6": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 6."
          },
          "analysis_code_7": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 7."
          },
          "analysis_code_8": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 8."
          },
          "analysis_code_9": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 9."
          },
          "analysis_code_10": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 10."
          },
          "analysis_code_11": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 11."
          },
          "analysis_code_12": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 12."
          },
          "analysis_code_13": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 13."
          },
          "analysis_code_14": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 14."
          },
          "analysis_code_15": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 15."
          },
          "analysis_code_16": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 16."
          },
          "analysis_code_17": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 17."
          },
          "analysis_code_18": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 18."
          },
          "analysis_code_19": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 19."
          },
          "analysis_code_20": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 20."
          }
        },
        "description": "When making larger requests for product information, the Product Views resource can be a faster alternative to the 'Product' resource. The Product Views resource also returns a wider breadth of information than the Product resource. Using Product Views could therefore reduce the quantity of API requests needed to return the same information from multiple API resources."
      },
      "unit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unit record Id.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "Unit name."
          },
          "multiple_of_base_unit": {
            "type": "number",
            "description": "The multiple of base unit.",
            "format": "decimal 9dp"
          },
          "each_value": {
            "type": "boolean",
            "description": "Whether this unit is the 'Each' value."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The units of measure in which products are stored as well as those used when buying or selling products."
      },
      "product_status_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Product status types are used to identify when a product can have a stock movement recorded against it within the application. Products can be 'Active' or 'Inactive'.<P>The API endpoint returns details of the product status types that can be used.</P>"
      },
      "product_group_search_category_value": {
        "type": "object",
        "properties": {
          "prod_group_search_val_id": {
            "type": "integer",
            "description": "Product group search value record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_group_id": {
            "type": "integer",
            "description": "Product group record Id.",
            "format": "int64",
            "readOnly": true
          },
          "search_category_id": {
            "type": "integer",
            "description": "Search category record Id.",
            "format": "int64",
            "readOnly": true
          },
          "search_category_name": {
            "maxLength": 40,
            "type": "string",
            "description": "Search category name.",
            "readOnly": true
          },
          "search_value_id": {
            "type": "integer",
            "description": "Search value record Id.",
            "format": "int64",
            "readOnly": true
          },
          "search_value_name": {
            "maxLength": 40,
            "type": "string",
            "description": "Search value name.",
            "readOnly": true
          }
        },
        "description": "This API endpoint returns a list of the allowed values for a product group search category."
      },
      "bom_item_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Bill of materials item types are used to identify how this product will be used in a bill of materials within the application. Products can be 'Component', 'Subassembly', 'Phantom' or 'Built/Bought'.<P>The API endpoint returns details of the bill of materials item types that can be used.</P>"
      },
      "bom_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Record Id.",
            "format": "int64",
            "readOnly": true
          },
          "order_min_quantity": {
            "type": "number",
            "description": "Minimum order quantity.",
            "format": "decimal 5dp"
          },
          "built_bought_default_make": {
            "type": "boolean",
            "description": "Reflects BOM Details Built/Bought selection. True if Default Built. False if Default Bought."
          },
          "scrap_percent": {
            "type": "number",
            "description": "Scrap percentage figure to apply when processing components in Manufacturing.",
            "format": "decimal 2dp"
          },
          "bulk_issue": {
            "type": "boolean",
            "description": "Indicates whether to handle stock movements manually for the component."
          },
          "cost_heading_id": {
            "type": "integer",
            "description": "Cost heading record Id associated with the product.",
            "format": "int64"
          },
          "cost_heading": {
            "type": "object",
            "properties": {},
            "description": "The products cost heading.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "A group of BOM related settings for a product."
      },
      "traceable_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Traceable types are used to identify the different traceable options of the product that exist within the application. Products can be 'Non-Traceable', 'Serial Numbered' or 'Batch Numbered'.<P>The API endpoint returns details of the traceable types that can be used.</P>"
      },
      "product_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Product types are used to identify the different types of product that exist within the application. Products can be 'Stock', 'Miscellaneous' or 'Service/Labour'.<P>The API endpoint returns details of the product types that can be used.</P>"
      },
      "auto_generate_option_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Auto generate option types are used to auto generate the batch or serial numbers associated with the product that exist within the application. Products can be 'No automatic number generation', 'Use sequence numbers', 'Use date and sequence numbers' or 'Use order number and sequence number'.<P>The API endpoint returns details of the auto generate option types that can be used.</P>"
      },
      "fulfilment_method_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Fulfilment methods types are the method options for fulfilling stock on sales orders. It determines how stock items are allocated to sales orders. The fulfilment methods are 'From Stock', 'Supplier Via Stock' and 'Direct to Customer'.<P>The API endpoint returns details of the fulfilment method types that can be used.</P>"
      },
      "fulfilment_sequence_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Fulfilment sequence types are the sequence options for the fulfilment methods used for product allocation which determines how products are allocated to sales orders within the application. Products can sequenced by 'Bin Priority', 'Smallest Quantity First', 'Largest Quantity First', 'Oldest Sell By Date', 'Oldest Use By Date' or 'FIFO'.<P>The API endpoint returns details of the fulfilment sequence types that can be used.</P>"
      },
      "label_printing_option_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 60,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Label printing option types used to determine how to print order lablels. The label printing option types are 'Label not required', 'Label required per item' and 'Label required per batch'.<P>The API endpoint returns details of the label printing option types that can be used.</P>"
      },
      "auto_generate_separator": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto generate separator record Id.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "The name of the auto generate separator.",
            "readOnly": true
          },
          "separator_character": {
            "maxLength": 1,
            "type": "string",
            "description": "The separator character of the auto generate separator.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Auto generate separators are used to auto generate the batch or serial numbers associated with the product that exist within the application. Auto generate separators can be 'None', 'Space', 'Colon', 'Forward Slash', 'Backward Slash', 'Dot' or 'Hyphen'.<P>The API endpoint returns details of the auto generate option types that can be used.</P>"
      },
      "product_transaction_group_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Product transaction group types are used to group the different (secondary) movement types of the product within the application. Product transaction group types can be 'Allocation' ,'Goods Out' ,'Goods In' ,'On POP Order'.<P>The API endpoint returns details of the product transaction group types that can be used.</P>"
      },
      "product_transaction_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product type Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 25,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 25,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Product transaction types are used to identify the different types of product movement transactions. These transactions are created when products are moved in and out of stock and, can be from various sources such as purchase orders or sales orders."
      },
      "product_transaction_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product transaction Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_group_id": {
            "type": "integer",
            "description": "Product group record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code.",
            "readOnly": true
          },
          "product_group_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Product group code.",
            "readOnly": true
          },
          "transaction_group_id": {
            "type": "integer",
            "description": "The transaction group Id.",
            "format": "int64",
            "readOnly": true
          },
          "transaction_type_id": {
            "type": "integer",
            "description": "The transaction type Id.",
            "format": "int64",
            "readOnly": true
          },
          "transaction_type": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value of the transaction_type_id that describes the transaction that created the product movement.",
            "readOnly": true
          },
          "transaction_date": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "source_area_type_id": {
            "type": "integer",
            "description": "The source area type Id.",
            "format": "int64",
            "readOnly": true
          },
          "source_area_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The code of the source of the transaction.",
            "readOnly": true
          },
          "source_area_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The name of the source of the transaction.",
            "readOnly": true
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "This can be an optional reference added to the transaction by the user, or an automatically generated reference such as the order number.",
            "readOnly": true
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "This can be an additional optional reference added to the transaction by the user, or an automatically generated reference such as the despatch note number.",
            "readOnly": true
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The warehouse the product was moved from or to.",
            "readOnly": true
          },
          "bin_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The name of the bin to which the transaction relates to.",
            "readOnly": true
          },
          "quantity": {
            "type": "number",
            "description": "The quantity on the transaction.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "unit_cost_price": {
            "type": "number",
            "description": "The cost price per unit for this transaction.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "unit_issue_price": {
            "type": "number",
            "description": "The price used when products are moved out of stock.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "unit_discount_value": {
            "type": "number",
            "description": "The discount amount per unit used for this transaction.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "total_order_discount": {
            "type": "number",
            "description": "The total discount value of the transaction.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "cost_value": {
            "type": "number",
            "description": "The total cost value.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "issue_value": {
            "type": "number",
            "description": "The total issue or sales price of the transaction.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "memo": {
            "maxLength": 1000,
            "type": "string",
            "description": "Any memo note that was applied to the product transaction.",
            "readOnly": true
          },
          "user_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The name of the Sage 200 user that created the transaction.",
            "readOnly": true
          },
          "analysis_code_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 1.",
            "readOnly": true
          },
          "analysis_code_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 2.",
            "readOnly": true
          },
          "analysis_code_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 3.",
            "readOnly": true
          },
          "analysis_code_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 4.",
            "readOnly": true
          },
          "analysis_code_5": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 5.",
            "readOnly": true
          },
          "analysis_code_6": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 6.",
            "readOnly": true
          },
          "analysis_code_7": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 7.",
            "readOnly": true
          },
          "analysis_code_8": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 8.",
            "readOnly": true
          },
          "analysis_code_9": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 9.",
            "readOnly": true
          },
          "analysis_code_10": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 10.",
            "readOnly": true
          },
          "analysis_code_11": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 11.",
            "readOnly": true
          },
          "analysis_code_12": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 12.",
            "readOnly": true
          },
          "analysis_code_13": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 13.",
            "readOnly": true
          },
          "analysis_code_14": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 14.",
            "readOnly": true
          },
          "analysis_code_15": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 15.",
            "readOnly": true
          },
          "analysis_code_16": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 16.",
            "readOnly": true
          },
          "analysis_code_17": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 17.",
            "readOnly": true
          },
          "analysis_code_18": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 18.",
            "readOnly": true
          },
          "analysis_code_19": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 19.",
            "readOnly": true
          },
          "analysis_code_20": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis Code 20.",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "A product transaction is created each time a product is moved in, or out of stock. Product transactions are created from various sources such as purchase orders, sales orders, transfers between warehouses etc.. This resource returns the details of product transactions. The default sort (orderby) field is by 'Id' descending."
      },
      "product_transaction_traceable_item_history_record": {
        "type": "object",
        "properties": {
          "identification_no": {
            "maxLength": 30,
            "type": "string",
            "description": "The identification number of the traceable item.",
            "readOnly": true
          },
          "additional_reference": {
            "maxLength": 30,
            "type": "string",
            "description": "The additional reference for the traceable item.",
            "readOnly": true
          },
          "sell_by_date": {
            "type": "string",
            "description": "The sell by date of the traceable item.",
            "format": "date-time",
            "readOnly": true
          },
          "use_by_date": {
            "type": "string",
            "description": "The use by date of the traceable item.",
            "format": "date-time",
            "readOnly": true
          },
          "bin_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The bin name within the warehouse of the allocation of a product.",
            "readOnly": true
          },
          "quantity": {
            "type": "number",
            "description": "Adjustment quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          }
        },
        "description": "This resource returns traceable item details for a product traceable history record. (Sage 200 Professional only).",
        "x-sage-professional-only": true
      },
      "costing_method_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Costing method types are used to calculate the cost of sales from your sales orders, the value of stock and the transactions posted to your stock nominal accounts within the application. Product groups can be 'FIFO', 'Average', 'Standard' or 'Actual'.<P>The API endpoint returns details of the costing method types that can be used.</P>"
      },
      "landed_costs_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Landed costs refer to any costs associated with the shipping, handling and importing of stock items on purchase orders. These additional costs are often invoiced separately, for example, by a courier. Landed costs type can be 'Not Applicable', 'Percentage Based', or 'Value Based'.<P>The API endpoint returns details of the costing method types that can be used.</P>"
      },
      "product_group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product group record Id.",
            "format": "int64",
            "readOnly": true
          },
          "code": {
            "maxLength": 20,
            "type": "string",
            "description": "The code of the product group.",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "The description of the product group.",
            "readOnly": true
          },
          "product_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The product type of the product group.",
            "readOnly": true
          },
          "costing_method": {
            "maxLength": 50,
            "type": "string",
            "description": "The costing method of the product group.",
            "readOnly": true
          },
          "stocktake_cycle_period": {
            "type": "integer",
            "description": "The default period of time in days between each stocktake for products in the product group.",
            "format": "int16"
          },
          "label_printing_option_type": {
            "maxLength": 60,
            "type": "string",
            "description": "The label printing option type. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "keep_movement_history": {
            "type": "boolean",
            "description": "Whether to keep a record of historical stock movements for products in the product group. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "can_levels_go_negative": {
            "type": "boolean",
            "description": "Indicates whether to allow stock levels to go negative. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "can_over_allocate_negative_stock": {
            "type": "boolean",
            "description": "Whether to allocate the full quantity of stock on an order by default, even if the stock level would become negative."
          },
          "use_description_on_documents": {
            "type": "boolean",
            "description": "Whether to use the product description on order and invoice documents."
          },
          "use_reverse_charge_vat_rules": {
            "type": "boolean",
            "description": "Whether the product is subject to domestic reverse charge VAT rules."
          },
          "do_items_use_units": {
            "type": "boolean",
            "description": "Indicates whether items in the product group use additional units. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "this_is_the_sop_product_group": {
            "type": "boolean",
            "description": "Indicates whether this is the SOP product group.",
            "readOnly": true
          },
          "selling_quantities_use_multiple_units": {
            "type": "boolean",
            "description": "Indicates whether selling quantities use multiple units. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "selling_prices_use_multiple_units": {
            "type": "boolean",
            "description": "Indicates whether selling prices use multiple units. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "buying_quantities_use_multiple_units": {
            "type": "boolean",
            "description": "Indicates whether buying quantities use multiple units. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "buying_prices_use_multiple_units": {
            "type": "boolean",
            "description": "Indicates whether buying prices use multiple units. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "do_items_use_markup": {
            "type": "boolean",
            "description": "Indicates whether markup pricing is used."
          },
          "use_landed_costs": {
            "type": "boolean",
            "description": "Whether products in the product group will use landed costs by default."
          },
          "landed_costs_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The default landed costs type for products in the product group."
          },
          "landed_costs_percentage": {
            "type": "number",
            "description": "The percentage of the cost of the product which is landed costs, if the landed costs type is Percentage Based.",
            "format": "decimal 2dp"
          },
          "landed_costs_per_item": {
            "type": "number",
            "description": "The amount of the cost of the product which is landed costs, if the landed costs type is Value Based.",
            "format": "decimal 2dp"
          },
          "traceable_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The traceable type of the product group. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "sale_from_single_batch": {
            "type": "boolean",
            "description": "Indicates whether the product is sold from a single batch. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "allow_duplicate_numbers": {
            "type": "boolean",
            "description": "Indicates whether the product allows duplicate numbers. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "uses_alternative_ref": {
            "type": "boolean",
            "description": "Indicates whether the product uses alternative references. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "uses_sell_by_date": {
            "type": "boolean",
            "description": "Indicates whether the product uses sell by dates. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "uses_use_by_date": {
            "type": "boolean",
            "description": "Indicates whether the product uses use by dates. (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "stock_nominal_code_id": {
            "type": "integer",
            "description": "Stock nominal code record Id.",
            "format": "int64"
          },
          "revenue_nominal_code_id": {
            "type": "integer",
            "description": "Revenue nominal code record Id.",
            "format": "int64"
          },
          "accrual_nominal_code_id": {
            "type": "integer",
            "description": "Accrual nominal code record Id. (Sage 200 Professional only).",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "issue_nominal_code_id": {
            "type": "integer",
            "description": "Issue nominal code record Id. (Sage 200 Professional only).",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "base_unit_id": {
            "type": "integer",
            "description": "The base unit record Id.",
            "format": "int64"
          },
          "stock_unit_id": {
            "type": "integer",
            "description": "The stock unit record Id.",
            "format": "int64"
          },
          "accrual_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products accrual nominal code. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "issue_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products issue nominal code. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "revenue_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products revenue nominal code.",
            "readOnly": true
          },
          "stock_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The products stock nominal code.",
            "readOnly": true
          },
          "base_unit": {
            "type": "object",
            "properties": {},
            "description": "The base unit.",
            "readOnly": true
          },
          "stock_unit": {
            "type": "object",
            "properties": {},
            "description": "The stock unit.",
            "readOnly": true
          },
          "search_categories": {
            "type": "array",
            "description": "The product group search categories. Search categories are used to help you search for stock items without knowing the item's stock code. <br/><br/>A search category consists of:<ul><li>A category. This is the type such as colour, size or voltage.</li></ul>Product group search categories only consists of a category.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/product_group_search_category"
            }
          },
          "units": {
            "type": "array",
            "description": "The product group units of measure.",
            "items": {
              "$ref": "#/components/schemas/product_group_unit"
            }
          },
          "bom_settings": {
            "$ref": "#/components/schemas/product_group_bom_settings"
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Product groups are used to group stock items together with similar characteristics or requirements. Product Groups provide several default settings for stock items and have their own unique code and description."
      },
      "product_group_bom_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Record Id.",
            "format": "int64",
            "readOnly": true
          },
          "cost_heading_id": {
            "type": "integer",
            "description": "The product group default cost heading record Id.",
            "format": "int64"
          },
          "cost_heading": {
            "type": "object",
            "properties": {},
            "description": "The product group default cost heading.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The BOM related settings for the product group"
      },
      "product_group_search_category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product group search category record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_group_id": {
            "type": "integer",
            "description": "The associated product group record Id.",
            "format": "int64",
            "readOnly": true
          },
          "search_category_id": {
            "type": "integer",
            "description": "The search category record Id.",
            "format": "int64",
            "readOnly": true
          },
          "search_category_name": {
            "type": "integer",
            "description": "The search category name.",
            "format": "int64",
            "readOnly": true
          },
          "default_search_value": {
            "type": "object",
            "properties": {},
            "description": "The default search value.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The search categories for the product group."
      },
      "product_group_unit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product group unit record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_group_id": {
            "type": "integer",
            "description": "The associated product group record Id.",
            "format": "int64"
          },
          "unit_id": {
            "type": "integer",
            "description": "The unit record Id.",
            "format": "int64"
          },
          "unit_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The unit type of the unit of measure.",
            "readOnly": true
          },
          "multiple_of_base_unit": {
            "type": "number",
            "description": "The multiple of base unit.",
            "format": "decimal 9dp"
          },
          "unit_precision": {
            "type": "number",
            "description": "The precision of the unit.",
            "format": "decimal 5dp"
          },
          "use_own_price": {
            "type": "boolean",
            "description": "Whether the product group unit uses specific pricing."
          },
          "unit": {
            "type": "object",
            "properties": {},
            "description": "The unit of measure.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The units of measure in which products are stored as well as those used when buying or selling products."
      },
      "search_category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The search category record Id.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "maxLength": 40,
            "type": "string",
            "description": "The search category name.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "A search category item."
      },
      "search_value": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The search category value record Id.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "maxLength": 40,
            "type": "string",
            "description": "The search category value name.",
            "readOnly": true
          },
          "search_category_id": {
            "type": "integer",
            "description": "The Id of the search category to which this search value belongs.",
            "format": "int64",
            "readOnly": true
          },
          "is_none_value": {
            "type": "boolean",
            "description": "Flag indicating if this item is the 'None' value for a list of related search category values.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The search category value."
      },
      "product_search": {
        "required": [
          "search_category_values"
        ],
        "type": "object",
        "properties": {
          "search_category_values": {
            "type": "array",
            "description": "The product search request.",
            "items": {
              "$ref": "#/components/schemas/product_search_search_category_value"
            }
          },
          "show_inactive": {
            "type": "boolean",
            "description": "Whether products that are inactive are included.",
            "default": false
          },
          "show_phantom": {
            "type": "boolean",
            "description": "Whether products that are phantom items are included.",
            "default": false
          },
          "show_only_allow_sales_order": {
            "type": "boolean",
            "description": "Whether to show only products that are allowed for sales orders.",
            "default": false
          },
          "product_search_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The product search type is used to decide what filter of products is applied.",
            "default": "EnumStockItemTypeAll"
          },
          "matching_products": {
            "type": "array",
            "description": "The product search response.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/product_search_matching_product"
            }
          }
        },
        "description": "Returns matching products associated with the search category values passed."
      },
      "product_search_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Product search types.<P>The API endpoint returns details of the product search types that can be used.</P>"
      },
      "product_search_search_category_value": {
        "type": "object",
        "properties": {
          "search_category_id": {
            "type": "integer",
            "description": "The search category record Id.",
            "format": "int64"
          },
          "search_value_id": {
            "type": "integer",
            "description": "The search value record Id.",
            "format": "int64"
          }
        },
        "description": "The product search request of search category values."
      },
      "product_search_matching_product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64",
            "readOnly": true
          },
          "code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code.",
            "readOnly": true
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name.",
            "readOnly": true
          },
          "product_status_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The product status type.",
            "readOnly": true
          },
          "product_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The product type of the product group.",
            "readOnly": true
          },
          "free_stock_quantity": {
            "type": "number",
            "description": "The quantity of free stock available.",
            "format": "decimal 5dp",
            "readOnly": true
          }
        },
        "description": "The product search response of matching products."
      },
      "unit_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Unit types are used to indicate the unit of measure type within the application. The types can be 'Base', 'Stock' or 'Additional'.<P>The API endpoint returns details of the unit of measure types that can be used.</P>"
      },
      "lookup_product_group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product group record Id.",
            "format": "int64"
          },
          "code": {
            "maxLength": 20,
            "type": "string",
            "description": "The code of the product group."
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "The description of the product group."
          },
          "product_type_id": {
            "type": "integer",
            "description": "The product type of the product group.",
            "format": "int64"
          }
        },
        "description": "A subset of product group information for populating a lookup."
      },
      "lookup_product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "code": {
            "maxLength": 30,
            "type": "string",
            "description": "The code of the product."
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "The name of the product."
          },
          "free_stock_quantity": {
            "type": "number",
            "description": "The quantity of free stock of the product.",
            "format": "decimal 5dp"
          },
          "record_nos_on_goods_received": {
            "type": "boolean",
            "description": "Indicates whether this product is assigned batch/serial numbers when received."
          },
          "product_status_id": {
            "type": "integer",
            "description": "The product status type of the product.",
            "format": "int64"
          },
          "bom_item_type_id": {
            "type": "integer",
            "description": "The bill of materials item type of the product.",
            "format": "int64"
          },
          "traceable_type_id": {
            "type": "integer",
            "description": "The traceable type of the product.",
            "format": "int64"
          },
          "this_is_the_sop_product_group": {
            "type": "boolean",
            "description": "Indicates whether this product is associated with a product group that is only to be used in Sales Order Processing."
          },
          "product_type_id": {
            "type": "integer",
            "description": "The product type of the product.",
            "format": "int64"
          },
          "allow_sales_order": {
            "type": "boolean",
            "description": "Indicates whether the product is allowed on sales orders and invoicing."
          }
        },
        "description": "A subset of product information for populating a lookup."
      },
      "lookup_stock_item_unit": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Stock item unit record Id.",
            "format": "int64"
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "The name of the stock item unit."
          },
          "stock_item_id": {
            "type": "integer",
            "description": "Stock item record Id.",
            "format": "int64"
          },
          "unit_id": {
            "type": "integer",
            "description": "The unit record Id.",
            "format": "int64"
          }
        },
        "description": "A subset of stock item unit information for populating a lookup."
      },
      "stock_transfer_traceable_items_request": {
        "required": [
          "bin_holding_from_id",
          "product_id"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "bin_holding_from_id": {
            "type": "integer",
            "description": "Bin holding record Id for the product location.",
            "format": "int64"
          }
        },
        "description": "Returns a list of traceable items for a product and bin."
      },
      "stock_transfer": {
        "required": [
          "bin_holding_from_id",
          "bin_holding_to_id",
          "product_id",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "bin_holding_from_id": {
            "type": "integer",
            "description": "Bin holding record Id for the source location.",
            "format": "int64"
          },
          "bin_holding_to_id": {
            "type": "integer",
            "description": "Bin holding record Id for the destination location.",
            "format": "int64"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity to transfer.",
            "format": "decimal 5dp"
          },
          "date": {
            "type": "string",
            "description": "The date of the transfer.",
            "format": "date-time"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The transfer reference."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The transfer second reference."
          },
          "traceable_adjustment_items": {
            "type": "array",
            "description": "Traceable adjustment items. (Sage 200 Professional only).",
            "items": {
              "type": "object",
              "properties": {
                "traceable_item_id": {
                  "type": "integer",
                  "description": "Traceable item record Id.",
                  "format": "int64"
                },
                "traceable_bin_item_id": {
                  "type": "integer",
                  "description": "Traceable bin item record Id.",
                  "format": "int64"
                },
                "quantity": {
                  "type": "number",
                  "description": "Adjustment quantity. Only used for products of traceable type EnumTraceableTypeBatch.",
                  "format": "decimal 5dp"
                },
                "is_selected": {
                  "type": "boolean",
                  "description": "Whether the traceable item is selected for processing. Only for products of traceable type EnumTraceableTypeSerial."
                },
                "identification_no": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "The identification number of the traceable item.",
                  "readOnly": true
                },
                "is_selectable": {
                  "type": "boolean",
                  "description": "Whether the traceable item may be selected for processing. Typically unassigned items, or pre-receipts are not selectable.",
                  "readOnly": true
                },
                "supplier_reference": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Supplier account reference. Only for products of traceable type EnumTraceableTypeSerial.",
                  "readOnly": true
                },
                "receipt_date": {
                  "type": "string",
                  "description": "Received date. Only for products of traceable type EnumTraceableTypeSerial.",
                  "format": "date-time",
                  "readOnly": true
                },
                "additional_reference": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "The additional reference for the traceable item.",
                  "readOnly": true
                },
                "sell_by_date": {
                  "type": "string",
                  "description": "The sell by date of the traceable item.",
                  "format": "date-time",
                  "readOnly": true
                },
                "use_by_date": {
                  "type": "string",
                  "description": "The use by date of the traceable item.",
                  "format": "date-time",
                  "readOnly": true
                },
                "bin_item_id": {
                  "type": "integer",
                  "description": "Bin item record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "bin_name": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The bin name within the warehouse of the allocation of a product.",
                  "readOnly": true
                },
                "allocated_quantity": {
                  "type": "number",
                  "description": "The allocated quantity of the allocation record.",
                  "format": "decimal 5dp",
                  "readOnly": true
                },
                "is_allocated": {
                  "type": "boolean",
                  "description": "Whether the traceable item is allocated. Only for products of traceable type EnumTraceableTypeSerial.",
                  "readOnly": true
                },
                "original_quantity": {
                  "type": "number",
                  "description": "Original quantity.",
                  "format": "decimal 5dp",
                  "readOnly": true
                },
                "available_quantity": {
                  "type": "number",
                  "description": "Available quantity.",
                  "format": "decimal 5dp",
                  "readOnly": true
                }
              }
            },
            "x-sage-professional-only": true
          }
        },
        "description": "A stock transfer is used to move stock from one location to another."
      },
      "stock_transfer_response": {
        "type": "object",
        "description": "A stock transfer is used to move stock from one location to another."
      },
      "cross_sell_product_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product Cross Sell Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code.",
            "readOnly": true
          },
          "product_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name.",
            "readOnly": true
          },
          "product_group_id": {
            "type": "integer",
            "description": "Product group Id.",
            "format": "int64",
            "readOnly": true
          },
          "cross_sell_product_id": {
            "type": "integer",
            "description": "Product Id of the cross sell product.",
            "format": "int64",
            "readOnly": true
          },
          "cross_sell_product_code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code of the cross sell product.",
            "readOnly": true
          },
          "cross_sell_product_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name of the cross sell product.",
            "readOnly": true
          },
          "cross_sell_product_group_id": {
            "type": "integer",
            "description": "Product group Id of the cross sell product.",
            "format": "int64",
            "readOnly": true
          },
          "cross_sell_product_status_type_id": {
            "type": "integer",
            "description": "Product status type Id of the cross sell product.",
            "format": "int64",
            "readOnly": true
          },
          "cross_sell_product_traceable_type_id": {
            "type": "integer",
            "description": "The traceable type Id of the cross sell product.",
            "format": "int64",
            "readOnly": true
          }
        },
        "description": "This specifies a lookup linking products with products that it can be cross sold with."
      },
      "alternative_product_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Alternative Product Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_id": {
            "type": "integer",
            "description": "Product Id.",
            "format": "int64",
            "readOnly": true
          },
          "product_code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code.",
            "readOnly": true
          },
          "product_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name.",
            "readOnly": true
          },
          "product_group_id": {
            "type": "integer",
            "description": "Product group Id.",
            "format": "int64",
            "readOnly": true
          },
          "alternative_product_id": {
            "type": "integer",
            "description": "Product Id of the alternative product.",
            "format": "int64",
            "readOnly": true
          },
          "alternative_product_code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code of the alternative product.",
            "readOnly": true
          },
          "alternative_product_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name of the alternative product.",
            "readOnly": true
          },
          "alternative_product_group_id": {
            "type": "integer",
            "description": "Product group Id of the alternative product.",
            "format": "int64",
            "readOnly": true
          },
          "alternative_product_status_type_id": {
            "type": "integer",
            "description": "Product status type Id of the alternative product.",
            "format": "int64",
            "readOnly": true
          },
          "alternative_product_traceable_type_id": {
            "type": "integer",
            "description": "The traceable type Id of the alternative product.",
            "format": "int64",
            "readOnly": true
          },
          "is_preferred": {
            "type": "boolean",
            "description": "Whether the alternative product is the preferred alternative for the product.",
            "readOnly": true
          }
        },
        "description": "This specifies a lookup linking products with products that are an alternative for it."
      },
      "serial_allocated_to_who_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "The serial allocated to who type, used to determine the type of allocation of a serial number.<P>The API endpoint returns the following values: EnumSerialAllocatedToWhoNot, EnumSerialAllocatedToWhoThis, EnumSerialAllocatedToWhoOther.</P>"
      },
      "stock_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Stock setting unique Id.",
            "format": "int64",
            "readOnly": true
          },
          "use_multiple_locations": {
            "type": "boolean",
            "description": "When true this setting allows Sage 200 to track stock at different locations. This can be across several warehouses, or a single warehouse split into separate areas (bins). (Sage 200 Standard value is true and cannot be changed).",
            "readOnly": true,
            "default": false
          },
          "use_search_categories": {
            "type": "boolean",
            "description": "Allow searching using search categories and values to search for products using a list of search categories and values. (Sage 200 Standard value is false and cannot be changed).",
            "readOnly": true,
            "default": false
          },
          "integrate_stock_management_with_nominal": {
            "type": "boolean",
            "description": "Integrate stock management with the Nominal Ledger allowing postings to the Nominal Ledger for stock movements and adjustments recorded in Stock Control. (Sage 200 Standard value is false and cannot be changed).",
            "readOnly": true,
            "default": false
          },
          "generate_cos_for_sop": {
            "type": "boolean",
            "description": "Generate cost of sales postings from sales orders generated by Sales Order Processing. (Sage 200 Standard value is false and cannot be changed).",
            "readOnly": true,
            "default": false
          },
          "allow_negative_stocktake": {
            "type": "boolean",
            "description": "Allow inclusion of stock items in stocktake that have negative stock levels. (Sage 200 Standard value is true and cannot be changed).",
            "readOnly": true,
            "default": false
          },
          "allow_negative_stocktake_with_purchase_order": {
            "type": "boolean",
            "description": "Allow inclusion of stock items in stocktake that have negative stock levels with outstanding purchase orders. (Sage 200 Standard value is true and cannot be changed).",
            "readOnly": true,
            "default": false
          },
          "profit_percent_of_revenue": {
            "type": "boolean",
            "description": "Profit can be calculated as a percentage of revenue (true), or as a percentage of cost (false).",
            "readOnly": true,
            "default": true
          },
          "record_numbers_on_goods_received": {
            "type": "boolean",
            "description": "Whether to record traceable items when goods are received. (Sage 200 Professional only, Sage 200 Standard value is false and cannot be changed).",
            "readOnly": true,
            "default": false,
            "x-sage-professional-only": true
          },
          "allocate_individual_items": {
            "type": "boolean",
            "description": "Batch/serial numbers must be recorded when goods are received to assign batch/serial numbers to traceable items during the goods in process. (Sage 200 Standard value is numbers must be recorded when allocating stock and cannot be changed).",
            "readOnly": true,
            "default": true
          },
          "allow_fulfilment_from_stock": {
            "type": "boolean",
            "description": "Allows a stock item to have a fulfilment method of 'from stock'.",
            "readOnly": true,
            "default": true
          },
          "allow_fulfilment_from_supplier_via_stock": {
            "type": "boolean",
            "description": "Allows a stock item to have a fulfilment method of 'for delivery direct from supplier'.",
            "readOnly": true,
            "default": false
          },
          "allow_fulfilment_from_supplier_direct_to_customer": {
            "type": "boolean",
            "description": "Allows a stock item to have a fulfilment method of 'direct to customer' (Sage 200 Standard value is false and cannot be changed).",
            "readOnly": true,
            "default": false
          },
          "use_landed_costs": {
            "type": "boolean",
            "description": "Whether or not to use landed costs.",
            "readOnly": true,
            "default": false
          },
          "landed_costs_nominal_code_id": {
            "type": "integer",
            "description": "Landed costs nominal record Id.",
            "format": "int64",
            "readOnly": true
          },
          "internal_areas": {
            "type": "array",
            "description": "Internal areas.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/internal_area"
            }
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The Stock Settings are used to choose how to process and manage your stock."
      },
      "internal_area": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Internal area unique Id.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "Internal area name.",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Whether the internal area is the default area.",
            "readOnly": true
          },
          "nominal_code_id": {
            "type": "integer",
            "description": "Internal area nominal record Id. (Sage 200 Professional only).",
            "format": "int64",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "nominal_code": {
            "type": "object",
            "properties": {},
            "description": "Internal area nominal code. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The internal areas represent departments such as sales, retail and production. Use them to monitor stock issued for internal use."
      },
      "warehouse": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Warehouse record Id.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "Warehouse name."
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Warehouse description."
          },
          "warehouse_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The warehouse type."
          },
          "use_for_sales_trading": {
            "type": "boolean",
            "description": "Indicates that the warehouse is used for sales trading (Sage 200 Professional only).",
            "default": true,
            "x-sage-professional-only": true
          },
          "postal_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse postal name."
          },
          "address_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse address line 1."
          },
          "address_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse address line 2."
          },
          "address_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse address line 3."
          },
          "address_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse address line 4."
          },
          "city": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse city."
          },
          "county": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse county."
          },
          "postcode": {
            "maxLength": 10,
            "type": "string",
            "description": "Warehouse post code."
          },
          "country": {
            "maxLength": 60,
            "type": "string",
            "description": "Warehouse country."
          },
          "contact": {
            "maxLength": 50,
            "type": "string",
            "description": "Warehouse contact."
          },
          "telephone_number": {
            "maxLength": 30,
            "type": "string",
            "description": "Warehouse telephone number."
          },
          "fax_number": {
            "maxLength": 30,
            "type": "string",
            "description": "Warehouse fax number."
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "Warehouse email address."
          },
          "website": {
            "maxLength": 200,
            "type": "string",
            "description": "Warehouse web address."
          },
          "spare_text_1": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 1."
          },
          "spare_text_2": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 2."
          },
          "spare_text_3": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 3."
          },
          "spare_text_4": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 4."
          },
          "spare_text_5": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 5."
          },
          "spare_text_6": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 6."
          },
          "spare_text_7": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 7."
          },
          "spare_text_8": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 8."
          },
          "spare_text_9": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 9."
          },
          "spare_text_10": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 10."
          },
          "spare_number_1": {
            "type": "number",
            "description": "Spare number 1.",
            "format": "decimal 5dp"
          },
          "spare_number_2": {
            "type": "number",
            "description": "Spare number 2.",
            "format": "decimal 5dp"
          },
          "spare_number_3": {
            "type": "number",
            "description": "Spare number 3.",
            "format": "decimal 5dp"
          },
          "spare_number_4": {
            "type": "number",
            "description": "Spare number 4.",
            "format": "decimal 5dp"
          },
          "spare_number_5": {
            "type": "number",
            "description": "Spare number 5.",
            "format": "decimal 5dp"
          },
          "spare_number_6": {
            "type": "number",
            "description": "Spare number 6.",
            "format": "decimal 5dp"
          },
          "spare_number_7": {
            "type": "number",
            "description": "Spare number 7.",
            "format": "decimal 5dp"
          },
          "spare_number_8": {
            "type": "number",
            "description": "Spare number 8.",
            "format": "decimal 5dp"
          },
          "spare_number_9": {
            "type": "number",
            "description": "Spare number 9.",
            "format": "decimal 5dp"
          },
          "spare_number_10": {
            "type": "number",
            "description": "Spare number 10.",
            "format": "decimal 5dp"
          },
          "spare_date_1": {
            "type": "string",
            "description": "Spare date 1 (UTC).",
            "format": "date-time"
          },
          "spare_date_2": {
            "type": "string",
            "description": "Spare date 2 (UTC).",
            "format": "date-time"
          },
          "spare_date_3": {
            "type": "string",
            "description": "Spare date 3 (UTC).",
            "format": "date-time"
          },
          "spare_date_4": {
            "type": "string",
            "description": "Spare date 4 (UTC).",
            "format": "date-time"
          },
          "spare_date_5": {
            "type": "string",
            "description": "Spare date 5 (UTC).",
            "format": "date-time"
          },
          "spare_bool_1": {
            "type": "boolean",
            "description": "Spare bool 1.",
            "default": false
          },
          "spare_bool_2": {
            "type": "boolean",
            "description": "Spare bool 2.",
            "default": false
          },
          "spare_bool_3": {
            "type": "boolean",
            "description": "Spare bool 3.",
            "default": false
          },
          "spare_bool_4": {
            "type": "boolean",
            "description": "Spare bool 4.",
            "default": false
          },
          "spare_bool_5": {
            "type": "boolean",
            "description": "Spare bool 5.",
            "default": false
          },
          "country_code_id": {
            "type": "integer",
            "description": "Warehouse country code Id.",
            "format": "int64"
          },
          "country_code": {
            "type": "object",
            "properties": {},
            "description": "Warehouse country code.",
            "readOnly": true
          },
          "bom_settings": {
            "$ref": "#/components/schemas/warehouse_bom_settings"
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "All stock within Sage 200, regardless of type (Stock, Service/labour, or Miscellaneous), requires a holding location. By default, the HOME warehouse is created within Sage 200, you can then create your own warehouses."
      },
      "warehouse_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "The warehouse type."
      },
      "warehouse_bom_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_component_source": {
            "type": "boolean",
            "description": "Allows the warehouse to be available in BOM processes such as trial kitting, allocation and building items (Sage 200 Professional only).",
            "default": true,
            "x-sage-professional-only": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The BOM related settings for the warehouse"
      },
      "buying_price": {
        "type": "object",
        "properties": {
          "buying_price": {
            "type": "number",
            "description": "Buying price of stock item.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "stock_level": {
            "type": "number",
            "description": "Stock level.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "stock_unit_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Stock unit of measure name.",
            "readOnly": true
          },
          "number_of_movements": {
            "type": "number",
            "description": "Number of movement receipts at this buying price.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "is_buying_price_confirmed": {
            "type": "boolean",
            "description": "Has this buying price been confirmed?.",
            "readOnly": true
          },
          "buying_prices": {
            "type": "array",
            "description": "A collection of stock movement receipts at this buying price.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/movement_buying_price"
            }
          }
        },
        "description": "The specific buying price at which a stock item was received."
      },
      "movement_buying_price": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Quantity received on this occasion.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Reference.",
            "readOnly": true
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Second reference.",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date the stock item was received.",
            "format": "date-time",
            "readOnly": true
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Name of warehouse receiving item.",
            "readOnly": true
          },
          "bin_item_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Name of bin.",
            "readOnly": true
          },
          "stock_item_unit_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Stock item unit of measure name.",
            "readOnly": true
          }
        },
        "description": "Object representing receipt of a level of stock at a specific buying price."
      },
      "warehouse_holding": {
        "required": [
          "product_id",
          "warehouse_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Warehouse holding record Id.",
            "format": "int64",
            "readOnly": true
          },
          "warehouse_id": {
            "type": "integer",
            "description": "Warehouse record Id.",
            "format": "int64"
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "is_default_manufacturing_warehouse": {
            "type": "boolean",
            "description": "True if the item is a built or built/bought item and that warehouse is marked as the default manufacturing warehouse; otherwise false."
          },
          "reorder_level": {
            "type": "number",
            "description": "Reorder stock level.",
            "format": "decimal 5dp"
          },
          "minimum_level": {
            "type": "number",
            "description": "Minimum stock quantity level.",
            "format": "decimal 5dp"
          },
          "maximum_level": {
            "type": "number",
            "description": "Maximum stock quantity level.",
            "format": "decimal 5dp"
          },
          "quantity_reserved": {
            "type": "number",
            "description": "Quantity reserved.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "confirmed_qty_in_stock": {
            "type": "number",
            "description": "Confirmed stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "unconfirmed_qty_in_stock": {
            "type": "number",
            "description": "Unconfirmed stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_in_stock": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_in_stock_less_reserved": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity minus reserved quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_on_order": {
            "type": "number",
            "description": "Total stock on order.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated_stock": {
            "type": "number",
            "description": "Allocated stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated_sop": {
            "type": "number",
            "description": "Allocated sales order quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated_bom": {
            "type": "number",
            "description": "Allocated bill of materials quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated": {
            "type": "number",
            "description": "Total allocated stock, SOP and bom quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "free_stock_available": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity minus allocated quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "free_stock_available_less_reserved": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity minus allocated and reserved quantities.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Warehouse name.",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing product, whether to delete this warehouse holding from the collection of product warehouse holdings."
          },
          "product": {
            "type": "object",
            "properties": {},
            "description": "Product."
          },
          "warehouse": {
            "type": "object",
            "properties": {},
            "description": "Warehouse."
          },
          "bin_holdings": {
            "type": "array",
            "description": "The stock holding details for each bin in the warehouse.",
            "items": {
              "$ref": "#/components/schemas/bin_holding"
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "delete_exception_type": {
                "type": "string",
                "description": "The exception type thrown when attempting to remove a warehouse which cannot be removed.",
                "readOnly": true
              }
            },
            "description": "The warehouse holding status.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "All stock within Sage 200 regardless of type (Stock, Service/labour, or Miscellaneous), require a holding location. The location indicates where an item is stored and the stock level settings for each product in the warehouse i.e. the re-order level, the minimum and maximum stock levels. <br /><br />Items with a type of 'Stock' have levels recorded for each warehouse location and the levels are used when allocating, issuing and receiving stock. <br /><br />If the stock setting UseMultipleLocations is true, a product can be linked to multiple warehouse holdings. You cannot delete the last warehouse holding associated with a product."
      },
      "traceable_adjustment_item_balance": {
        "type": "object",
        "properties": {
          "traceable_item_id": {
            "type": "integer",
            "description": "Traceable item record Id.",
            "format": "int64",
            "readOnly": true
          },
          "identification_no": {
            "maxLength": 30,
            "type": "string",
            "description": "The identification number of the traceable item.",
            "readOnly": true
          },
          "supplier_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "Supplier account reference. Only for products of traceable type EnumTraceableTypeSerial.",
            "readOnly": true
          },
          "receipt_date": {
            "type": "string",
            "description": "Received date. Only for products of traceable type EnumTraceableTypeSerial.",
            "format": "date-time",
            "readOnly": true
          },
          "additional_reference": {
            "maxLength": 30,
            "type": "string",
            "description": "The additional reference for the traceable item.",
            "readOnly": true
          },
          "sell_by_date": {
            "type": "string",
            "description": "The sell by date of the traceable item.",
            "format": "date-time",
            "readOnly": true
          },
          "use_by_date": {
            "type": "string",
            "description": "The use by date of the traceable item.",
            "format": "date-time",
            "readOnly": true
          },
          "traceable_bin_item_id": {
            "type": "integer",
            "description": "Traceable bin item record Id.",
            "format": "int64",
            "readOnly": true
          },
          "bin_item_id": {
            "type": "integer",
            "description": "Bin item record Id.",
            "format": "int64",
            "readOnly": true
          },
          "bin_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The bin name within the warehouse of the allocation of a product.",
            "readOnly": true
          },
          "quantity": {
            "type": "number",
            "description": "Adjustment quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "allocated_quantity": {
            "type": "number",
            "description": "The allocated quantity of the allocation record.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "is_allocated": {
            "type": "boolean",
            "description": "Whether the traceable item is allocated. Only for products of traceable type EnumTraceableTypeSerial.",
            "readOnly": true
          }
        },
        "description": "This resource returns traceable item balances for a warehouse holding of a product. (Sage 200 Professional only).",
        "x-sage-professional-only": true
      },
      "bin_holding": {
        "required": [
          "product_id",
          "warehouse_holding_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Bin holding record Id.",
            "format": "int64",
            "readOnly": true
          },
          "warehouse_holding_id": {
            "type": "integer",
            "description": "Warehouse holding record Id.",
            "format": "int64"
          },
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "name": {
            "maxLength": 20,
            "type": "string",
            "description": "Bin name."
          },
          "allocation_priority": {
            "type": "integer",
            "description": "Allocation priority, between 1 and 9.",
            "format": "int64",
            "default": 9
          },
          "quantity_reserved": {
            "type": "number",
            "description": "Quantity reserved.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "unconfirmed_qty_in_stock": {
            "type": "number",
            "description": "Unconfirmed stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "confirmed_qty_in_stock": {
            "type": "number",
            "description": "Confirmed stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated_sop": {
            "type": "number",
            "description": "Allocated sales order quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated_stock": {
            "type": "number",
            "description": "Allocated stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated_bom": {
            "type": "number",
            "description": "Allocated bill of materials quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_in_stock": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_in_stock_less_reserved": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity minus reserved quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated": {
            "type": "number",
            "description": "Total allocated stock, SOP and bom quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "free_stock_available": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity minus allocated quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "free_stock_available_less_reserved": {
            "type": "number",
            "description": "Total confirmed and unconfirmed stock quantity minus allocated and reserved quantities.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "last_stocktake": {
            "type": "string",
            "description": "The date and time of the last stocktake for this item at this bin.",
            "format": "date-time",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing warehouse holding, whether to delete this bin holding from the collection of warehouse holding bin holdings."
          },
          "spare_text_1": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 1."
          },
          "spare_text_2": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 2."
          },
          "spare_text_3": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 3."
          },
          "spare_text_4": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 4."
          },
          "spare_text_5": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 5."
          },
          "spare_text_6": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 6."
          },
          "spare_text_7": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 7."
          },
          "spare_text_8": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 8."
          },
          "spare_text_9": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 9."
          },
          "spare_text_10": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 10."
          },
          "spare_number_1": {
            "type": "number",
            "description": "Spare number 1.",
            "format": "decimal 5dp"
          },
          "spare_number_2": {
            "type": "number",
            "description": "Spare number 2.",
            "format": "decimal 5dp"
          },
          "spare_number_3": {
            "type": "number",
            "description": "Spare number 3.",
            "format": "decimal 5dp"
          },
          "spare_number_4": {
            "type": "number",
            "description": "Spare number 4.",
            "format": "decimal 5dp"
          },
          "spare_number_5": {
            "type": "number",
            "description": "Spare number 5.",
            "format": "decimal 5dp"
          },
          "spare_number_6": {
            "type": "number",
            "description": "Spare number 6.",
            "format": "decimal 5dp"
          },
          "spare_number_7": {
            "type": "number",
            "description": "Spare number 7.",
            "format": "decimal 5dp"
          },
          "spare_number_8": {
            "type": "number",
            "description": "Spare number 8.",
            "format": "decimal 5dp"
          },
          "spare_number_9": {
            "type": "number",
            "description": "Spare number 9.",
            "format": "decimal 5dp"
          },
          "spare_number_10": {
            "type": "number",
            "description": "Spare number 10.",
            "format": "decimal 5dp"
          },
          "spare_date_1": {
            "type": "string",
            "description": "Spare date 1 (UTC).",
            "format": "date-time"
          },
          "spare_date_2": {
            "type": "string",
            "description": "Spare date 2 (UTC).",
            "format": "date-time"
          },
          "spare_date_3": {
            "type": "string",
            "description": "Spare date 3 (UTC).",
            "format": "date-time"
          },
          "spare_date_4": {
            "type": "string",
            "description": "Spare date 4 (UTC).",
            "format": "date-time"
          },
          "spare_date_5": {
            "type": "string",
            "description": "Spare date 5 (UTC).",
            "format": "date-time"
          },
          "spare_bool_1": {
            "type": "boolean",
            "description": "Spare bool 1.",
            "default": false
          },
          "spare_bool_2": {
            "type": "boolean",
            "description": "Spare bool 2.",
            "default": false
          },
          "spare_bool_3": {
            "type": "boolean",
            "description": "Spare bool 3.",
            "default": false
          },
          "spare_bool_4": {
            "type": "boolean",
            "description": "Spare bool 4.",
            "default": false
          },
          "spare_bool_5": {
            "type": "boolean",
            "description": "Spare bool 5.",
            "default": false
          },
          "product": {
            "type": "object",
            "properties": {},
            "description": "Product."
          },
          "warehouse_holding": {
            "type": "object",
            "properties": {},
            "description": "Warehouse holding."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Bins allow you to specify a place in a Warehouse where stock is stored such as a shelf or aisle. Every Warehouse has a single Bin created by default called 'Unspecified'. If you don't want to use bins with your warehouses, all items are stored in the 'Unspecified' bin. You can rename the 'Unspecified' bin to something more meaningful for your company."
      },
      "traceable_adjustment": {
        "required": [
          "product_id"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "issue_status": {
            "maxLength": 50,
            "type": "string",
            "description": "The issue status type. This is used for filtering when amending batch/serial numbers."
          },
          "traceable_adjustment_items": {
            "type": "array",
            "description": "Traceable adjustment items.",
            "items": {
              "type": "object",
              "properties": {
                "identification_no": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "The identification number of the traceable item."
                },
                "quantity": {
                  "type": "number",
                  "description": "Adjustment quantity.",
                  "format": "decimal 5dp"
                },
                "available_quantity": {
                  "type": "number",
                  "description": "Available quantity.",
                  "format": "decimal 5dp",
                  "readOnly": true
                },
                "additional_reference": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "The additional reference for the traceable item."
                },
                "sell_by_date": {
                  "type": "string",
                  "description": "The sell by date of the traceable item.",
                  "format": "date-time"
                },
                "use_by_date": {
                  "type": "string",
                  "description": "The use by date of the traceable item.",
                  "format": "date-time"
                },
                "warehouse_name": {
                  "type": "string",
                  "description": "The name of the warehouse at which the traceable item is kept.",
                  "format": "date-time",
                  "readOnly": true
                },
                "bin_name": {
                  "type": "string",
                  "description": "The name of the bin at which the traceable item is kept.",
                  "format": "date-time",
                  "readOnly": true
                },
                "supplier_reference": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "The supplier reference for traceable items which were recieved from POP order.",
                  "readOnly": true
                },
                "receipt_date": {
                  "type": "string",
                  "description": "The traceable item receipt date.",
                  "format": "date-time",
                  "readOnly": true
                },
                "purchase_order_no": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The purchase order number for traceable items which were recieved from POP order.",
                  "readOnly": true
                },
                "activity_date": {
                  "type": "string",
                  "description": "The date of the traceable movement activity.",
                  "format": "date-time",
                  "readOnly": true
                },
                "is_allocated": {
                  "type": "boolean",
                  "description": "True if the traceable item is allocated; false otherwise.",
                  "readOnly": true
                },
                "traceable_item_id": {
                  "type": "integer",
                  "description": "Traceable item record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "split_batch_items": {
                  "type": "array",
                  "description": "Split batch items",
                  "items": {
                    "type": "object",
                    "properties": {
                      "identification_no": {
                        "maxLength": 30,
                        "type": "string",
                        "description": "The identification number of the traceable item."
                      },
                      "quantity": {
                        "type": "number",
                        "description": "Adjustment quantity.",
                        "format": "decimal 5dp"
                      },
                      "additional_reference": {
                        "maxLength": 30,
                        "type": "string",
                        "description": "The additional reference for the traceable item."
                      },
                      "sell_by_date": {
                        "type": "string",
                        "description": "The sell by date of the traceable item.",
                        "format": "date-time"
                      },
                      "use_by_date": {
                        "type": "string",
                        "description": "The use by date of the traceable item.",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "A traceable adjustment describes the traceable items which take part in Stock adjustments. (Sage 200 Professional only).",
        "x-sage-professional-only": true
      },
      "traceable_items_assign_traceable_items_request": {
        "required": [
          "product_id"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          }
        },
        "description": "Returns a list of unassigned traceable items for a product."
      },
      "traceable_items_amend_traceable_items_request": {
        "required": [
          "product_id"
        ],
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          }
        },
        "description": "Returns a list of assigned traceable items for a product that can be amended."
      },
      "product_duplicate_flags": {
        "required": [
          "source_id"
        ],
        "type": "object",
        "properties": {
          "source_id": {
            "type": "integer",
            "description": "Product unique Id.",
            "format": "int64"
          },
          "new_code": {
            "maxLength": 30,
            "type": "string",
            "description": "Product code."
          },
          "new_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Product name."
          },
          "locations": {
            "type": "boolean",
            "description": "Indicates whether to duplicate locations for the product."
          },
          "location_stocking_levels": {
            "type": "boolean",
            "description": "Indicates whether to duplicate warehouse stocking levels for the product."
          },
          "units": {
            "type": "boolean",
            "description": "Indicates whether to duplicate units of measure for the product (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "alternative_items": {
            "type": "boolean",
            "description": "Indicates whether to duplicate alternative items for the product."
          },
          "cross_selling_items": {
            "type": "boolean",
            "description": "Indicates whether to duplicate cross-selling items for the product."
          },
          "attachments": {
            "type": "boolean",
            "description": "Indicates whether to duplicate attachments for the product."
          },
          "memos": {
            "type": "boolean",
            "description": "Indicates whether to duplicate memos for the product."
          },
          "suppliers": {
            "type": "boolean",
            "description": "Indicates whether to duplicate suppliers for the product."
          }
        },
        "description": "Returns a duplicate product using the product options specified."
      },
      "product_warehouse_bin_view": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "warehouse_id": {
            "type": "integer",
            "description": "Warehouse record Id.",
            "format": "int64"
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Warehouse name."
          },
          "bin_holding_id": {
            "type": "integer",
            "description": "Bin record Id.",
            "format": "int64"
          },
          "bin_holding_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Bin name."
          }
        },
        "description": "This resource returns a view of warehouses and bins for a product. This view filters out the return and direct delivery warehouses. The default sort (orderby) field are by 'warehouse_name' and 'bin_holding_name' ascending."
      },
      "product_warehouse_view": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "Product record Id.",
            "format": "int64"
          },
          "warehouse_holding_id": {
            "type": "integer",
            "description": "Warehouse holding record Id.",
            "format": "int64"
          },
          "warehouse_id": {
            "type": "integer",
            "description": "Warehouse record Id.",
            "format": "int64"
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Warehouse name."
          },
          "use_for_sales_trading": {
            "type": "boolean",
            "description": "Indicates whether this warehouse is used to sell stock items."
          },
          "free_stock_quantity": {
            "type": "number",
            "description": "Free stock quantity.",
            "format": "decimal 5dp"
          }
        },
        "description": "This resource returns a view of warehouses for a product. This view filters out the return and direct delivery warehouses. The default sort (orderby) field is by 'warehouse_name' ascending."
      },
      "product_sales_figures": {
        "type": "object",
        "properties": {
          "quantity_sold_this_period": {
            "type": "number",
            "description": "Quantity sold this period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "value_sold_this_period": {
            "type": "number",
            "description": "Value sold this period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_sold_last_period": {
            "type": "number",
            "description": "Quantity sold last period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "value_sold_last_period": {
            "type": "number",
            "description": "Value sold last period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "periods": {
            "type": "array",
            "description": "A collection of sales period trading figures. Periods are expanded by default.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/product_sales_period_figures"
            }
          }
        },
        "description": "Sales trading figures are the quantities and value of goods sold in base currency. These figures are available if a stock item is set to maintain a movement history. Trading figures are not available for phantom BOM built items.<P>This endpoint has custom filtering on the following fields: 'no_of_periods', 'warehouse_name', 'source_area_reference' and analysis codes 1-20 (analysis_code_n).</P>"
      },
      "product_sales_period_figures": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Period start date.",
            "format": "date-time",
            "readOnly": true
          },
          "end_date": {
            "type": "string",
            "description": "Period end date.",
            "format": "date-time",
            "readOnly": true
          },
          "period": {
            "maxLength": 10,
            "type": "string",
            "description": "Period month full name."
          },
          "year": {
            "maxLength": 4,
            "type": "string",
            "description": "Period year."
          },
          "quantity_sold": {
            "type": "number",
            "description": "Quantity sold.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "value_sold": {
            "type": "number",
            "description": "Value sold.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "average_selling_price": {
            "type": "number",
            "description": "Average selling price.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "cost_of_sale_value": {
            "type": "number",
            "description": "Cost of sales.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "profit_value": {
            "type": "number",
            "description": "Value of profit.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "profit_percent": {
            "type": "number",
            "description": "Percentage of profit.",
            "format": "decimal 2dp",
            "readOnly": true
          }
        },
        "description": "Sales period trading figures."
      },
      "product_purchase_figures": {
        "type": "object",
        "properties": {
          "quantity_bought_this_period": {
            "type": "number",
            "description": "Quantity bought this period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "value_bought_this_period": {
            "type": "number",
            "description": "Value bought this period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_bought_last_period": {
            "type": "number",
            "description": "Quantity bought last period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "value_bought_last_period": {
            "type": "number",
            "description": "Value bought last period.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "periods": {
            "type": "array",
            "description": "A collection of purchase period trading figures. Periods are expanded by default.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/product_purchase_period_figures"
            }
          }
        },
        "description": "Purchase trading figures are the quantities and value of goods bought in base currency. These figures are available if a stock item is set to maintain a movement history. Trading figures are not available for phantom BOM built items.<P>This endpoint has custom filtering on the following fields: 'no_of_periods', 'warehouse_name', 'source_area_reference' and analysis codes 1-20 (analysis_code_n).</P>"
      },
      "product_purchase_period_figures": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Period start date.",
            "format": "date-time",
            "readOnly": true
          },
          "end_date": {
            "type": "string",
            "description": "Period end date.",
            "format": "date-time",
            "readOnly": true
          },
          "period": {
            "maxLength": 10,
            "type": "string",
            "description": "Period month full name."
          },
          "year": {
            "maxLength": 4,
            "type": "string",
            "description": "Period year."
          },
          "quantity_bought": {
            "type": "number",
            "description": "Quantity purchased.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "value_bought": {
            "type": "number",
            "description": "Value purchased.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "average_buying_price": {
            "type": "number",
            "description": "Average buying price.",
            "format": "decimal 5dp",
            "readOnly": true
          }
        },
        "description": "Purchase period trading figures."
      },
      "entry_source_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Entry source types are used to describe the source module that was used to create a movement. Entry source types can be 'EnumEntrySourceTypeStock', 'EnumEntrySourceTypeSOP', 'EnumEntrySourceTypePOP', 'EnumEntrySourceTypeBOM', 'EnumEntrySourceTypeManual'.<P>The API endpoint returns details of the entry source types that can be used.</P>"
      },
      "source_area_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Source area types are used to describe the area or account type applicable to a stock transaction. Source area types can be 'EnumSourceAreaTypeSupplier', 'EnumSourceAreaTypeCustomer', 'EnumSourceAreaTypeInternal', 'EnumSourceAreaTypeWriteOff', 'EnumSourceAreaTypeOpeningBalance', 'EnumSourceAreaTypeBOM'.<P>The API endpoint returns details of the source area types that can be used.</P>"
      },
      "traceable_item_history_record": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Product traceable history record Id.",
            "format": "int64",
            "readOnly": true
          },
          "trader_reference": {
            "maxLength": 60,
            "type": "string",
            "description": "The trader reference of the product history record.",
            "readOnly": true
          },
          "trader_name": {
            "maxLength": 60,
            "type": "string",
            "description": "The trader name of the product history record.",
            "readOnly": true
          },
          "sales_purchase_order_no": {
            "maxLength": 20,
            "type": "string",
            "description": "The order number of the product history record.",
            "readOnly": true
          },
          "despatch_receipt_grn_no": {
            "maxLength": 20,
            "type": "string",
            "description": "The GRN number of the product history record.",
            "readOnly": true
          },
          "received_issued_date": {
            "type": "string",
            "description": "The date of the product history record.",
            "format": "date-time",
            "readOnly": true
          },
          "received_issued_by": {
            "maxLength": 20,
            "type": "string",
            "description": "The user that created the product history record.",
            "readOnly": true
          },
          "transaction_history_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The transaction history type of the product history record.",
            "readOnly": true
          },
          "received_issued_quantity": {
            "type": "number",
            "description": "The quantity of the product history record.",
            "format": "decimal 5dp",
            "readOnly": true
          }
        },
        "description": "This resource returns a movement history record for a product. There is no default sort (orderby). (Sage 200 Professional only).",
        "x-sage-professional-only": true
      },
      "traceable_item_allocation_record": {
        "type": "object",
        "properties": {
          "traceable_bin_item_id": {
            "type": "integer",
            "description": "Traceable bin item record Id.",
            "format": "int64",
            "readOnly": true
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The warehouse name of the allocation of a product.",
            "readOnly": true
          },
          "bin_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The bin name within the warehouse of the allocation of a product.",
            "readOnly": true
          },
          "traceable_allocation_bal_id": {
            "type": "integer",
            "description": "Traceable allocation balance record Id.",
            "format": "int64",
            "readOnly": true
          },
          "allocation_balance_id": {
            "type": "integer",
            "description": "Allocation balance record Id.",
            "format": "int64",
            "readOnly": true
          },
          "allocated_to": {
            "maxLength": 60,
            "type": "string",
            "description": "The reference of what the product is allocated to.",
            "readOnly": true
          },
          "allocation_date": {
            "type": "string",
            "description": "The allocation date of the allocation record.",
            "format": "date-time",
            "readOnly": true
          },
          "order_no": {
            "maxLength": 20,
            "type": "string",
            "description": "The order number of the allocation record.",
            "readOnly": true
          },
          "allocated_quantity": {
            "type": "number",
            "description": "The allocated quantity of the allocation record.",
            "format": "decimal 5dp",
            "readOnly": true
          }
        },
        "description": "This resource returns a allocation record for a product. There is no default sort (orderby). (Sage 200 Professional only).",
        "x-sage-professional-only": true
      },
      "traceable_item_location_record": {
        "type": "object",
        "properties": {
          "traceable_bin_item_id": {
            "type": "integer",
            "description": "Traceable bin item record Id.",
            "format": "int64",
            "readOnly": true
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The warehouse name of the location of a product.",
            "readOnly": true
          },
          "bin_item_id": {
            "type": "integer",
            "description": "Bin item record Id.",
            "format": "int64",
            "readOnly": true
          },
          "bin_name": {
            "maxLength": 20,
            "type": "string",
            "description": "The bin name within the warehouse of the location of a product.",
            "readOnly": true
          },
          "free_stock_available": {
            "type": "number",
            "description": "Total goods in quantity minus goods out quantity minus allocated quantity minus reserved quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "bin_quantity_in_stock": {
            "type": "number",
            "description": "Quantity in stock for this traceable bin item.",
            "format": "decimal 5dp",
            "readOnly": true
          }
        },
        "description": "This resource returns a location record for a product. There is no default sort (orderby). (Sage 200 Professional only).",
        "x-sage-professional-only": true
      },
      "traceable_issue_status_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Traceable issue status types are used to describe the issued status of traceable items. Traceable issue status types can be 'All', 'Issued Only', or 'Not Issued'.<P>The API endpoint returns details of the traceable issue status types.</P>"
      },
      "stocktake_criteria_template": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Stocktake criteria template Id.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "The stocktake criteria template name."
          },
          "last_sold_date": {
            "type": "string",
            "description": "Include stock items by the date they were last sold.",
            "format": "date-time"
          },
          "due_date": {
            "type": "string",
            "description": "Include stock items by when they are due to have a stocktake.",
            "format": "date-time"
          },
          "stocktake_traceable_type": {
            "maxLength": 50,
            "type": "string",
            "description": "Include only traceable or non-traceable stock items."
          },
          "stock_value_type": {
            "maxLength": 50,
            "type": "string",
            "description": "Include stock items by a selected stock value."
          },
          "stock_value_number_of_items": {
            "type": "integer",
            "description": "Number of stock items to include on the stocktake.",
            "format": "int32",
            "default": 100
          },
          "quantity_from": {
            "type": "number",
            "description": "Include stock items by the amount in stock.",
            "format": "decimal 5dp"
          },
          "quantity_to": {
            "type": "number",
            "description": "Include stock items by the amount in stock.",
            "format": "decimal 5dp"
          },
          "product_groups": {
            "type": "array",
            "description": "Include stock items that are associated with these product groups.",
            "items": {
              "$ref": "#/components/schemas/lookup_product_group"
            }
          }
        },
        "description": "Stocktake criteria templates are a set of criteria used for auto selection of stock items to add to a stocktake sheet."
      },
      "stocktake_traceable_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Stocktake traceable types are used to select stock items by the stock items traceable type to be included on a stocktake. Stocktake traceable types can be 'Non-Traceable', 'Serial Numbered', 'Batch Numbered' or 'Batch and Serial'.<P>The API endpoint returns details of the stocktake traceable types that can be used.</P>"
      },
      "stocktake_selector_value_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Stocktake selector value types are used to select stock items by stock value to be included on a stocktake.<P>The API endpoint returns details of the stocktake selector value types that can be used.</P>"
      },
      "stocktake_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Stocktake record Id.",
            "format": "int64"
          },
          "stocktake_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Stocktake name."
          },
          "warehouse_id": {
            "type": "integer",
            "description": "Warehouse record Id.",
            "format": "int64"
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Warehouse name."
          },
          "stocktake_date": {
            "type": "string",
            "description": "The created or last updated date of the stocktake, or the current stocktake date if counts have been entered.",
            "format": "date-time"
          },
          "stocktake_type_id": {
            "type": "integer",
            "description": "The type of counting method for the stocktake. E.g. by Stock Item, or by Bin.",
            "format": "int64"
          },
          "stocktake_status_id": {
            "type": "integer",
            "description": "The current status of the stocktake.",
            "format": "int64"
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Gets the collection of stocktakes including warehouse name. The default sort (orderby) field is by 'stocktake_name' ascending."
      },
      "stocktake_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Stocktake method for selecting stocktake items. Stocktake type can be 'By Stock Item', or 'By Bin'.<P>The API endpoint returns details of the stocktake types that can be used.</P>"
      },
      "stocktake_status_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Stocktake status types describe the possible states in which a stocktake can be. Stocktake status type can be 'No stocktake', 'Selecting items', 'Sheets printed', 'Entering counts', or 'Complete'.<P>The API endpoint returns details of the stocktake status types that can be used.</P>"
      },
      "discrepancy_status_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Discrepancy status types describe the possible states of a stocktake discrepancy. Discrepancy status type can be 'No Discrepancy', 'Discrepancy Found', or 'Discrepancy Resolved'.<P>The API endpoint returns details of the discrepancy status types that can be used.</P>"
      },
      "stocktake": {
        "required": [
          "warehouse_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Stocktake record Id. Note: This is required for other POST operations that retrieve stocktake records.",
            "format": "int64",
            "readOnly": true
          },
          "stocktake_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Stocktake name."
          },
          "warehouse_id": {
            "type": "integer",
            "description": "Warehouse record Id. Note: This is required for getting a list of items for a new stocktake.",
            "format": "int64"
          },
          "warehouse_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Warehouse name.",
            "readOnly": true
          },
          "stocktake_date": {
            "type": "string",
            "description": "The created or last updated date of the stocktake, or the current stocktake date if counts have been entered.",
            "format": "date-time"
          },
          "stocktake_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The type of counting method for the stocktake; e.g. by Stock Item, or by Bin. Note: If other stocktakes exist for the same warehouse, this value can't be changed."
          },
          "stocktake_status": {
            "maxLength": 50,
            "type": "string",
            "description": "The current status of the stocktake.",
            "readOnly": true
          },
          "exclude_inactive_stock": {
            "type": "boolean",
            "description": "Whether to exclude inactive stock items from the list of items.",
            "default": false
          },
          "show_expected_quantities": {
            "type": "boolean",
            "description": "Whether to show expected quantities when entering counts.",
            "default": false
          },
          "stock_variance_nominal_code_id": {
            "type": "integer",
            "description": "Stock variance nominal record Id. Note: for setting this, the status must be at Requires Approval.",
            "format": "int64"
          },
          "stock_variance_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "Stock variance nominal code.",
            "readOnly": true
          },
          "nominal_narrative": {
            "maxLength": 6000,
            "type": "string",
            "description": "The nominal narrative. Note: for setting this, the status must be at Requires Approval."
          },
          "can_modify_stocktake_type": {
            "type": "boolean",
            "description": "Indicates whether the stocktake type can be changed.",
            "readOnly": true,
            "default": false
          },
          "advance_status": {
            "type": "boolean",
            "description": "Whether to advance to the next status.",
            "default": false
          },
          "pre_fill_actual_with_expected": {
            "type": "boolean",
            "description": "Whether to pre-fill actual count values with expected values.",
            "default": false
          },
          "stocktake_items": {
            "type": "array",
            "description": "Stocktake items.  Note: this collection is only used when the status is at Selecting Items.",
            "items": {
              "type": "object",
              "properties": {
                "stocktake_item_id": {
                  "type": "integer",
                  "description": "Stocktake item record Id. Note: this Id is only set when an item has been selected for a stocktake.",
                  "format": "int64",
                  "readOnly": true
                },
                "warehouse_holding_id": {
                  "type": "integer",
                  "description": "Warehouse holding record Id",
                  "format": "int64",
                  "readOnly": true
                },
                "bin_name": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Bin name. Note: this property is used when the stocktake type is By Bin.",
                  "readOnly": true
                },
                "item_code": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Stock item code.",
                  "readOnly": true
                },
                "item_name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Stock item name.",
                  "readOnly": true
                },
                "stock_unit_name": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Stock unit name.",
                  "readOnly": true
                },
                "traceable_type": {
                  "maxLength": 50,
                  "type": "string",
                  "description": "The traceable type of the stock item",
                  "readOnly": true
                },
                "product_group_id": {
                  "type": "integer",
                  "description": "Product group record Id",
                  "format": "int64",
                  "readOnly": true
                },
                "product_group_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Product group code.",
                  "readOnly": true
                },
                "allows_negative_stock": {
                  "type": "boolean",
                  "description": "Indicates whether to allow stock levels to go negative from the product group.",
                  "readOnly": true
                },
                "quantity_in_stock": {
                  "type": "number",
                  "description": "Stock item quantity in stock.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "value_of_stock": {
                  "type": "number",
                  "description": "Stock item value of stock.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "average_buying_price": {
                  "type": "number",
                  "description": "Stock item average buying price.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "stocktake_cycle_period": {
                  "type": "integer",
                  "description": "The stocktake cycle number for this stock item.",
                  "format": "int32",
                  "readOnly": true
                },
                "last_stocktake": {
                  "type": "string",
                  "description": "The date of the last stocktake.",
                  "format": "date-time",
                  "readOnly": true
                },
                "date_of_last_sale": {
                  "type": "string",
                  "description": "The date the stock item was last sold.",
                  "format": "date-time",
                  "readOnly": true
                },
                "is_selected": {
                  "type": "boolean",
                  "description": "Whether to select the stock item for the stocktake.",
                  "default": false
                }
              }
            }
          },
          "failed_stocktake_items": {
            "type": "array",
            "description": "Failed Stocktake items. Note: this collection is only used when the status is at Selecting Items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "item_code": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Stock item code.",
                  "readOnly": true
                },
                "bin_name": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Bin name.",
                  "readOnly": true
                }
              }
            }
          },
          "stocktake_count_sheet_items": {
            "type": "array",
            "description": "Stocktake count sheet items. Note: this collection is only used when the status has advanced past Selecting Items.",
            "items": {
              "$ref": "#/components/schemas/stocktake_count_sheet_item"
            }
          }
        },
        "description": "Stocktakes adjust the recorded stock levels in Sage 200 with actual stock levels in order to maintain accurate stock records. Stocktakes are recorded per warehouse. Items for a stocktake can be selected individually (by Stock Item) or by the bin they are stored in."
      },
      "stocktake_count_sheet_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Stocktake count sheet item record Id.",
            "format": "int64",
            "readOnly": true
          },
          "stocktake_id": {
            "type": "integer",
            "description": "Stocktake record Id.",
            "format": "int64",
            "readOnly": true
          },
          "bin_item_id": {
            "type": "integer",
            "description": "Bin record Id.",
            "format": "int64",
            "readOnly": true
          },
          "bin_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Bin name.",
            "readOnly": true
          },
          "item_code": {
            "maxLength": 30,
            "type": "string",
            "description": "Stock item code.",
            "readOnly": true
          },
          "item_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Stock item name.",
            "readOnly": true
          },
          "stock_unit_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Stock unit name.",
            "readOnly": true
          },
          "include_nos_on_count_sheets": {
            "type": "boolean",
            "description": "Indicates whether individual batch and serial numbers appear on count sheets.",
            "readOnly": true
          },
          "traceable_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The traceable type of the stock item.",
            "readOnly": true
          },
          "costing_method_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The costing method type of the product group.",
            "readOnly": true
          },
          "standard_cost": {
            "type": "number",
            "description": "The standard cost of the stock item.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "average_buying_price": {
            "type": "number",
            "description": "The average buying price of the stock item.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "recorded_quantity_in_stock": {
            "type": "number",
            "description": "The recorded stock quantity. Note: This is returned only if the stocktakes show_expected_quantity is true.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "has_negative_quantity_in_stock": {
            "type": "boolean",
            "description": "Indicates whether recorded stock quantity is negative.",
            "readOnly": true
          },
          "quantity_on_pop_order": {
            "type": "number",
            "description": "The quantity on order in POP.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "quantity_allocated": {
            "type": "number",
            "description": "Total allocated stock, SOP and bom quantity.",
            "format": "decimal 5dp",
            "readOnly": true
          },
          "actual_quantity_entered": {
            "type": "boolean",
            "description": "Indicates whether actual stock quantity has been entered."
          },
          "actual_quantity_in_stock": {
            "type": "number",
            "description": "The actual stock quantity.",
            "format": "decimal 5dp"
          },
          "discrepancy_status": {
            "maxLength": 50,
            "type": "string",
            "description": "The status of the discrepancy.",
            "readOnly": true
          },
          "discrepancy_narrative": {
            "maxLength": 6000,
            "type": "string",
            "description": "Discrepancy narrative."
          },
          "allows_negative_stock": {
            "type": "boolean",
            "description": "Indicates whether to allow stock levels to go negative from the product group.",
            "readOnly": true
          },
          "stocktake_trace_count_sheet_items": {
            "type": "array",
            "description": "Stocktake traceable count sheet items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Stocktake traceable count sheet item record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "stocktake_count_sheet_item_id": {
                  "type": "integer",
                  "description": "Stocktake count sheet item record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "identification_no": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "The identification number of the traceable item.",
                  "readOnly": true
                }
              }
            }
          }
        },
        "description": "Stocktake count sheet items."
      },
      "pricing_source_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "The pricing source type for product suppliers. Pricing source type can be 'LastBuyingPrice', or 'ListPrice'.<P>The API endpoint returns details of the pricing source types that can be used.</P>"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}