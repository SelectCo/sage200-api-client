{
  "openapi": "3.0.1",
  "info": {
    "title": "Sage 200 v1 Extra Cash Book",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.columbus.sage.com/uk/sage200extra/accounts/v1/"
    }
  ],
  "tags": [
    {
      "name": "Bank Account Types",
      "description": ""
    },
    {
      "name": "Bank Entry Types",
      "description": ""
    },
    {
      "name": "Bank Payment",
      "description": ""
    },
    {
      "name": "Bank Posted Transactions",
      "description": ""
    },
    {
      "name": "Bank Receipt",
      "description": ""
    },
    {
      "name": "Bank Transfer",
      "description": ""
    },
    {
      "name": "Bank Views",
      "description": ""
    },
    {
      "name": "Banks",
      "description": ""
    },
    {
      "name": "Cash Book Settings",
      "description": ""
    },
    {
      "name": "Electronic Bank Function Types",
      "description": ""
    },
    {
      "name": "Lookup Banks",
      "description": ""
    }
  ],
  "paths": {
    "/banks": {
      "get": {
        "tags": [
          "Banks"
        ],
        "summary": "Banks",
        "description": "Bank accounts can be created in Sage 200 for any type of account that money is paid in/out of, for example, cash, credit cards or, business current account. Bank accounts can be in any currency and all balances are recorded in the currency specific to that bank account.",
        "operationId": "GetBanks",
        "responses": {
          "200": {
            "description": "The list of banks has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bank"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Banks"
        ],
        "summary": "Banks",
        "description": "Bank accounts can be created in Sage 200 for any type of account that money is paid in/out of, for example, cash, credit cards or, business current account. Bank accounts can be in any currency and all balances are recorded in the currency specific to that bank account.",
        "operationId": "PostBank",
        "requestBody": {
          "description": "Bank to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bank"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bank was created. Response body will include the department details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Bank"
      },
      "x-sage-pathtitle": "Banks",
      "x-sage-changelog": [
        {
          "date": "25/04/2018",
          "title": "Extended operation",
          "description": "This operation now includes the field 'account_status_type', which represents the status of the bank account. This can either be 'Active' or 'Hidden'."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'bank_account_nominal_reference', 'bank_account_nominal_cost_centre', 'bank_account_nominal_department', 'bank_charges_nominal_reference', 'bank_charges_nominal_cost_centre', 'bank_charges_nominal_department', 'exchange_diff_nominal_reference', 'exchange_diff_nominal_cost_centre', 'exchange_diff_nominal_department', 'bank_account_nominal_code', 'bank_charges_nominal_code', 'exchange_diff_nominal_code' and 'date_time_created'."
        },
        {
          "date": "14/08/2023",
          "title": "Extended operation",
          "description": "This endpoint was enhanced with a PUT by Id operation."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'emails', 'memos' and 'websites'."
        }
      ]
    },
    "/banks/{Id}": {
      "get": {
        "tags": [
          "Banks"
        ],
        "summary": "Bank",
        "description": "Bank accounts can be created in Sage 200 for any type of account that money is paid in/out of, for example, cash, credit cards or, business current account. Bank accounts can be in any currency and all balances are recorded in the currency specific to that bank account.",
        "operationId": "GetBank",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the bank.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of bank successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Banks"
        ],
        "summary": "Bank",
        "description": "Bank accounts can be created in Sage 200 for any type of account that money is paid in/out of, for example, cash, credit cards or, business current account. Bank accounts can be in any currency and all balances are recorded in the currency specific to that bank account.",
        "operationId": "PutBank",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the bank.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Bank account to update in Sage 200 Cash Book.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bank"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bank account was updated. Response body will include the bank account details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Bank"
      },
      "delete": {
        "tags": [
          "Banks"
        ],
        "summary": "Bank",
        "description": "Bank accounts can be created in Sage 200 for any type of account that money is paid in/out of, for example, cash, credit cards or, business current account. Bank accounts can be in any currency and all balances are recorded in the currency specific to that bank account.",
        "operationId": "DeleteBank",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the bank.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bank was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bank"
    },
    "/bank_account_types": {
      "get": {
        "tags": [
          "Bank Account Types"
        ],
        "summary": "Bank Account Types",
        "description": "When working with bank accounts, it is important to know what type of bank account it is.<br /><br /> Use this API endpoint to return the list of bank account types that can be used.",
        "operationId": "GetBankAccountTypes",
        "responses": {
          "200": {
            "description": "The list of bank account types has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bank_account_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bank account types"
    },
    "/electronic_bank_function_types": {
      "get": {
        "tags": [
          "Electronic Bank Function Types"
        ],
        "summary": "Electronic Bank Function Types",
        "description": "Use this API endpoint to return the list of e-banking function types that can be used with e-banking.",
        "operationId": "GetElectronicBankFunctionTypes",
        "responses": {
          "200": {
            "description": "The list of electronic bank function types has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/electronic_bank_function_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Electronic bank function types",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/bank_entry_types": {
      "get": {
        "tags": [
          "Bank Entry Types"
        ],
        "summary": "Bank Entry Types",
        "description": "When working with bank entries, it is important to know what type of bank entry it is.<br /><br />Use this API endpoint to return the list of bank entry types that can be used.",
        "operationId": "GetBankEntryTypes",
        "responses": {
          "200": {
            "description": "The list of bank entry types has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bank_entry_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bank entry types"
    },
    "/lookup_banks": {
      "get": {
        "tags": [
          "Lookup Banks"
        ],
        "summary": "Lookup Banks",
        "description": "Gets a subset of bank account information for populating a lookup.",
        "operationId": "GetLookupBanks",
        "responses": {
          "200": {
            "description": "Get a collection of Bank Accounts for populating a lookup.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/lookup_bank"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Lookup Banks",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/bank_receipt": {
      "post": {
        "tags": [
          "Bank Receipt"
        ],
        "summary": "Bank Receipt",
        "description": "Receipts are used to record money received against a bank account (Sage 200 Standard and versions of Professional released after July 2017). In the Sage 200 app, this is equivalent to making a Nominal Vatable Receipt or a Non-Vatable Receipt. <br /><br />Posting a bank receipt does not actually create a 'bank receipt' entity, but a Posted Transaction of type 'BankAccountEntryType.Receipt', therefore it is not possible to 'get' a bank  receipt using the same API endpoint after it has been posted. Posting a bank receipt returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting bank receipts via the API, at least one bank account must exist within Sage 200.",
        "operationId": "PostBankReceipt",
        "requestBody": {
          "description": "Bank receipt to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bank_receipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bank receipt was created. Response body will include the urn of the transactions created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/urn"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Bank receipt"
      },
      "x-sage-pathtitle": "Bank receipt"
    },
    "/bank_payment": {
      "post": {
        "tags": [
          "Bank Payment"
        ],
        "summary": "Bank Payment",
        "description": "Payments are used to record money paid from a bank account (Sage 200 Standard and versions of Professional released after July 2017). In the Sage 200 app, this is equivalent to making a Nominal Vatable Payment or a Non-Vatable Payment. <br /><br />Posting a bank payment does not actually create a 'bank payment' entity, but a Posted Transaction of type 'BankAccountEntryType.Payment', therefore it is not possible to 'get' a bank payment using the same API endpoint after it has been posted. Posting a bank payment returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting a bank payment via the API, at least one bank account must exist within Sage 200.",
        "operationId": "PostBankPayment",
        "requestBody": {
          "description": "Bank payment to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bank_payment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bank payment was created. Response body will include the urn of the transactions created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/urn"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Bank payment"
      },
      "x-sage-pathtitle": "Bank payment"
    },
    "/bank_views": {
      "get": {
        "tags": [
          "Bank Views"
        ],
        "summary": "Bank Views",
        "description": "This resource returns the details of all bank accounts. The default sort (orderby) field is by 'code' ascending.",
        "operationId": "GetBankViews",
        "responses": {
          "200": {
            "description": "The list of bank accounts has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bank_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bank views",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/bank_transfer": {
      "post": {
        "tags": [
          "Bank Transfer"
        ],
        "summary": "Transfer Money From One Bank To Another.",
        "description": "Transfer money from one bank to another.",
        "operationId": "PostBankTransfer",
        "requestBody": {
          "description": "Details of the bank transfer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bank_transfer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The bank transfer was successful.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/bank_transfer"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "bank_transfer"
      },
      "x-sage-pathtitle": "Transfer money from one bank to another."
    },
    "/bank_posted_transactions": {
      "get": {
        "tags": [
          "Bank Posted Transactions"
        ],
        "summary": "Bank Posted Transactions",
        "description": "Bank posted transactions are created when transactions such as receipts or payments are posted against the Cash Book.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked.",
        "operationId": "GetBankPostedTransactions",
        "responses": {
          "200": {
            "description": "Get a collection of posted bank transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bank_posted_transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bank posted transactions",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        },
        {
          "date": "14/12/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'last_statement_date', 'statement_page_number' and 'source'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'cheque_currency'."
        }
      ]
    },
    "/bank_posted_transactions/{Id}": {
      "get": {
        "tags": [
          "Bank Posted Transactions"
        ],
        "summary": "Bank Posted Transaction",
        "description": "Bank posted transactions are created when transactions such as receipts or payments are posted against the Cash Book.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked.",
        "operationId": "GetBankPostedTransaction",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the transaction.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single posted bank transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank_posted_transaction"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bank posted transaction"
    },
    "/banks/{bankId}/bank_posted_transactions": {
      "get": {
        "tags": [
          "Bank Posted Transactions"
        ],
        "summary": "Bank Posted Transactions For Bank Account",
        "description": "Bank posted transactions are created when transactions such as receipts or payments are posted against the Cash Book.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked.",
        "operationId": "GetBankPostedTransactionsForBankAccount",
        "parameters": [
          {
            "name": "bankId",
            "in": "path",
            "description": "Unique Id of the bank account.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return transactions for a single bank account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bank_posted_transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Bank posted transactions for bank account"
    },
    "/cash_book_settings": {
      "get": {
        "tags": [
          "Cash Book Settings"
        ],
        "summary": "Cash Book Settings",
        "description": "The Cash Book settings are used to configure application behaviour with respect to the Cash Book module.<br/><br/>Settings include the default bank account.",
        "operationId": "GetCashBookSettings",
        "responses": {
          "200": {
            "description": "Cash Book settings successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cash_book_settings"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Cash Book settings",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/cash_book_settings/{Id}": {
      "get": {
        "tags": [
          "Cash Book Settings"
        ],
        "summary": "Cash Book Setting",
        "description": "The Cash Book settings are used to configure application behaviour with respect to the Cash Book module.<br/><br/>Settings include the default bank account.",
        "operationId": "GetCashBookSetting",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the Cash Book settings.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cash Book settings successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cash_book_settings"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Cash Book setting"
    }
  },
  "components": {
    "schemas": {
      "bank": {
        "required": [
          "code",
          "sort_code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Bank account record Id.",
            "format": "int64",
            "readOnly": true
          },
          "code": {
            "maxLength": 8,
            "type": "string",
            "description": "Bank account code."
          },
          "description": {
            "maxLength": 60,
            "type": "string",
            "description": "Bank description."
          },
          "sort_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Bank sort code."
          },
          "account_no": {
            "maxLength": 20,
            "type": "string",
            "description": "Bank account number."
          },
          "bank_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Bank name."
          },
          "account_type": {
            "maxLength": 20,
            "type": "string",
            "description": "Bank account type."
          },
          "account_status_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The status of the bank account (Sage 200 Standard and versions of Professional released after February 2018). For example, this can either be 'Active' or 'Hidden'.",
            "default": "AccountStatusActive"
          },
          "balance": {
            "type": "number",
            "description": "Bank balance.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "balance_in_base": {
            "type": "number",
            "description": "Bank balance in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "overdraft_limit": {
            "type": "number",
            "description": "Bank overdraft limit.",
            "format": "decimal 2dp"
          },
          "account_name": {
            "maxLength": 50,
            "type": "string",
            "description": "Account name."
          },
          "iban": {
            "maxLength": 40,
            "type": "string",
            "description": "International bank account number."
          },
          "bic": {
            "maxLength": 11,
            "type": "string",
            "description": "Bank identifier code."
          },
          "statement_balance": {
            "type": "number",
            "description": "Last statement balance.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "statement_date": {
            "type": "string",
            "description": "Last statement date.",
            "format": "date-time",
            "readOnly": true
          },
          "account_currency_id": {
            "type": "integer",
            "description": "Currency record Id.",
            "format": "int64"
          },
          "bank_account_nominal_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "The banks bank account nominal code reference."
          },
          "bank_account_nominal_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank account nominal code cost centre code."
          },
          "bank_account_nominal_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank account nominal code department code."
          },
          "bank_charges_nominal_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "The banks bank charges nominal code reference."
          },
          "bank_charges_nominal_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank charges nominal code cost centre code."
          },
          "bank_charges_nominal_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank charges nominal code department code."
          },
          "exchange_diff_nominal_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "The banks exchange differences nominal code reference."
          },
          "exchange_diff_nominal_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks exchange differences nominal code cost centre code."
          },
          "exchange_diff_nominal_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks exchange differences nominal code department code."
          },
          "account_currency": {
            "type": "object",
            "properties": {},
            "description": "Account currency.",
            "readOnly": true
          },
          "bank_account_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The banks bank account nominal code.",
            "readOnly": true
          },
          "bank_address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Bank addresss record Id.",
                "format": "int64",
                "readOnly": true
              },
              "contact": {
                "maxLength": 60,
                "type": "string",
                "description": "Address contact name."
              },
              "country": {
                "maxLength": 60,
                "type": "string",
                "description": "Address country."
              },
              "address_1": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 1."
              },
              "address_2": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 2."
              },
              "address_3": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 3."
              },
              "address_4": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 4."
              },
              "city": {
                "maxLength": 60,
                "type": "string",
                "description": "City."
              },
              "county": {
                "maxLength": 60,
                "type": "string",
                "description": "County."
              },
              "postcode": {
                "maxLength": 10,
                "type": "string",
                "description": "Postcode."
              },
              "date_time_created": {
                "type": "string",
                "description": "The date and time this entity was created (UTC).",
                "format": "date-time",
                "readOnly": true
              },
              "date_time_updated": {
                "type": "string",
                "description": "The date and time this entity was last updated (UTC).",
                "format": "date-time",
                "readOnly": true
              }
            },
            "description": "Bank address."
          },
          "bank_charges_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The banks bank charges nominal code.",
            "readOnly": true
          },
          "exchange_diff_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The banks exchange differences nominal code.",
            "readOnly": true
          },
          "bank_contacts": {
            "type": "array",
            "description": "Collection of bank contact values.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Bank account contact record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "bank_id": {
                  "type": "integer",
                  "description": "Bank account record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "type": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The type of the contact value."
                },
                "address": {
                  "maxLength": 200,
                  "type": "string",
                  "description": "Bank contact value."
                },
                "is_to_delete": {
                  "type": "boolean",
                  "description": "When updating an existing bank account, whether to delete this contact from the collection of bank account contacts."
                },
                "date_time_created": {
                  "type": "string",
                  "description": "The date and time this entity was created (UTC).",
                  "format": "date-time",
                  "readOnly": true
                },
                "date_time_updated": {
                  "type": "string",
                  "description": "The date and time this entity was last updated (UTC).",
                  "format": "date-time",
                  "readOnly": true
                }
              }
            }
          },
          "emails": {
            "type": "array",
            "description": "Collection of bank emails.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Bank account email address record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "bank_id": {
                  "type": "integer",
                  "description": "Bank account record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "email": {
                  "maxLength": 200,
                  "type": "string",
                  "description": "Email address."
                },
                "is_default": {
                  "type": "boolean",
                  "description": "Flag to indicate if this is the default email address."
                },
                "is_to_delete": {
                  "type": "boolean",
                  "description": "When updating an existing bank account, whether to delete this email from the collection of bank account emails."
                },
                "date_time_created": {
                  "type": "string",
                  "description": "The date and time this entity was created (UTC).",
                  "format": "date-time",
                  "readOnly": true
                },
                "date_time_updated": {
                  "type": "string",
                  "description": "The date and time this entity was last updated (UTC).",
                  "format": "date-time",
                  "readOnly": true
                }
              }
            }
          },
          "memos": {
            "type": "array",
            "description": "Collection of bank memos.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Bank account memo record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "bank_id": {
                  "type": "integer",
                  "description": "Bank account record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "note": {
                  "maxLength": 1000,
                  "type": "string",
                  "description": "The memo text."
                },
                "is_active": {
                  "type": "boolean",
                  "description": "True if memo status is active, false if it is inactive."
                },
                "is_to_delete": {
                  "type": "boolean",
                  "description": "When updating an existing bank account, whether to delete this memo from the collection of bank account memos."
                },
                "created_by": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The user that created the memo.",
                  "readOnly": true
                },
                "date_time_created": {
                  "type": "string",
                  "description": "The date and time this entity was created (UTC).",
                  "format": "date-time",
                  "readOnly": true
                },
                "date_time_updated": {
                  "type": "string",
                  "description": "The date and time this entity was last updated (UTC).",
                  "format": "date-time",
                  "readOnly": true
                }
              }
            }
          },
          "websites": {
            "type": "array",
            "description": "Collection of bank websites.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Bank account website record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "bank_id": {
                  "type": "integer",
                  "description": "Bank account record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "website": {
                  "maxLength": 200,
                  "type": "string",
                  "description": "The web address."
                },
                "is_default": {
                  "type": "boolean",
                  "description": "Flag to indicate if this is the default website for the customer contact."
                },
                "is_to_delete": {
                  "type": "boolean",
                  "description": "When updating an existing bank account, whether to delete this website from the collection of bank account websites."
                },
                "date_time_created": {
                  "type": "string",
                  "description": "The date and time this entity was created (UTC).",
                  "format": "date-time",
                  "readOnly": true
                },
                "date_time_updated": {
                  "type": "string",
                  "description": "The date and time this entity was last updated (UTC).",
                  "format": "date-time",
                  "readOnly": true
                }
              }
            }
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Bank accounts can be created in Sage 200 for any type of account that money is paid in/out of, for example, cash, credit cards or, business current account. Bank accounts can be in any currency and all balances are recorded in the currency specific to that bank account."
      },
      "bank_account_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Bank account type record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Description of the bank account type.",
            "readOnly": true
          },
          "value": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "When working with bank accounts, it is important to know what type of bank account it is.<br /><br /> Use this API endpoint to return the list of bank account types that can be used."
      },
      "electronic_bank_function_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Electronic bank function type record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 40,
            "type": "string",
            "description": "Description of the electronic bank function type.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Use this API endpoint to return the list of e-banking function types that can be used with e-banking."
      },
      "bank_entry_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Bank entry type record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 20,
            "type": "string",
            "description": "Description of the bank entry type.",
            "readOnly": true
          },
          "value": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "When working with bank entries, it is important to know what type of bank entry it is. <br /><br />Use this API endpoint to return the list of bank entry types that can be used."
      },
      "lookup_bank": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Bank account record Id.",
            "format": "int64",
            "readOnly": true
          },
          "code": {
            "maxLength": 8,
            "type": "string",
            "description": "Bank account code."
          },
          "description": {
            "maxLength": 60,
            "type": "string",
            "description": "Bank description."
          },
          "account_status_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The status of the bank account. For example, this can either be 'Active' or 'Hidden'.",
            "default": "AccountStatusActive"
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "A subset of bank account information for populating a lookup."
      },
      "bank_receipt": {
        "required": [
          "bank_id",
          "nominal_analysis_items"
        ],
        "type": "object",
        "properties": {
          "bank_id": {
            "type": "integer",
            "description": "Bank record Id that the receipt is for. If the bank account does not have the same currency as the base currency, then additional properties can be set for the currency and exchange rate.<br/><br/>Note: If a default bank account has been set up in the system, then you do not need to specify the bank account Id, if that is the intended bank for the receipt.",
            "format": "int64"
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date. This defaults to the current system date.",
            "format": "date-time"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Receipt reference (can be the cheque number)."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Receipt second reference."
          },
          "tax_registration_number": {
            "maxLength": 30,
            "type": "string",
            "description": "The tax registration number of the person the money has been received from (Sage 200 Education Online only)."
          },
          "narrative": {
            "maxLength": 6000,
            "type": "string",
            "description": "The description that is set to default on each nominal analysis item."
          },
          "exchange_rate": {
            "type": "number",
            "description": "The exchange rate between the bank account and the system. This is only applicable if the bank account currency specified is different to the base currency and will default to the bank currency exchange rate.",
            "format": "decimal 6dp"
          },
          "cheque_currency_id": {
            "type": "integer",
            "description": "The currency Id of the receipt. This is only applicable if the bank account currency specified is different to the base currency and will default to the bank account currency.",
            "format": "int64"
          },
          "cheque_exchange_rate": {
            "type": "number",
            "description": "The exchange rate between the cheque and the bank account. This is only applicable if the bank account currency specified is different to the base currency and will default to the cheque currency exchange rate.",
            "format": "decimal 6dp"
          },
          "tax_code_id": {
            "type": "integer",
            "description": "Tax code record Id. This is only applicable if the bank account currency specified is different to the base currency and will default to the default tax code Id.",
            "format": "int64"
          },
          "cheque_value": {
            "type": "number",
            "description": "Value of the receipt. This is only applicable if the bank account currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "cheque_goods_value": {
            "type": "number",
            "description": "The net value of the receipt. This is only applicable if the bank account currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "cheque_tax_value": {
            "type": "number",
            "description": "The tax element of the receipt. This is only applicable if the bank account currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "The nominal analysis lines that relate to the receipt, such as the account code, values and date.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "The description."
                },
                "gross_value": {
                  "type": "number",
                  "description": "Gross receipt value to post to the nominal account.",
                  "format": "decimal 2dp"
                },
                "goods_value": {
                  "type": "number",
                  "description": "Net value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "tax_code_id": {
                  "type": "integer",
                  "description": "Tax code Id. This is not applicable if the bank account currency specified is different to the base currency and will default to the default tax code Id",
                  "format": "int64"
                },
                "tax_value": {
                  "type": "number",
                  "description": "Tax value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "transaction_date": {
                  "type": "string",
                  "description": "Transaction date. This defaults to the current system date.",
                  "format": "date-time"
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Receipt reference."
                }
              }
            }
          },
          "bank_charges": {
            "type": "array",
            "description": "The nominal analysis items which relate to bank charges for the receipt. This is only applicable if the bank account currency specified is different to the base currency.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code."
                },
                "value": {
                  "type": "number",
                  "description": "Value to post to the nominal account.",
                  "format": "decimal 2dp"
                }
              }
            }
          },
          "nominal_journal_items": {
            "type": "array",
            "description": "Historically used for the nominal analysis lines that relate to the receipt, such as the account code, values and date. Superseded by nominal_analysis_items. This can be used in place of nominal_analysis_items, however, if both are present in the request, nominal_analysis_items will be used.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "The description."
                },
                "gross_value": {
                  "type": "number",
                  "description": "Gross receipt value to post to the nominal account.",
                  "format": "decimal 2dp"
                },
                "goods_value": {
                  "type": "number",
                  "description": "Net value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "tax_code_id": {
                  "type": "integer",
                  "description": "Tax code Id. This is not applicable if the bank account currency specified is different to the base currency and will default to the default tax code Id",
                  "format": "int64"
                },
                "tax_value": {
                  "type": "number",
                  "description": "Tax value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "transaction_date": {
                  "type": "string",
                  "description": "Transaction date. This defaults to the current system date.",
                  "format": "date-time"
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Receipt reference."
                }
              }
            }
          }
        },
        "description": "Receipts are used to record money received against a bank account (Sage 200 Standard and versions of Professional released after July 2017). In the Sage 200 app, this is equivalent to making a Nominal Vatable Receipt or a Non-Vatable Receipt. <br /><br />Posting a bank receipt does not actually create a 'bank receipt' entity, but a Posted Transaction of type 'BankAccountEntryType.Receipt', therefore it is not possible to 'get' a bank receipt using the same API endpoint after it has been posted. Posting a bank receipt returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting bank receipts via the API, at least one bank account must exist within Sage 200."
      },
      "bank_payment": {
        "required": [
          "bank_id",
          "nominal_analysis_items"
        ],
        "type": "object",
        "properties": {
          "bank_id": {
            "type": "integer",
            "description": "Bank record Id that the payment is for. If the bank account does not have the same currency as the base currency, then additional properties can be set for the currency and exchange rate.<br/><br/>Note: If a default bank account has been set up in the system, then you do not need to specify the bank account Id, if that is the intended bank for the payment.",
            "format": "int64"
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date. This defaults to the current system date.",
            "format": "date-time"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Payment reference (can be the cheque number)."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Payment second reference."
          },
          "tax_registration_number": {
            "maxLength": 30,
            "type": "string",
            "description": "The tax registration number of the person the money has been paid to (Sage 200 Education Online only)."
          },
          "tax_code_id": {
            "type": "integer",
            "description": "Tax code record Id. This is only applicable if the bank account currency specified is different to the base currency and will default to the default tax code Id.",
            "format": "int64"
          },
          "narrative": {
            "maxLength": 6000,
            "type": "string",
            "description": "The description that is set to default on each nominal analysis item."
          },
          "exchange_rate": {
            "type": "number",
            "description": "The exchange rate between the bank account and the system. This is only applicable if the bank account currency specified is different to the base currency and will default to the bank currency exchange rate.",
            "format": "decimal 6dp"
          },
          "cheque_currency_id": {
            "type": "integer",
            "description": "The currency Id of the payment. This is only applicable if the bank account currency specified is different to the base currency and will default to the bank account currency.",
            "format": "int64"
          },
          "cheque_exchange_rate": {
            "type": "number",
            "description": "The exchange rate between the cheque and the bank account. This is only applicable if the bank account currency specified is different to the base currency and will default to the cheque currency exchange rate.",
            "format": "decimal 6dp"
          },
          "cheque_value": {
            "type": "number",
            "description": "Value of the payment. This is only applicable if the bank account currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "cheque_goods_value": {
            "type": "number",
            "description": "The net value of the payment. This is only applicable if the bank account currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "cheque_tax_value": {
            "type": "number",
            "description": "The tax element of the payment. This is only applicable if the bank account currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "The nominal analysis lines that relate to the payment, such as the account code, values and date.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "The description."
                },
                "gross_value": {
                  "type": "number",
                  "description": "Gross payment value to post to the nominal account.",
                  "format": "decimal 2dp"
                },
                "goods_value": {
                  "type": "number",
                  "description": "Net value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "tax_code_id": {
                  "type": "integer",
                  "description": "Tax code Id. This is not applicable if the bank account currency specified is different to the base currency and will default to the default tax code Id",
                  "format": "int64"
                },
                "tax_value": {
                  "type": "number",
                  "description": "Tax value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "transaction_date": {
                  "type": "string",
                  "description": "Transaction date. This defaults to the current system date.",
                  "format": "date-time"
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Payment reference."
                }
              }
            }
          },
          "bank_charges": {
            "type": "array",
            "description": "The nominal analysis items which relate to bank charges for the payment. This is only applicable if the bank account currency specified is different to the base currency.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code."
                },
                "value": {
                  "type": "number",
                  "description": "Value to post to the nominal account.",
                  "format": "decimal 2dp"
                }
              }
            }
          },
          "nominal_journal_items": {
            "type": "array",
            "description": "Historically used for the nominal analysis lines that relate to the payment, such as the account code, values and date. Superseded by nominal_analysis_items. This can be used in place of nominal_analysis_items, however, if both are present in the request, nominal_analysis_items will be used.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "The description."
                },
                "gross_value": {
                  "type": "number",
                  "description": "Gross payment value to post to the nominal account.",
                  "format": "decimal 2dp"
                },
                "goods_value": {
                  "type": "number",
                  "description": "Net value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "tax_code_id": {
                  "type": "integer",
                  "description": "Tax code Id. This is not applicable if the bank account currency specified is different to the base currency and will default to the default tax code Id",
                  "format": "int64"
                },
                "tax_value": {
                  "type": "number",
                  "description": "Tax value to post to the nominal account. This is not applicable if the bank account currency specified is different to the base currency.",
                  "format": "decimal 2dp"
                },
                "transaction_date": {
                  "type": "string",
                  "description": "Transaction date. This defaults to the current system date.",
                  "format": "date-time"
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Payment reference."
                }
              }
            }
          }
        },
        "description": "Payments are used to record money paid from a bank account (Sage 200 Standard and versions of Professional released after July 2017). In the Sage 200 app, this is equivalent to making a Nominal Vatable Payment or a Non-Vatable Payment. <br /><br />Posting a bank payment does not actually create a 'bank payment' entity, but a Posted Transaction of type 'BankAccountEntryType.Payment', therefore it is not possible to 'get' a bank payment using the same API endpoint after it has been posted. Posting a bank payment returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting a bank payment via the API, at least one bank account must exist within Sage 200."
      },
      "bank_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Bank account record Id.",
            "format": "int64",
            "readOnly": true
          },
          "code": {
            "maxLength": 8,
            "type": "string",
            "description": "Bank account Code.",
            "readOnly": true
          },
          "description": {
            "maxLength": 60,
            "type": "string",
            "description": "Bank description.",
            "readOnly": true
          },
          "sort_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Bank sort code.",
            "readOnly": true
          },
          "account_no": {
            "maxLength": 20,
            "type": "string",
            "description": "Bank account number.",
            "readOnly": true
          },
          "bank_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Bank name.",
            "readOnly": true
          },
          "account_type_id": {
            "type": "integer",
            "description": "Bank account type Id.",
            "format": "int64",
            "readOnly": true
          },
          "account_status_type_id": {
            "type": "integer",
            "description": "The status of the bank account Id (Sage 200 Standard and versions of Professional released after February 2018). For example, this can either be 'Active' or 'Hidden'.",
            "format": "int64",
            "readOnly": true
          },
          "balance": {
            "type": "number",
            "description": "Bank balance.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "balance_in_base": {
            "type": "number",
            "description": "Bank balance in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "overdraft_limit": {
            "type": "number",
            "description": "Bank overdraft limit.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "account_name": {
            "maxLength": 50,
            "type": "string",
            "description": "Account name.",
            "readOnly": true
          },
          "iban": {
            "maxLength": 40,
            "type": "string",
            "description": "International bank account number.",
            "readOnly": true
          },
          "bic": {
            "maxLength": 11,
            "type": "string",
            "description": "Bank identifier code.",
            "readOnly": true
          },
          "statement_balance": {
            "type": "number",
            "description": "Last statement balance.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "statement_date": {
            "type": "string",
            "description": "Last statement date.",
            "format": "date-time",
            "readOnly": true
          },
          "statement_page_number": {
            "type": "integer",
            "description": "Page of statement item appears on.",
            "format": "int32",
            "readOnly": true
          },
          "currency_id": {
            "type": "integer",
            "description": "Currency record Id.",
            "format": "int64",
            "readOnly": true
          },
          "currency_name": {
            "maxLength": 30,
            "type": "string",
            "description": "The customer currency name.",
            "readOnly": true
          },
          "currency_symbol": {
            "maxLength": 4,
            "type": "string",
            "description": "Currency symbol.",
            "readOnly": true
          },
          "currency_iso_code_id": {
            "type": "integer",
            "description": "Currency ISO code record Id.",
            "format": "int64",
            "readOnly": true
          },
          "currency_iso_code": {
            "maxLength": 3,
            "type": "string",
            "description": "ISO currency code.",
            "readOnly": true
          },
          "currency_iso_code_name": {
            "maxLength": 100,
            "type": "string",
            "description": "ISO currency name.",
            "readOnly": true
          },
          "bank_account_nominal_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "The banks bank account nominal code reference.",
            "readOnly": true
          },
          "bank_account_nominal_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank account nominal code cost centre code.",
            "readOnly": true
          },
          "bank_account_nominal_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank account nominal code department code.",
            "readOnly": true
          },
          "bank_charges_nominal_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "The banks bank charges nominal code reference.",
            "readOnly": true
          },
          "bank_charges_nominal_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank charges nominal code cost centre code.",
            "readOnly": true
          },
          "bank_charges_nominal_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks bank charges nominal code department code.",
            "readOnly": true
          },
          "exchange_diff_nominal_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "The banks exchange differences nominal code reference.",
            "readOnly": true
          },
          "exchange_diff_nominal_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks exchange differences nominal code cost centre code.",
            "readOnly": true
          },
          "exchange_diff_nominal_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The banks exchange differences nominal code department code.",
            "readOnly": true
          },
          "electronic_bank": {
            "maxLength": 60,
            "type": "string",
            "description": "Electronic banking service.",
            "readOnly": true
          },
          "electronic_bank_function_id": {
            "type": "object",
            "properties": {},
            "description": "Electronic banking functions Id.",
            "readOnly": true
          }
        },
        "description": "This resource returns the details of all bank accounts. The default sort (orderby) field is by 'code' ascending."
      },
      "bank_transfer": {
        "required": [
          "bank_from_id",
          "bank_to_id",
          "payment_value"
        ],
        "type": "object",
        "properties": {
          "bank_from_id": {
            "type": "integer",
            "description": "The unique Id of the bank the payment will transfer from.",
            "format": "int64"
          },
          "bank_to_id": {
            "type": "integer",
            "description": "The unique Id of the bank the payment will transfer to.",
            "format": "int64"
          },
          "narrative": {
            "maxLength": 6000,
            "type": "string",
            "description": "The narrative for the bank transfer."
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The reference for the bank transfer."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "A second reference for the bank transfer."
          },
          "transaction_date": {
            "type": "string",
            "description": "The date of the bank transfer.",
            "format": "date-time"
          },
          "payment_value": {
            "type": "number",
            "description": "The amount to transfer.",
            "format": "decimal 2dp"
          },
          "receipt_value": {
            "type": "number",
            "description": "The receipt value of the bank transfer. This is only applicable if either of the bank accounts currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "exchange_rate": {
            "type": "number",
            "description": "The exchange rate used for the bank transfer. This is only applicable if either of the bank accounts currency specified is different to the base currency.",
            "format": "decimal 6dp"
          },
          "commission_value": {
            "type": "number",
            "description": "The amount of commission associated with the bank transfer. This is only applicable if either of the bank accounts currency specified is different to the base currency.",
            "format": "decimal 2dp"
          },
          "commission_code": {
            "maxLength": 8,
            "type": "string",
            "description": "The commission nominal code for the bank transfer. This is only applicable if either of the bank accounts currency specified is different to the base currency."
          },
          "commission_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The commission cost centre for the bank transfer. This is only applicable if either of the bank accounts currency specified is different to the base currency."
          },
          "commission_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The commission department for the bank transfer. This is only applicable if either of the bank accounts currency specified is different to the base currency."
          },
          "commission_payer": {
            "maxLength": 20,
            "type": "string",
            "description": "Who will pay the commission on the bank transfer. The accepted values are PaymentBank or ReceiptBank. This is only applicable if either of the bank accounts currency specified is different to the base currency."
          },
          "payment_to_base_exchange_rate": {
            "type": "number",
            "description": "The exchange rate to convert from the payment_value currency to the base currency. This is only applicable if the bank account from currency specified is different to the base currency.",
            "format": "decimal 6dp"
          },
          "receipt_to_base_exchange_rate": {
            "type": "number",
            "description": "The exchange rate to convert from the receipt_value currency to the base currency. This is only applicable if the bank account to currency specified is different to the base currency.",
            "format": "decimal 6dp"
          },
          "exchange_difference_code": {
            "maxLength": 8,
            "type": "string",
            "description": "The exchange difference nominal code for the bank transfer. This is only applicable if either of payment_to_base_exchange_rate or receipt_to_base_exchange_rate are changed."
          },
          "exchange_difference_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "The exchange difference cost centre for the bank transfer. This is only applicable if either of payment_to_base_exchange_rate or receipt_to_base_exchange_rate are changed."
          },
          "exchange_difference_department": {
            "maxLength": 3,
            "type": "string",
            "description": "The exchange difference department for the bank transfer. This is only applicable if either of payment_to_base_exchange_rate or receipt_to_base_exchange_rate are changed."
          }
        },
        "description": "<p>Bank transfers are used to transfer money from one bank to another. In the Sage 200 app, this is equivalent to making an Inter Account Transfer.</p><p>Note: before posting a bank transfer via the API both the bank you are transferring from, and the bank you are transferring to, must exist within Sage 200.</p>"
      },
      "urn": {
        "type": "object",
        "properties": {
          "urn": {
            "maxLength": 20,
            "type": "string",
            "description": "Unique reference number."
          }
        },
        "description": "This is the description of the urn."
      },
      "bank_posted_transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id.",
            "format": "int64"
          },
          "bank_id": {
            "type": "integer",
            "description": "Bank Id.",
            "format": "int64"
          },
          "bank_transaction_type": {
            "maxLength": 30,
            "type": "string",
            "description": "Transaction type."
          },
          "entry_description": {
            "maxLength": 6000,
            "type": "string",
            "description": "Transaction description."
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Transaction reference."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Second reference."
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time"
          },
          "posted_date": {
            "type": "string",
            "description": "Posted date.",
            "format": "date-time"
          },
          "cheque_value": {
            "type": "number",
            "description": "Value of the entry.",
            "format": "decimal 2dp"
          },
          "cheque_discount_value": {
            "type": "number",
            "description": "Entry discount value.",
            "format": "decimal 2dp"
          },
          "cheque_to_account_currency_rate": {
            "type": "number",
            "description": "Exchange rate between the bank account currency and the cheque currency.",
            "format": "decimal 6dp"
          },
          "bank_cheque_to_base_currency_rate": {
            "type": "number",
            "description": "Exchange rate between the bank account and the company base currency.",
            "format": "decimal 6dp"
          },
          "cheque_currency_id": {
            "type": "integer",
            "description": "Currency Id.",
            "format": "int64"
          },
          "last_statement_date": {
            "type": "string",
            "description": "The statement date of the last bank statement to which the transaction was reconciled.",
            "format": "date-time"
          },
          "statement_page_number": {
            "type": "integer",
            "description": "The page number of the bank statement to which the transaction was reconciled.",
            "format": "int32"
          },
          "source": {
            "maxLength": 30,
            "type": "string",
            "description": "Ledger type."
          },
          "urn": {
            "type": "integer",
            "description": "Unique reference number.",
            "format": "int64"
          },
          "user_name": {
            "maxLength": 20,
            "type": "string",
            "description": "User who entered the transaction."
          },
          "tax_analysis_items": {
            "type": "array",
            "description": "Tax analysis items.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Tax code Id",
                  "format": "int64"
                },
                "code": {
                  "type": "integer",
                  "description": "Tax code.",
                  "format": "int16"
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Tax code name."
                },
                "entry_type": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The type of the tax code entry."
                },
                "goods_amount": {
                  "type": "number",
                  "description": "Goods amount.",
                  "format": "decimal 2dp"
                },
                "tax_amount": {
                  "type": "number",
                  "description": "Tax amount.",
                  "format": "decimal 2dp"
                },
                "tax_discount_amount": {
                  "type": "number",
                  "description": "Tax discount amount.",
                  "format": "decimal 2dp"
                }
              }
            }
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis items.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department."
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Nominal name."
                },
                "location": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Location of the associated nominal transaction."
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative."
                },
                "value": {
                  "type": "number",
                  "description": "Goods value.",
                  "format": "decimal 2dp"
                },
                "base_value": {
                  "type": "number",
                  "description": "Value in base currency.",
                  "format": "decimal 2dp"
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The transaction analysis code used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid"
                },
                "source": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Source ledger"
                }
              }
            }
          },
          "trade_items": {
            "type": "array",
            "description": "Trade items.",
            "items": {
              "type": "object",
              "properties": {
                "account_number": {
                  "type": "string",
                  "description": "Account number."
                },
                "account_name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Account name."
                },
                "trading_entry_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Trading entry type."
                },
                "entry_type_string": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Trading entry type string."
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference."
                },
                "gross_value": {
                  "type": "number",
                  "description": "Gross value.",
                  "format": "decimal 2dp"
                },
                "tax_value": {
                  "type": "number",
                  "description": "Tax value.",
                  "format": "decimal 2dp"
                },
                "transaction_date": {
                  "type": "string",
                  "description": "Transaction date.",
                  "format": "date-time"
                },
                "urn": {
                  "type": "integer",
                  "description": "Unique reference number.",
                  "format": "int32"
                }
              }
            }
          },
          "bank": {
            "type": "object",
            "properties": {},
            "description": "Bank posted transactions bank.",
            "readOnly": true
          },
          "cheque_currency": {
            "type": "object",
            "properties": {},
            "description": "Bank posted transactions currency.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Bank posted transactions are created when transactions such as receipts or payments are posted against the Cash Book.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked."
      },
      "cash_book_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Cash Book Settings record Id.",
            "format": "int64",
            "readOnly": true
          },
          "default_bank_account_id": {
            "type": "integer",
            "description": "Default bank account Id.",
            "format": "int64"
          },
          "default_bank_account": {
            "type": "object",
            "properties": {},
            "description": "The default bank account."
          }
        },
        "description": "The Cash Book settings are used to configure application behaviour with respect to the Cash Book module.<br/><br/>Settings include the default bank account."
      }
    }
  },
  "x-original-swagger-version": "2.0"
}