{
  "openapi": "3.0.1",
  "info": {
    "title": "Sage 200 v1 Extra Sales",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.columbus.sage.com/uk/sage200extra/accounts/v1/"
    }
  ],
  "tags": [
    {
      "name": "Customer Alerts",
      "description": ""
    },
    {
      "name": "Customer Cards",
      "description": ""
    },
    {
      "name": "Customer Contact Roles",
      "description": ""
    },
    {
      "name": "Customer Contacts",
      "description": ""
    },
    {
      "name": "Customer Delivery Addresses",
      "description": ""
    },
    {
      "name": "Customer Emails",
      "description": ""
    },
    {
      "name": "Customer Faxes",
      "description": ""
    },
    {
      "name": "Customer Memos",
      "description": ""
    },
    {
      "name": "Customer Mobiles",
      "description": ""
    },
    {
      "name": "Customer Period Value Views",
      "description": ""
    },
    {
      "name": "Customer Price Bands",
      "description": ""
    },
    {
      "name": "Customer Price Enquiry",
      "description": ""
    },
    {
      "name": "Customer SOP Invoice Credit Line Views",
      "description": ""
    },
    {
      "name": "Customer Telephones",
      "description": ""
    },
    {
      "name": "Customer Views",
      "description": ""
    },
    {
      "name": "Customer Websites",
      "description": ""
    },
    {
      "name": "Customer Year Value Views",
      "description": ""
    },
    {
      "name": "Customers",
      "description": ""
    },
    {
      "name": "Document Transmission Method Types",
      "description": ""
    },
    {
      "name": "Finance Charges",
      "description": ""
    },
    {
      "name": "Head Office Types",
      "description": ""
    },
    {
      "name": "Lookup Customers",
      "description": ""
    },
    {
      "name": "Sales Aged Debtor Detailed Views",
      "description": ""
    },
    {
      "name": "Sales Aged Debtor Summary Views",
      "description": ""
    },
    {
      "name": "Sales Aged Transaction Period Views",
      "description": ""
    },
    {
      "name": "Sales Allocations",
      "description": ""
    },
    {
      "name": "Sales Credit Notes",
      "description": ""
    },
    {
      "name": "Sales Historical Transactions",
      "description": ""
    },
    {
      "name": "Sales Invoices",
      "description": ""
    },
    {
      "name": "Sales Ledger Settings",
      "description": ""
    },
    {
      "name": "Sales Payments",
      "description": ""
    },
    {
      "name": "Sales Posted Transaction Memos",
      "description": ""
    },
    {
      "name": "Sales Posted Transactions",
      "description": ""
    },
    {
      "name": "Sales Receipts",
      "description": ""
    },
    {
      "name": "Sales Trading Periods",
      "description": ""
    },
    {
      "name": "Sales Transaction Enquiry Views",
      "description": ""
    },
    {
      "name": "Sales Transaction Views",
      "description": ""
    },
    {
      "name": "Statement Ageing Terms",
      "description": ""
    },
    {
      "name": "Statement Layout Types",
      "description": ""
    },
    {
      "name": "Statement Terms",
      "description": ""
    }
  ],
  "paths": {
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers",
        "description": "Customers are one of the most important entities within Sage 200 as they are associated to many important resources within the application and underpin most of the main features (e.g. sales orders, payment receipts, etc.). When making larger requests for customer information, the Customer Views resource can be a faster alternative to this resource.",
        "operationId": "GetCustomers",
        "responses": {
          "200": {
            "description": "The list of customers has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Customers",
        "description": "Customers are one of the most important entities within Sage 200 as they are associated to many important resources within the application and underpin most of the main features (e.g. sales orders, payment receipts, etc.).",
        "operationId": "PostCustomer",
        "requestBody": {
          "description": "Customer to add to Sage 200 Sales Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer was created. Response body will include the customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer"
      },
      "x-sage-pathtitle": "Customers",
      "x-sage-changelog": [
        {
          "date": "21/01/2017",
          "title": "Extended operation",
          "description": "This operation now includes the field 'account_status_type', which represents the status of the customer account. This can either be 'Active' or 'Hidden'."
        },
        {
          "date": "09/05/2019",
          "title": "Extended operation",
          "description": "This operation now supports analysis codes 6-20 in professional."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'status_reason', 'account_type', 'early_settlement_discount_percent', 'early_settlement_discount_days', 'payment_terms_days', 'payment_terms_basis', 'credit_memo_note', 'terms_agreed', 'credit_bureau_id', 'credit_position_id', 'finance_charge_id', 'trading_terms', 'credit_reference', 'account_opened', 'last_credit_review', 'next_credit_review', 'application_date', 'date_received', 'date_finance_charge_last_run', 'office_type', 'associated_head_office_id', 'produce_statements_for_customer', 'use_consolidated_billing', 'order_priority', 'use_tax_code_as_default', 'months_to_keep_transactions', 'default_nominal_code_reference', 'default_nominal_code_cost_centre', 'default_nominal_code_department', 'invoice_discount_percent', 'invoice_line_discount_percent', 'customer_discount_group_id', 'order_value_discount_id', 'price_band_id', 'associated_head_office', 'credit_bureau', 'credit_position', 'customer_discount_group', 'finance_charge', 'order_value_discount', 'price_band', 'sales_credit_note_layout', 'sales_invoice_layout', 'statement_layout', 'status' and 'date_time_created'."
        },
        {
          "date": "02/11/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'cards'."
        },
        {
          "date": "15/03/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'alerts', 'limited_price_bands' and 'memos'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'default_nominal_code' and 'is_head_office_with_branches'."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'default_nominal_code_id', 'spare_text_1', 'spare_text_2', 'spare_text_3', 'spare_text_4', 'spare_text_5', 'spare_text_6', 'spare_text_7', 'spare_text_8', 'spare_text_9', 'spare_text_10', 'spare_number_1', 'spare_number_2', 'spare_number_3', 'spare_number_4', 'spare_number_5', 'spare_number_6', 'spare_number_7', 'spare_number_8', 'spare_number_9', 'spare_number_10', 'spare_date_1', 'spare_date_2', 'spare_date_3', 'spare_date_4', 'spare_date_5', 'spare_bool_1', 'spare_bool_2', 'spare_bool_3', 'spare_bool_4' and 'spare_bool_5'."
        }
      ]
    },
    "/customers/{Id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Customer",
        "description": "Customers are one of the most important entities within Sage 200 as they are associated to many important resources within the application and underpin most of the main features (e.g. sales orders, payment receipts, etc.).",
        "operationId": "GetCustomer",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Customer",
        "description": "Customers are one of the most important entities within Sage 200 as they are associated to many important resources within the application and underpin most of the main features (e.g. sales orders, payment receipts, etc.).",
        "operationId": "PutCustomer",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer to update in Sage 200 Sales Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer was updated. Response body will include the customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer"
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Customer",
        "description": "Customers are one of the most important entities within Sage 200 as they are associated with many important resources within the application and underpin most of the main features (e.g. sales orders, payment receipts, etc.).",
        "operationId": "DeleteCustomer",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer"
    },
    "/customers_new": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "New Customer With Defaults",
        "description": "Returns a customer with all the defaults that have been specified within the application. The API endpoint does not persist the customer.",
        "operationId": "PostCustomersNew",
        "requestBody": {
          "description": "An empty request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customers_new_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer with defaults was successfully returned. Response body will include the customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Empty"
      },
      "x-sage-pathtitle": "New customer with defaults",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "02/11/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'cards'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'default_nominal_code'."
        },
        {
          "date": "14/08/2023",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'default_nominal_code_id', 'spare_text_1', 'spare_text_2', 'spare_text_3', 'spare_text_4', 'spare_text_5', 'spare_text_6', 'spare_text_7', 'spare_text_8', 'spare_text_9', 'spare_text_10', 'spare_number_1', 'spare_number_2', 'spare_number_3', 'spare_number_4', 'spare_number_5', 'spare_number_6', 'spare_number_7', 'spare_number_8', 'spare_number_9', 'spare_number_10', 'spare_date_1', 'spare_date_2', 'spare_date_3', 'spare_date_4', 'spare_date_5', 'spare_bool_1', 'spare_bool_2', 'spare_bool_3', 'spare_bool_4' and 'spare_bool_5'."
        }
      ]
    },
    "/statement_layout_types": {
      "get": {
        "tags": [
          "Statement Layout Types"
        ],
        "summary": "Statement Layout Types",
        "description": "Statement layout types are used to determine statement production when printing documents for customers within the application. Statement layout types can be 'Paper Standard', 'Paper Alternative', 'Email Standard' or 'Email Alternative'.<P>The API endpoint returns details of the statement layout types that can be used.</P>",
        "operationId": "GetStatementLayoutTypes",
        "responses": {
          "200": {
            "description": "The details of the statement layout types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/statement_layout_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Statement layout types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/customer_contacts": {
      "get": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contacts",
        "description": "Information can be stored for multiple contacts against each customer account. Each contact can have its own details such as telephone numbers, fax numbers, email address and website.",
        "operationId": "GetCustomerContact",
        "responses": {
          "200": {
            "description": "The list of customer contacts has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_contact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer contacts",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'roles' and 'date_time_created'."
        }
      ]
    },
    "/customer_contacts/{Id}": {
      "get": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contact",
        "description": "Information can be stored for multiple contacts against each customer account. Each contact can have its own details such as telephone numbers, fax numbers, email address and website.",
        "operationId": "GetCustomerContacts",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a customer contact have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_contact"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contact",
        "description": "Update a customer contact in the Sage 200 Sales Ledger.",
        "operationId": "PutCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer contact to update in Sage 200 Sales Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_contact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer contact was updated. Response body will include the customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_contact"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "customer_contact"
      },
      "delete": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contact",
        "description": "Delete a customer contact.",
        "operationId": "DeleteCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer contact was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer contact"
    },
    "/customers/{customerId}/customer_contacts": {
      "get": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contacts For Customer",
        "description": "Information can be stored for multiple contacts against each customer account.  Each contact can have its own details such as telephone numbers, fax numbers, email address and website.",
        "operationId": "GetCustomerContactsForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of customer contacts has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_contact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contacts For Customer",
        "description": "Create a new customer contact for a customer in the Sage 200 Sales Ledger.",
        "operationId": "PostCustomerContactForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer contact to add to the customer account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_contact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer contact was created. Response body will include the customer contact details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_contact"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "customer_contact"
      },
      "x-sage-pathtitle": "Customer contacts for customer"
    },
    "/customers/{customerId}/customer_contacts/{Id}": {
      "get": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contact For Customer",
        "description": "Information can be stored for multiple contacts against each customer account.  Each contact can have its own details such as telephone numbers, fax numbers, email address and website.",
        "operationId": "GetCustomerContactForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer contact has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_contact"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contact For Customer",
        "description": "Update a customer contact for customer in the Sage 200 Sales Ledger.",
        "operationId": "PutCustomerContactForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer contact to update in Sage 200 Sales Ledger.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_contact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer contact was updated. Response body will include the customer details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_contact"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "customer_contact"
      },
      "delete": {
        "tags": [
          "Customer Contacts"
        ],
        "summary": "Customer Contact For Customer",
        "description": "Delete a customer contact for a customer.",
        "operationId": "DeleteCustomerContactForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer contact was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer contact for customer"
    },
    "/customer_alerts": {
      "get": {
        "tags": [
          "Customer Alerts"
        ],
        "summary": "Customer Alert",
        "description": "Alerts are messages that can be displayed when a user performs a particular task. You can show alerts when entering invoices or credit notes, sales orders and returns, quotations and pro forma invoices, and for customer price enquiries.",
        "operationId": "GetCustomerAlerts",
        "responses": {
          "200": {
            "description": "The list of customer alerts has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_alert"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Alerts"
        ],
        "summary": "Customer Alert",
        "description": "Alerts are messages that can be displayed when a user performs a particular task. You can show alerts when entering invoices or credit notes, sales orders and returns, quotations and pro forma invoices, and for customer price enquiries.",
        "operationId": "PostCustomerAlert",
        "requestBody": {
          "description": "Customer alert to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_alert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer alert was created. Response body will include the customer alert details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_alert"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "CustomerAlert"
      },
      "x-sage-pathtitle": "Customer Alert",
      "x-sage-changelog": [
        {
          "date": "15/03/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/customer_alerts/{Id}": {
      "get": {
        "tags": [
          "Customer Alerts"
        ],
        "summary": "Customer Alert",
        "description": "Return a single customer alert resource by supplying a customer alert Id.",
        "operationId": "GetCustomerAlert",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer alert.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer alert successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_alert"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Alerts"
        ],
        "summary": "Customer Alert",
        "description": "Alerts are messages that can be displayed when a user performs a particular task. You can show alerts when entering invoices or credit notes, sales orders and returns, quotations and pro forma invoices, and for customer price enquiries.",
        "operationId": "PutCustomerAlert",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer alert.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer alert to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_alert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer alert was updated. Response body will include the customer alert details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_alert"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer Alert"
      },
      "delete": {
        "tags": [
          "Customer Alerts"
        ],
        "summary": "Customer Alert",
        "description": "Alerts are messages that can be displayed when a user performs a particular task. You can show alerts when entering invoices or credit notes, sales orders and returns, quotations and pro forma invoices, and for customer price enquiries.",
        "operationId": "DeleteCustomerAlert",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer alert.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer alert was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer Alert"
    },
    "/customer_memos": {
      "get": {
        "tags": [
          "Customer Memos"
        ],
        "summary": "Customer Memos",
        "description": "Memos are sections of text that can be used to make comments about a customer account such as reminders, or notes (e.g. if there is currently a dispute over an order).<br/><br/>Multiple memos can be added to each account. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetCustomerMemos",
        "responses": {
          "200": {
            "description": "The list of customer memos has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_memo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Memos"
        ],
        "summary": "Customer Memos",
        "description": "Memos are sections of text that can be used to make comments about a customer account such as reminders, or notes (e.g. if there is currently a dispute over an order).<br/><br/>Multiple memos can be added to each account. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "PostCustomerMemo",
        "requestBody": {
          "description": "Customer memo to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_memo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer memo was created. Response body will include the customer memo details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "CustomerMemo"
      },
      "x-sage-pathtitle": "Customer memos",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        },
        {
          "date": "15/03/2021",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'is_to_delete'."
        }
      ]
    },
    "/customer_memos/{Id}": {
      "get": {
        "tags": [
          "Customer Memos"
        ],
        "summary": "Customer Memo",
        "description": "Memos are sections of text that can be used to make comments about a customer account such as reminders, or notes (e.g. if there is currently a dispute over an order).<br/><br/>Multiple memos can be added to each account. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetCustomerMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer memo successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Memos"
        ],
        "summary": "Customer Memo",
        "description": "Memos are sections of text that can be used to make comments about a customer account such as reminders, or notes (e.g. if there is currently a dispute over an order).<br/><br/>Multiple memos can be added to each account. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "PutCustomerMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer memo to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_memo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer memo was updated. Response body will include the customer memo details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "CustomerMemo"
      },
      "delete": {
        "tags": [
          "Customer Memos"
        ],
        "summary": "Customer Memo",
        "description": "Memos are sections of text that can be used to make comments about a customer account such as reminders, or notes (e.g. if there is currently a dispute over an order).<br/><br/>Multiple memos can be added to each account. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "DeleteCustomerMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer memo was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer memo"
    },
    "/customers/{customerId}/customer_alerts": {
      "get": {
        "tags": [
          "Customer Alerts"
        ],
        "summary": "Customer Alerts For Customer",
        "description": "Alerts are messages that can be displayed when a user performs a particular task. You can show alerts when entering invoices or credit notes, sales orders and returns, quotations and pro forma invoices, and for customer price enquiries.",
        "operationId": "GetCustomerAlertsForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of customer alerts for a customer has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_alert"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer alerts for customer"
    },
    "/customers/{customerId}/customer_memos": {
      "get": {
        "tags": [
          "Customer Memos"
        ],
        "summary": "Customer Memos For Customer",
        "description": "Memos are sections of text that can be used to make comments about a customer account such as reminders, or notes (e.g. if there is currently a dispute over an order).<br/><br/>Multiple memos can be added to each account. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetCustomerMemosForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of customer memos for a customer has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_memo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer memos for customer"
    },
    "/customer_cards": {
      "get": {
        "tags": [
          "Customer Cards"
        ],
        "summary": "Customer Cards",
        "description": "Customer cards are the credit cards used by the customer. They are created when a transaction is made using an Online Card Provider. The description used for the card can be renamed, or the card removed. Multiple cards can be associated with one account. The date and time that the card was last used is also recorded.",
        "operationId": "GetCustomerCards",
        "responses": {
          "200": {
            "description": "The list of customer cards has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_card"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer cards",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/customer_cards/{Id}": {
      "get": {
        "tags": [
          "Customer Cards"
        ],
        "summary": "Customer Card",
        "description": "Customer cards are the credit cards used by the customer. They are created when a transaction is made using an Online Card Provider. The description used for the card can be renamed, or the card removed. Multiple cards can be associated with one account. The date and time that the card was last used is also recorded.",
        "operationId": "GetCustomerCard",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer card.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the customer card has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_card"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Cards"
        ],
        "summary": "Customer Card",
        "description": "Customer cards are the credit cards used by the customer. They are created when a transaction is made using an Online Card Provider. The description used for the card can be renamed, or the card removed. Multiple cards can be associated with one account. The date and time that the card was last used is also recorded.",
        "operationId": "PutCustomerCard",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer card.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer card to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_card"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer cards were updated. Response body will include the customer cards.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_card"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "CustomerCard"
      },
      "delete": {
        "tags": [
          "Customer Cards"
        ],
        "summary": "Customer Card",
        "description": "Customer cards are the credit cards used by the customer. They are created when a transaction is made using an Online Card Provider. The description used for the card can be renamed, or the card removed. Multiple cards can be associated with one account. The date and time that the card was last used is also recorded.",
        "operationId": "DeleteCustomerCard",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer card.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer card was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer card"
    },
    "/customers/{customerId}/customer_cards": {
      "get": {
        "tags": [
          "Customer Cards"
        ],
        "summary": "Customer Cards For Customer",
        "description": "Customer cards are the credit cards used by the customer. They are created when a transaction is made using an Online Card Provider. The description used for the card can be renamed, or the card removed. Multiple cards can be associated with one account. The date and time that the card was last used is also recorded.",
        "operationId": "GetCustomerCardsForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of customer cards for a customer has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_card"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer cards for customer"
    },
    "/sales_trading_periods": {
      "get": {
        "tags": [
          "Sales Trading Periods"
        ],
        "summary": "Sales Trading Periods",
        "description": "This resource returns the details of all sales trading periods for all financial years held for the company. A company can have the trading periods set to be the same as the accounting periods or as different periods. (Sage 200 Professional only, Sage 200 Standard defaults to financial year periods).",
        "operationId": "GetSalesTradingPeriods",
        "responses": {
          "200": {
            "description": "The details of the accounting periods have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_trading_period"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales trading periods",
      "x-sage-professional-only": true,
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Extended operations",
          "description": "This endpoint was enhanced with POST and PUT operations."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        },
        {
          "date": "14/08/2023",
          "title": "Removed operations",
          "description": "The PUT and POST operations for the endpoint that were added in the last update have now been removed. The previous endpoints should not be used, as they were included in error and do not perform the required validation. New PUT and POST operations will be included in a future release."
        }
      ]
    },
    "/sales_trading_periods/{Id}": {
      "get": {
        "tags": [
          "Sales Trading Periods"
        ],
        "summary": "Sales Trading Period",
        "description": "This resource returns the details of all sales trading periods for all financial years held for the company. A company can have the trading periods set to be the same as the accounting periods or as different periods. (Sage 200 Professional only, Sage 200 Standard defaults to financial year periods).",
        "operationId": "GetSalesTradingPeriod",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the sales trading period.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the trading periods have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_trading_period"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales trading period",
      "x-sage-professional-only": true
    },
    "/customer_emails": {
      "get": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Emails",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerEmails",
        "responses": {
          "200": {
            "description": "The collection of customer emails has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_email"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer emails",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/customer_contacts/{CustomerContactId}/customer_emails": {
      "get": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Emails By Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerEmailsForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer emails has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_email"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Emails By Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerEmailForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer email to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_email"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer email was created. Response body will include the customer email details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer email"
      },
      "x-sage-pathtitle": "Customer emails by contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_emails": {
      "get": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Emails For Customer And Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerEmailsForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer emails has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_email"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Emails For Customer And Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerEmailForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer email to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_email"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer email was created. Response body will include the customer email details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer email"
      },
      "x-sage-pathtitle": "Customer emails for customer and customer contact"
    },
    "/customer_emails/{Id}": {
      "get": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerEmail",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer email successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerEmail",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer email to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_email"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer email was updated. Response body will include the customer email details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer email"
      },
      "delete": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerEmail",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer email was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer email"
    },
    "/customer_contacts/{CustomerContactId}/customer_emails/{Id}": {
      "get": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email For Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerEmailForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer email successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email For Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerEmailForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer email to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_email"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer email was updated. Response body will include the customer email details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer email"
      },
      "delete": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email For Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerEmailForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer email was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer email for customer contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_emails/{Id}": {
      "get": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email For Customer And Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerEmailForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer email successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email For Customer And Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerEmailForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer email to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_email"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer email was updated. Response body will include the customer email details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_email"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer email"
      },
      "delete": {
        "tags": [
          "Customer Emails"
        ],
        "summary": "Customer Email For Customer And Customer Contact",
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerEmailForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer email.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer email was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer email for customer and customer contact"
    },
    "/customer_faxes": {
      "get": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Faxes",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerFaxes",
        "responses": {
          "200": {
            "description": "The collection of customer faxes has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_fax"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer faxes",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/customer_contacts/{CustomerContactId}/customer_faxes": {
      "get": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Faxes By Contact",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerFaxesForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer faxes has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_fax"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Faxes By Contact",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerFaxForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer fax to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_fax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer fax was created. Response body will include the customer fax details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer fax"
      },
      "x-sage-pathtitle": "Customer faxes by contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_faxes": {
      "get": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Faxes For Customer And Customer Contact",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerFaxesForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer faxes has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_fax"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Faxes For Customer And Customer Contact",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerFaxForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer fax to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_fax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer fax was created. Response body will include the customer fax details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer fax"
      },
      "x-sage-pathtitle": "Customer faxes for customer and customer contact"
    },
    "/customer_faxes/{Id}": {
      "get": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerFax",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer fax successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerFax",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer fax to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_fax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer fax was updated. Response body will include the customer fax details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer fax"
      },
      "delete": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerFax",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer fax was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer fax"
    },
    "/customer_contacts/{CustomerContactId}/customer_faxes/{Id}": {
      "get": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax For Customer Contact",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerFaxForCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer fax successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax For Customer Contact",
        "description": "Update a customer fax.",
        "operationId": "PutCustomerFaxForCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer fax to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_fax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer fax was updated. Response body will include the customer fax details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer fax"
      },
      "delete": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax For Customer Contact",
        "description": "Delete a customer fax for customer contact",
        "operationId": "DeleteCustomerFaxForCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer fax was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer fax for customer contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_faxes/{Id}": {
      "get": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax For Customer And Customer Contact",
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerFaxForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer fax successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax For Customer And Customer Contact",
        "description": "Update a customer fax.",
        "operationId": "PutCustomerFaxForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer fax to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_fax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer fax was updated. Response body will include the customer fax details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_fax"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer fax"
      },
      "delete": {
        "tags": [
          "Customer Faxes"
        ],
        "summary": "Customer Fax For Customer And Customer Contact",
        "description": "Delete a customer fax for customer and customer contact.",
        "operationId": "DeleteCustomerFaxForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer fax.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer fax was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer fax for customer and customer contact"
    },
    "/customer_mobiles": {
      "get": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobiles",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerMobiles",
        "responses": {
          "200": {
            "description": "The collection of customer mobiles has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_mobile"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer mobiles",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/customer_contacts/{CustomerContactId}/customer_mobiles": {
      "get": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobiles By Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerMobilesForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer mobiles has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_mobile"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobiles By Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerMobileForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer mobile to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_mobile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer mobile was created. Response body will include the customer mobile details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer mobile"
      },
      "x-sage-pathtitle": "Customer mobiles by contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_mobiles": {
      "get": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobiles For Customer And Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerMobilesForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer mobiles has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_mobile"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobiles For Customer And Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerMobileForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer mobile to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_mobile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer mobile was created. Response body will include the customer mobile details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer mobile"
      },
      "x-sage-pathtitle": "Customer mobiles for customer and customer contact"
    },
    "/customer_mobiles/{Id}": {
      "get": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerMobile",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer mobile successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerMobile",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer mobile to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_mobile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer mobile was updated. Response body will include the customer mobile details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer mobile"
      },
      "delete": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerMobile",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer mobile was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer mobile"
    },
    "/customer_contacts/{CustomerContactId}/customer_mobiles/{Id}": {
      "get": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile For Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerMobileForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer mobile successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile For Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerMobileForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer mobile to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_mobile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer mobile was updated. Response body will include the customer mobile details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer mobile"
      },
      "delete": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile For Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerMobileForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer mobile was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer mobile for customer contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_mobiles/{Id}": {
      "get": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile For Customer And Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerMobileForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer mobile successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile For Customer And Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerMobileForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer mobile to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_mobile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer mobile was updated. Response body will include the customer mobile details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_mobile"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer mobile"
      },
      "delete": {
        "tags": [
          "Customer Mobiles"
        ],
        "summary": "Customer Mobile For Customer And Customer Contact",
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerMobileForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer mobile.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer mobile was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer mobile for customer and customer contact"
    },
    "/customer_telephones": {
      "get": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephones",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerTelephones",
        "responses": {
          "200": {
            "description": "The collection of customer telephones has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_telephone"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer telephones",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/customer_contacts/{CustomerContactId}/customer_telephones": {
      "get": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephones By Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerTelephonesForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer mobiles has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_telephone"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephones By Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerTelephoneForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer telephone to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_telephone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer telephone was created. Response body will include the customer telephone details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer telephone"
      },
      "x-sage-pathtitle": "Customer telephones by contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_telephones": {
      "get": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephones For Customer And Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerTelephonesForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer telephones has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_telephone"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephones For Customer And Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerTelephoneForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer telephone to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_telephone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer telephone was created. Response body will include the customer telephone details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer telephone"
      },
      "x-sage-pathtitle": "Customer telephones for customer and customer contact"
    },
    "/customer_telephones/{Id}": {
      "get": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerTelephone",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer telephone successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerTelephone",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer telephone to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_telephone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer telephone was updated. Response body will include the customer telephone details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer telephone"
      },
      "delete": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerTelephone",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer telephone was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer telephone"
    },
    "/customer_contacts/{CustomerContactId}/customer_telephones/{Id}": {
      "get": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone For Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerTelephoneForCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer mobile successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone For Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerTelephoneForCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer telephone to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_telephone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer telephone was updated. Response body will include the customer telephone details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer telephone"
      },
      "delete": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone For Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerTelephoneForCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer telephone was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer telephone for customer contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_telephones/{Id}": {
      "get": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone For Customer And Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerTelephoneForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer telephone successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone For Customer And Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerTelephoneForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer telephone to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_telephone"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer telephone was updated. Response body will include the customer telephone details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_telephone"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer telephone"
      },
      "delete": {
        "tags": [
          "Customer Telephones"
        ],
        "summary": "Customer Telephone For Customer And Customer Contact",
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerTelephoneForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer telephone.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer telephone was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer telephone for customer and customer contact"
    },
    "/customer_views": {
      "get": {
        "tags": [
          "Customer Views"
        ],
        "summary": "Customer Views",
        "description": "When making larger requests for customer information, the Customer Views resource can be a faster alternative to the 'Customer' resource. The Customer Views resource also returns a wider breadth of information than the Customer resource. Using Customer Views could therefore reduce the quantity of API requests needed to return the same information from multiple API resources. The default sort (orderby) fields is by 'Id' ascending.",
        "operationId": "GetCustomerViews",
        "responses": {
          "200": {
            "description": "Get a collection of Customers using views.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer views",
      "x-sage-changelog": [
        {
          "date": "25/04/2018",
          "title": "Extended operation",
          "description": "This operation now includes the field 'currency_symbol', which represents the customer currency symbol."
        },
        {
          "date": "16/04/2019",
          "title": "Extended operation",
          "description": "This operation now includes the field 'customer_location_full_address', which represents a concatenation of the address fields separated by a comma."
        },
        {
          "date": "16/04/2019",
          "title": "Extended operation",
          "description": "This operation now includes the field 'account_type', which represents how transactions are stored on individual accounts."
        },
        {
          "date": "16/04/2019",
          "title": "Extended operation",
          "description": "The default sort (orderby) field is by 'reference' ascending."
        },
        {
          "date": "09/05/2019",
          "title": "Extended operation",
          "description": "This operation now supports analysis codes 6-20 in professional."
        },
        {
          "date": "11/06/2020",
          "title": "Extended operation",
          "description": "This operation now supports default contact information, account opened, send copy statement to branch, statement transmission method, invoice payments status."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'account_status_type_id', 'account_type_id', 'account_opened', 'is_over_credit_limit', 'months_to_keep_transactions', 'send_copy_statement_to_branch', 'statement_transmission_method', 'invoice_payments_status', 'contact_name', 'contact_first_name', 'contact_middle_name', 'contact_last_name', 'contact_default_telephone_number', 'contact_default_email_address', 'customer_location_date_time_updated' and 'customer_location_type_id'."
        }
      ]
    },
    "/customer_websites": {
      "get": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Websites",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerWebsites",
        "responses": {
          "200": {
            "description": "The collection of customer websites has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_website"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer websites",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/customer_contacts/{CustomerContactId}/customer_websites": {
      "get": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Websites By Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerWebsitesForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer websites has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_website"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Websites By Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerWebsiteForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer website to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer website was created. Response body will include the customer website details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer website"
      },
      "x-sage-pathtitle": "Customer websites by contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_websites": {
      "get": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Websites For Customer And Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerWebsitesForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer websites has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_website"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Websites For Customer And Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PostCustomerWebsiteForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer website to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer website was created. Response body will include the customer website details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer website"
      },
      "x-sage-pathtitle": "Customer websites for customer and customer contact"
    },
    "/customer_websites/{Id}": {
      "get": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerWebsite",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer website successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerWebsite",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer website to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer website was updated. Response body will include the customer website details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer website"
      },
      "delete": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerWebsite",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer website was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer website"
    },
    "/customer_contacts/{CustomerContactId}/customer_websites/{Id}": {
      "get": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website For Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerWebsiteForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer website successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website For Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerWebsiteForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer website to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer website was updated. Response body will include the customer website details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer website"
      },
      "delete": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website For Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerWebsiteForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer website was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer website for customer contact"
    },
    "/customers/{customerId}/customer_contacts/{CustomerContactId}/customer_websites/{Id}": {
      "get": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website For Customer And Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "GetCustomerWebsiteForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer website successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website For Customer And Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "PutCustomerWebsiteForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer website to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_website"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer website was updated. Response body will include the customer website details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_website"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Customer website"
      },
      "delete": {
        "tags": [
          "Customer Websites"
        ],
        "summary": "Customer Website For Customer And Customer Contact",
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields.",
        "operationId": "DeleteCustomerWebsiteForCustomerAndCustomerContact",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer website.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer website was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer website for customer and customer contact"
    },
    "/customer_contact_roles": {
      "get": {
        "tags": [
          "Customer Contact Roles"
        ],
        "summary": "Customer Contact Roles",
        "description": "Customer contacts can be assigned job roles. Customer contact roles describe roles assigned to a customer contact, including whether the contact is the preferred contact for the customer for a role.",
        "operationId": "GetCustomerContactRoles",
        "responses": {
          "200": {
            "description": "The collection of customer contact roles has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_contact_role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer contact roles",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/customer_contacts/{CustomerContactId}/customer_contact_roles": {
      "get": {
        "tags": [
          "Customer Contact Roles"
        ],
        "summary": "Customer Contact Roles By Contact",
        "description": "Customer contacts can be assigned job roles. Customer contact roles describe roles assigned to a customer contact, including whether the contact is the preferred contact for the customer for a role.",
        "operationId": "GetCustomerContactRolesForCustomerContact",
        "parameters": [
          {
            "name": "CustomerContactId",
            "in": "path",
            "description": "Unique Id of the customer contact.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of customer contact roles has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_contact_role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer contact roles by contact"
    },
    "/customer_contact_roles/{Id}": {
      "get": {
        "tags": [
          "Customer Contact Roles"
        ],
        "summary": "Customer Contact Role",
        "description": "Customer contacts can be assigned job roles. Customer contact roles describe roles assigned to a customer contact, including whether the contact is the preferred contact for the customer for a role.",
        "operationId": "GetCustomerContactRole",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer contact role.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of customer contact role successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_contact_role"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer contact role"
    },
    "/lookup_customers": {
      "get": {
        "tags": [
          "Lookup Customers"
        ],
        "summary": "Lookup Customers",
        "description": "Gets a subset of customer information for populating a lookup.",
        "operationId": "GetLookupCustomers",
        "responses": {
          "200": {
            "description": "Get a collection of Customers for populating a lookup.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/lookup_customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Lookup Customers",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/document_transmission_method_types": {
      "get": {
        "tags": [
          "Document Transmission Method Types"
        ],
        "summary": "Document Transmission Method Types",
        "description": "Document transmission method types. Document transmission can be by 'Post' or 'Email'.<P>The API endpoint returns details of the document transmission method types that can be used.</P>",
        "operationId": "GetDocumentTransmissionMethodTypes",
        "responses": {
          "200": {
            "description": "The details of the document transmission method types have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/document_transmission_method_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Document transmission method types",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/customer_price_bands": {
      "get": {
        "tags": [
          "Customer Price Bands"
        ],
        "summary": "Customer Price Bands",
        "description": "Customer price bands show which customers are linked to which price bands, one customer can have multiple limited price bands, and one price band can be linked to many customers.",
        "operationId": "GetCustomerPriceBands",
        "responses": {
          "200": {
            "description": "Details of the customer price band have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_price_band"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer price bands",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "14/12/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/customer_price_bands/{Id}": {
      "get": {
        "tags": [
          "Customer Price Bands"
        ],
        "summary": "Customer Price Band",
        "description": "Customer price bands show which customers are linked to which price bands, one customer can have multiple limited price bands, and one price band can be linked to many customers.",
        "operationId": "GetCustomerPriceBand",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer price band.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the customer price band have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_price_band"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer price band"
    },
    "/sales_aged_transaction_period_views": {
      "get": {
        "tags": [
          "Sales Aged Transaction Period Views"
        ],
        "summary": "View Of Sales Aged Transaction Periods",
        "description": "Gets Sales aged transaction period views. Specifying a query parameter of '$periodnumber' will produce retrospective aged period values for the period specified. For example, '$periodnumber=0' will produce retrospective aged values for the current period. Specifying a query parameter of '$ageingdatetype' will produce values for the specified ageing type. Acceptable values are 'transactiondate', 'duedate', and 'calendarmonth', to calculate aged debt by Transaction Date, Due Date, or by calendar months. The default sort (orderby) field are by 'customer_id' and 'ageing_period_name' descending.",
        "operationId": "GetAgedTransactionPeriodViews",
        "responses": {
          "200": {
            "description": "The list of sales aged transaction period values has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_aged_transaction_period_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "View of Sales Aged transaction periods"
    },
    "/sales_aged_debtor_detailed_views": {
      "get": {
        "tags": [
          "Sales Aged Debtor Detailed Views"
        ],
        "summary": "Sales Aged Debtor Detailed Views",
        "description": "Gets Sales aged debtor detailed views. Specifying a query parameter of '$ageingdatetype' will produce values for the specified ageing type. Acceptable values are 'transactiondate', 'duedate', and 'calendarmonth', to calculate aged debt by Transaction Date, Due Date, or by calendar months.",
        "operationId": "GetSalesAgedDebtorDetailedViews",
        "responses": {
          "200": {
            "description": "The sales aged debtor detailed views have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_aged_debtor_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales aged debtor detailed views",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/sales_aged_debtor_summary_views": {
      "get": {
        "tags": [
          "Sales Aged Debtor Summary Views"
        ],
        "summary": "Sales Aged Debtor Summary Views",
        "description": "Gets Sales aged debtor summary views. Specifying a query parameter of '$ageingdatetype' will produce values for the specified ageing type. Acceptable values are 'transactiondate', 'duedate', and 'calendarmonth', to calculate aged debt by Transaction Date, Due Date, or by calendar months.",
        "operationId": "GetSalesAgedDebtorSummaryViews",
        "responses": {
          "200": {
            "description": "The sales aged debtor summary views have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_aged_debtor_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales aged debtor summary views",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/sales_allocations": {
      "post": {
        "tags": [
          "Sales Allocations"
        ],
        "summary": "Sales Allocations",
        "description": "Sales transactions can be allocated against each other i.e. receipts against invoices.<br /><br />This API resource can be used to determine which allocations are to be made.",
        "operationId": "PostSalesAllocation",
        "requestBody": {
          "description": "Sales allocation to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_allocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales allocation was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_allocation"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Sales allocation"
      },
      "x-sage-pathtitle": "Sales allocations"
    },
    "/sales_posted_transactions": {
      "get": {
        "tags": [
          "Sales Posted Transactions"
        ],
        "summary": "Sales Posted Transactions",
        "description": "Sales posted transactions are created when transactions, such as orders invoiced, receipts, refunds or credit notes, are posted against the Sales Ledger.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked. When making larger requests for customer information, the Sales Transactions Views resource can be a faster alternative to this resource.<br /><br />It is possible to use this API resource to update a transaction's queried status.",
        "operationId": "GetSalesPostedTransactions",
        "responses": {
          "200": {
            "description": "Get a collection of posted sales transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_posted_transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales posted transactions",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Extended operation",
          "description": "This endpoint was enhanced with a PUT operation."
        },
        {
          "date": "14/12/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/sales_posted_transactions/{Id}": {
      "get": {
        "tags": [
          "Sales Posted Transactions"
        ],
        "summary": "Sales Posted Transaction",
        "description": "Sales posted transactions are created when transactions, such as orders invoiced, receipts, refunds or credit notes, are posted against the Sales Ledger.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked. When making larger requests for customer information, the Sales Transactions Views resource can be a faster alternative to this resource.<br /><br />It is possible to use this API resource to update a transaction's queried status.",
        "operationId": "GetSalesPostedTransaction",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the transaction.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single posted sales transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_posted_transaction"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Sales Posted Transactions"
        ],
        "summary": "Sales Posted Transaction",
        "description": "Sales posted transactions are created when transactions, such as orders invoiced, receipts, refunds or credit notes, are posted against the Sales Ledger.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked. When making larger requests for customer information, the Sales Transactions Views resource can be a faster alternative to this resource.<br /><br />It is possible to use this API resource to update a transaction's queried status.",
        "operationId": "PutSalesPostedTransactions",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "The unique Id of the sales posted transaction.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Sales posted transaction to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_posted_transaction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales posted transaction was updated. Response body will include the sales posted transaction details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_posted_transaction"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "SalesPostedTransaction"
      },
      "x-sage-pathtitle": "Sales posted transaction"
    },
    "/customers/{customerId}/sales_posted_transactions": {
      "get": {
        "tags": [
          "Sales Posted Transactions"
        ],
        "summary": "Sales Posted Transactions For Customer",
        "description": "Sales posted transactions are created when transactions, such as orders invoiced, receipts, refunds or credit notes, are posted against the Sales Ledger.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked. When making larger requests for customer information, the Sales Transactions Views resource can be a faster alternative to this resource.",
        "operationId": "GetSalesPostedTransactionsForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return transactions for a single customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_posted_transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales posted transactions for Customer"
    },
    "/sales_transaction_enquiry_views": {
      "get": {
        "tags": [
          "Sales Transaction Enquiry Views"
        ],
        "summary": "Sales Transaction Enquiry Views",
        "description": "Sales transaction enquiry views represent sales transactions such as orders invoiced, receipts, refunds or credit notes, that are posted against the Sales Ledger.",
        "operationId": "GetSalesTransactionEnquiryViews",
        "responses": {
          "200": {
            "description": "Get a collection of sales transaction enquiry views.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_transaction_enquiry_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales transaction enquiry views",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/sales_transaction_enquiry_views/{Id}": {
      "get": {
        "tags": [
          "Sales Transaction Enquiry Views"
        ],
        "summary": "Sales Transaction Enquiry View",
        "description": "Sales transaction enquiry views represent sales transactions such as orders invoiced, receipts, refunds or credit notes, that are posted against the Sales Ledger.",
        "operationId": "GetSalesTransactionEnquiryView",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the transaction.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single sales transaction enquiry view.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_transaction_enquiry_view"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales transaction enquiry view"
    },
    "/customers/{customerId}/sales_transaction_enquiry_views": {
      "get": {
        "tags": [
          "Sales Transaction Enquiry Views"
        ],
        "summary": "Sales Transaction Enquiry Views Transactions For Customer",
        "description": "Sales transaction enquiry views represent sales transactions such as orders invoiced, receipts, refunds or credit notes, that are posted against the Sales Ledger.",
        "operationId": "GetSalesTransactionsEnquiryViewsForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return transactions for a single customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_transaction_enquiry_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales transaction enquiry views transactions for Customer"
    },
    "/sales_posted_transaction_memos": {
      "get": {
        "tags": [
          "Sales Posted Transaction Memos"
        ],
        "summary": "Sales Posted Transaction Memos",
        "description": "Memos are comments that are made about a sales posted transaction.<br/><br/>Multiple memos can be added to each sales posted transaction. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetSalesPostedTransactionMemos",
        "responses": {
          "200": {
            "description": "The list of sales posted transaction memos has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_posted_transaction_memo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Sales Posted Transaction Memos"
        ],
        "summary": "Sales Posted Transaction Memos",
        "description": "Memos are comments that are made about a sales posted transaction.<br/><br/>Multiple memos can be added to each sales posted transaction. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "PostSalesPostedTransactionMemo",
        "requestBody": {
          "description": "Sales posted transaction memo to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_posted_transaction_memo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales posted transaction memo was created. Response body will include the sales posted transaction memo details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_posted_transaction_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "SalesPostedTransactionMemo"
      },
      "x-sage-pathtitle": "Sales posted transaction memos",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/sales_posted_transaction_memos/{Id}": {
      "get": {
        "tags": [
          "Sales Posted Transaction Memos"
        ],
        "summary": "Sales Posted Transaction Memo",
        "description": "Memos are comments that are made about a sales posted transaction.<br/><br/>Multiple memos can be added to each sales posted transaction. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetSalesPostedTransactionMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the sales posted transaction memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of sales posted transaction memo successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_posted_transaction_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Sales Posted Transaction Memos"
        ],
        "summary": "Sales Posted Transaction Memo",
        "description": "Memos are comments that are made about a sales posted transaction.<br/><br/>Multiple memos can be added to each sales posted transaction. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "PutSalesPostedTransactionMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the sales posted transaction memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Sales posted transaction memo to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_posted_transaction_memo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales posted transaction memo was updated. Response body will include the sales posted transaction memo details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_posted_transaction_memo"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "SalesPostedTransactionMemo"
      },
      "delete": {
        "tags": [
          "Sales Posted Transaction Memos"
        ],
        "summary": "Sales Posted Transaction Memo",
        "description": "Memos are comments that are made about a sales posted transaction.<br/><br/>Multiple memos can be added to each sales posted transaction. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "DeleteSalesPostedTransactionMemo",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the sales posted transaction memo.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales posted transaction memo was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales posted transaction memo"
    },
    "/sales_posted_transactions/{transactionId}/sales_posted_transaction_memos": {
      "get": {
        "tags": [
          "Sales Posted Transaction Memos"
        ],
        "summary": "Sales Posted Transaction Memos For Sales Posted Transaction",
        "description": "Memos are comments that are made about a sales posted transaction.<br/><br/>Multiple memos can be added to each sales posted transaction. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them.",
        "operationId": "GetMemosForSalesPostedTransaction",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "Unique Id of the sales posted transaction.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of memos for a sales posted transaction has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_posted_transaction_memo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales posted transaction memos for sales posted transaction"
    },
    "/sales_historical_transactions": {
      "get": {
        "tags": [
          "Sales Historical Transactions"
        ],
        "summary": "Sales Historical Transactions",
        "description": "Sales historical transactions are created when transactions are archived from the Sales Ledger.<br /><br />It is not possible to use this API resource to create historical transactions.",
        "operationId": "GetSalesHistoricalTransactions",
        "responses": {
          "200": {
            "description": "Get a collection of historical sales transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_historical_transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales historical transactions",
      "x-sage-changelog": [
        {
          "date": "14/12/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        }
      ]
    },
    "/sales_historical_transactions/{Id}": {
      "get": {
        "tags": [
          "Sales Historical Transactions"
        ],
        "summary": "Sales Historical Transaction",
        "description": "Sales historical transactions are created when transactions are archived from the Sales Ledger.<br /><br />It is not possible to use this API resource to create historical transactions.",
        "operationId": "GetSalesHistoricalTransaction",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the transaction.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single historical sales transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_historical_transaction"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales historical transaction"
    },
    "/customers/{customerId}/sales_historical_transactions": {
      "get": {
        "tags": [
          "Sales Historical Transactions"
        ],
        "summary": "Sales Historical Transactions For Customer",
        "description": "Sales historical transactions are created when transactions are archived from the Sales Ledger.<br /><br />It is not possible to use this API resource to create historical transactions.",
        "operationId": "GetSalesHistoricalTransactionsForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return transactions for a single customer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_historical_transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales historical transactions for Customer"
    },
    "/sales_transaction_views": {
      "get": {
        "tags": [
          "Sales Transaction Views"
        ],
        "summary": "Sales Transaction Views",
        "description": "When making larger API requests for transaction information from the Sales ledger, the Sales Transaction Views resource can be a faster alternative to the 'Sales Posted Transactions' resource.<br /><br />The Sales Transaction Views resource also returns a wider breadth of information than the Sales Posted Transactions. By using the Sales Transaction Views resource, the quantity of API requests can be reduced, when returning the same information from multiple API resources. The default sort (orderby) field is by 'posted_customer_transaction_id' ascending.",
        "operationId": "GetSalesTransactionViews",
        "responses": {
          "200": {
            "description": "The details of the sales transaction views have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_transaction_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales transaction views",
      "x-sage-changelog": [
        {
          "date": "25/04/2018",
          "title": "Extended operation",
          "description": "This operation now includes the field 'currency_symbol', which represents the customer currency symbol."
        },
        {
          "date": "16/04/2019",
          "title": "Extended operation",
          "description": "The default sort (orderby) field is by 'posted_customer_transaction_id' ascending."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'transaction_date_time_updated'.<br />This operation has had the fields 'date_time_updated' removed."
        }
      ]
    },
    "/customer_sop_invoice_credit_line_views": {
      "get": {
        "tags": [
          "Customer SOP Invoice Credit Line Views"
        ],
        "summary": "Customer SOP Invoice Credit Line Views",
        "description": "This resource returns a view of related customers, sales invoice credits, sales invoice credit lines, invoice line profit analysis, products, and product groups that can be queried on any field. The default sort (orderby) fields are by 'sop_invoice_credit_id' and 'sop_invoice_credit_line_id' descending.",
        "operationId": "GetCustomerSOPInvoiceCreditLineViews",
        "responses": {
          "200": {
            "description": "The details of the customer SOP invoice credit line views have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_sop_invoice_credit_line_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer SOP invoice credit line views",
      "x-sage-changelog": [
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint field",
          "description": "This operation has had the field 'sop_order_line_type' removed."
        }
      ]
    },
    "/sales_credit_notes": {
      "post": {
        "tags": [
          "Sales Credit Notes"
        ],
        "summary": "Sales Credit Notes",
        "description": "Use this resource to enter credit notes directly onto to a particular customer's account. Credit notes are typically used when issuing refunds, returns, etc and reduces the turnover for the relevant customer's account.<br /><br />Posting a credit note does not actually create a 'credit note' entity, but a Posted Transaction of type 'TradingAccountEntryTypeCreditNote', therefore it is not possible to 'get' a credit note using the same API endpoint after it has been posted. Posting a sales credit note returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.",
        "operationId": "PostSalesCreditNote",
        "requestBody": {
          "description": "Sales credit note to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_credit_note"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales credit note was created. Response body will include the urn of the transactions created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/urn"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Sales credit note"
      },
      "x-sage-pathtitle": "Sales credit notes"
    },
    "/sales_credit_notes_new": {
      "post": {
        "tags": [
          "Sales Credit Notes"
        ],
        "summary": "Sales Credit Notes New",
        "description": "Returns a sales credit note with all the default values for a customer. The API endpoint does not persist the sales credit note.",
        "operationId": "PostSalesCreditNotesNew",
        "requestBody": {
          "description": "A customer request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_credit_note_new_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The default credit note information was returned and included in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_credit_note"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "SalesCreditNoteNew"
      },
      "x-sage-pathtitle": "Sales Credit Notes New",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/sales_invoices": {
      "post": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "Sales Invoices",
        "description": "Invoices are used to record a sale against a particular customer's account.<br /><br />Posting a sales invoice does not actually create a 'sales invoice' entity, but a Posted Transaction of type 'TradingAccountEntryTypeInvoice', therefore it is not possible to 'get' a sales invoice using the same API endpoint after it has been posted. Posting a sales invoice returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.",
        "operationId": "PostSalesInvoice",
        "requestBody": {
          "description": "Sales invoice to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_invoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales invoice was created. Response body will include the urn of the transactions created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/urn"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Sales invoice"
      },
      "x-sage-pathtitle": "Sales invoices"
    },
    "/sales_invoices_new": {
      "post": {
        "tags": [
          "Sales Invoices"
        ],
        "summary": "Sales Invoices New",
        "description": "Returns a sales invoice with all the default values for a customer. The API endpoint does not persist the sales invoice.",
        "operationId": "PostSalesInvoicesNew",
        "requestBody": {
          "description": "A customer request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_invoice_new_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The default invoice information was returned and included in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_invoice"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "SalesInvoiceNew"
      },
      "x-sage-pathtitle": "Sales Invoices New",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/sales_payments": {
      "post": {
        "tags": [
          "Sales Payments"
        ],
        "summary": "Sales Payments",
        "description": "Payments are used to record a sales payment against a particular customer's account.<br /><br />Posting a sales payment does not actually create a 'sales payment' entity, but a Posted Transaction of type 'TradingAccountEntryTypePurchaseReceiptSalesPayment', therefore it is not possible to 'get' a sales payment using the same API endpoint after it has been posted. Posting a sales payment returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting sales payments via the API, at least one bank account must exist within Sage 200.",
        "operationId": "PostSalesPayment",
        "requestBody": {
          "description": "Sales payment to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_payment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales payment was created. Response body will include the urn of the transactions created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/urn"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Sales payment"
      },
      "x-sage-pathtitle": "Sales payments"
    },
    "/sales_receipts": {
      "post": {
        "tags": [
          "Sales Receipts"
        ],
        "summary": "Sales Receipts",
        "description": "Receipts are used to record a sales receipt against a particular customer's account.<br /><br />Posting a sales receipt does not actually create a 'sales receipt' entity, but a Posted Transaction of type 'TradingAccountEntryTypePurchasePaymentSalesReceipt', therefore it is not possible to 'get' a sales receipt using the same API endpoint after it has been posted. Posting a sales receipt returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting sales receipts via the API, at least one bank account must exist within Sage 200.",
        "operationId": "PostSalesReceipt",
        "requestBody": {
          "description": "Sales receipt to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_receipt"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The sales receipt was created. Response body will include the urn of the transactions created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/urn"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Sales receipt"
      },
      "x-sage-pathtitle": "Sales receipts"
    },
    "/customer_price_enquiry": {
      "post": {
        "tags": [
          "Customer Price Enquiry"
        ],
        "summary": "Customer Price Enquiry",
        "description": "Returns the price of a product, and any available discount, for the specified customer. This includes any discounts based on the quantity specified. In Sage 200, product prices are set on price bands and then linked to customer accounts. Discounts are set per product, or product group and then linked to customer accounts.",
        "operationId": "PostCustomerPriceEnquiry",
        "requestBody": {
          "description": "Details of the price enquiry.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_price_enquiry_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer price enquiry was created. Response body will include the customer price enquiry details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_price_enquiry"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Price enquiry request"
      },
      "x-sage-pathtitle": "Customer Price Enquiry",
      "x-sage-changelog": [
        {
          "date": "04/03/2016",
          "title": "Extended operation",
          "description": "This operation now includes the fields 'include_previous_prices' and 'previous_prices'. When 'include_previous_prices' is set to true then the 'previous_prices' property will contain the last five prices that the customer has paid for the product from Sales Orders."
        },
        {
          "date": "05/02/2016",
          "title": "Extended operation",
          "description": "This operation now includes the fields 'discounted_unit_price', selling_unit_multiple' and 'pricing_unit_multiple', which contain the discounted price per unit of the product for the selected customer and the associated selling and pricing multiples."
        },
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'product_type'."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'selling_unit_id' and 'pricing_unit_id'."
        }
      ]
    },
    "/customer_delivery_addresses": {
      "get": {
        "tags": [
          "Customer Delivery Addresses"
        ],
        "summary": "Customer Delivery Addresses Collection",
        "description": "Delivery addresses for sales orders can be stored against each customer.",
        "operationId": "GetCustomerDeliveryAddresses",
        "responses": {
          "200": {
            "description": "The list of customer delivery addresses is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_delivery_address"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Customer Delivery Addresses"
        ],
        "summary": "Customer Delivery Addresses Collection",
        "description": "Customer delivery address for sales order to add.",
        "operationId": "PostCustomerDeliveryAddress",
        "requestBody": {
          "description": "Customer delivery address for sales order to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_delivery_address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer delivery address was created. Response body will include the customer delivery address details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_delivery_address"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "customer_delivery_address"
      },
      "x-sage-pathtitle": "Customer Delivery Addresses Collection",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'date_time_created'."
        },
        {
          "date": "26/07/2021",
          "title": "Extended operations",
          "description": "This endpoint was enhanced with POST, PUT and DELETE operations."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'country_code_id', 'customer', 'address_country_code', 'tax_code' and 'country_code'."
        }
      ]
    },
    "/customer_delivery_addresses/{Id}": {
      "get": {
        "tags": [
          "Customer Delivery Addresses"
        ],
        "summary": "Single Customer Delivery Address Resource",
        "description": "Customer delivery addresses for sales orders can be stored against each customer.",
        "operationId": "GetCustomerDeliveryAddress",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer delivery address",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One or more customer delivery addresses are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_delivery_address"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Customer Delivery Addresses"
        ],
        "summary": "Single Customer Delivery Address Resource",
        "description": "Customer delivery addresses for sales orders can be stored against each customer.",
        "operationId": "PutCustomerDeliveryAddress",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer delivery address.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Customer delivery address details to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer_delivery_address"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The customer delivery address was updated. Response body will include the customer delivery address details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_delivery_address"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "CustomerDeliveryAddress"
      },
      "delete": {
        "tags": [
          "Customer Delivery Addresses"
        ],
        "summary": "Single Customer Delivery Address Resource",
        "description": "Customer delivery addresses for sales orders can be stored against each customer.",
        "operationId": "DeleteCustomerDeliveryAddress",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the customer delivery address.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer delivery address was deleted.",
            "content": {}
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Single Customer Delivery Address Resource"
    },
    "/customers/{customerId}/customer_delivery_addresses": {
      "get": {
        "tags": [
          "Customer Delivery Addresses"
        ],
        "summary": "Customer Delivery Addresses For Customer",
        "description": "Delivery addresses for sales orders can be stored against each customer.",
        "operationId": "GetCustomerDeliveryAddressesForCustomer",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Unique Id of the customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the customer delivery addresses are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_delivery_address"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer delivery addresses for customer"
    },
    "/sales_ledger_settings": {
      "get": {
        "tags": [
          "Sales Ledger Settings"
        ],
        "summary": "Sales Ledger Settings",
        "description": "The Sales Ledger settings are used to configure application behaviour with respect to the Sales Ledger module.<br/><br/>Settings include whether to automatically generate customer account numbers, the customer default tax code, etc.",
        "operationId": "GetSalesLedgerSettings",
        "responses": {
          "200": {
            "description": "Sales Ledger settings successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/sales_ledger_settings"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Sales Ledger settings",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        },
        {
          "date": "26/07/2021",
          "title": "Enhanced endpoint fields",
          "description": "This operation now includes the fields 'use_account_periods_as_trading_periods', 'date_time_created' and 'date_time_updated'."
        },
        {
          "date": "20/02/2023",
          "title": "Enhanced endpoint field",
          "description": "This operation now includes the field 'use_transaction_date_for_allocation'."
        }
      ]
    },
    "/sales_ledger_settings/{Id}": {
      "get": {
        "tags": [
          "Sales Ledger Settings"
        ],
        "summary": "Sales Ledger Setting",
        "description": "The Sales Ledger settings are used to configure application behaviour with respect to the Sales Ledger module.<br/><br/>Settings include whether to automatically generate customer account numbers, the customer default tax code, etc.",
        "operationId": "GetSalesLedgerSetting",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the Sales Ledger settings.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales Ledger settings successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_ledger_settings"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Sales Ledger Settings"
        ],
        "summary": "Sales Ledger Setting",
        "description": "Update the Sales Ledger settings.",
        "operationId": "PutSalesLedgerSetting",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the Sales Ledger settings.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Sales Ledger settings to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sales_ledger_settings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Sales Ledger settings were updated. Response body will include the Sales Ledger settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sales_ledger_settings"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "SalesLedgerSettings"
      },
      "x-sage-pathtitle": "Sales Ledger setting"
    },
    "/finance_charges": {
      "get": {
        "tags": [
          "Finance Charges"
        ],
        "summary": "Finance Charges",
        "description": "Use finance charges to add interest or finance charges to overdue customer invoices. (Sage 200 Professional only).",
        "operationId": "GetFinanceCharges",
        "responses": {
          "200": {
            "description": "Finance charges successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/finance_charge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Finance charges",
      "x-sage-professional-only": true,
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/finance_charges/{Id}": {
      "get": {
        "tags": [
          "Finance Charges"
        ],
        "summary": "Finance Charge",
        "description": "Use finance charges to add interest or finance charges to overdue customer invoices. (Sage 200 Professional only).",
        "operationId": "GetFinanceCharge",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the Finance charge.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Finance charges successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/finance_charge"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Finance Charges"
        ],
        "summary": "Finance Charge",
        "description": "Update the Finance charge.",
        "operationId": "PutFinanceCharge",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Unique Id of the Finance charge.",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Finance charge to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/finance_charge"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Finance charge was updated. Response body will include the Finance charge.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/finance_charge"
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "FinanceCharge"
      },
      "x-sage-pathtitle": "Finance charge",
      "x-sage-professional-only": true
    },
    "/statement_terms": {
      "get": {
        "tags": [
          "Statement Terms"
        ],
        "summary": "Statement Terms",
        "description": "Gets the list of Customer statement terms which can be used. For example, \"All transactions\", or \"Outstanding only\".",
        "operationId": "GetStatementTerms",
        "responses": {
          "200": {
            "description": "The list of statement terms has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/statement_terms"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Statement terms",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/statement_ageing_terms": {
      "get": {
        "tags": [
          "Statement Ageing Terms"
        ],
        "summary": "Statement Ageing Terms",
        "description": "Gets the list of Customer statement ageing terms which can be used. For example, \"Use transaction date\", or \"Use due date\".",
        "operationId": "GetStatementAgeingTerms",
        "responses": {
          "200": {
            "description": "The list of statement ageing terms has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/statement_ageing_terms"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Statement ageing terms",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/head_office_types": {
      "get": {
        "tags": [
          "Head Office Types"
        ],
        "summary": "Head Office Types",
        "description": "Head office types are used to have several customers set up for the same company and statements for all customers need to be sent to the head office for a customer that exists within the application. Customers can be 'Independent', 'Branch', 'Head Office', 'Independent No Statement' or 'Head Office No Statement'.<P>The API endpoint returns details of the head office types that can be used.</P>",
        "operationId": "GetHeadOfficeTypes",
        "responses": {
          "200": {
            "description": "The list of head office types has been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/head_office_type"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Head office types",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/customer_period_value_views": {
      "get": {
        "tags": [
          "Customer Period Value Views"
        ],
        "summary": "Customer Period Value Views",
        "description": "This resource returns customer values (total invoices, total credit notes, total cash, etc.) for all periods for all financial years held for the company. A company always has five future financial years and can have unlimited previous years, depending on how long the company has been operating. The default sort (orderby) field are by 'customer_reference', 'customer_analysis_period_id', 'customer_period_value_id' ascending.",
        "operationId": "GetCustomerPeriodValueViews",
        "responses": {
          "200": {
            "description": "The details of the customer period values have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_period_value_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer period value views",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    },
    "/customer_year_value_views": {
      "get": {
        "tags": [
          "Customer Year Value Views"
        ],
        "summary": "Customer Year Value Views",
        "description": "This resource returns customer values (total invoices, total credit notes, total cash, etc.) for all financial years held for the company. A company always has five future financial years and can have unlimited previous years, depending on how long the company has been operating. The default sort (orderby) field are by 'financial_year_end_date', 'customer_year_value_id' ascending.",
        "operationId": "GetCustomerYearValueViews",
        "responses": {
          "200": {
            "description": "The details of the customer year values have been successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_year_value_view"
                  }
                }
              }
            }
          },
          "400": {
            "description": "There was a problem with the request. Request body will include details.",
            "content": {}
          }
        }
      },
      "x-sage-pathtitle": "Customer year value views",
      "x-sage-changelog": [
        {
          "date": "16/09/2020",
          "title": "New endpoint",
          "description": "This endpoint was added."
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "customer": {
        "required": [
          "name",
          "reference"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer unique Id.",
            "format": "int64",
            "readOnly": true
          },
          "reference": {
            "maxLength": 8,
            "type": "string",
            "description": "Customer account reference. Note: For Sage 200 Professional this is not required if customer reference is set to &quot;generate automatically&quot; inside the Sage 200 application settings."
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer name."
          },
          "short_name": {
            "maxLength": 8,
            "type": "string",
            "description": "Customer short name."
          },
          "balance": {
            "type": "number",
            "description": "Customer account balance.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "on_hold": {
            "type": "boolean",
            "description": "True if customer account is on hold, else False.",
            "default": false
          },
          "status_reason": {
            "maxLength": 256,
            "type": "string",
            "description": "Reason for change in account status."
          },
          "account_status_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The status of the customer account (Sage 200 Standard and versions of Professional released after July 2017). For example, this can either be 'Active' or 'Hidden'.",
            "default": "AccountStatusActive"
          },
          "currency_id": {
            "type": "integer",
            "description": "Currency record Id. This defaults to the base currency Id.",
            "format": "int64"
          },
          "exchange_rate_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The type of exchange rate used on the customer account.",
            "default": "ExchangeRateSingle"
          },
          "telephone_country_code": {
            "maxLength": 5,
            "type": "string",
            "description": "Telephone country code."
          },
          "telephone_area_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Telephone area code."
          },
          "telephone_subscriber_number": {
            "maxLength": 200,
            "type": "string",
            "description": "Telephone subscriber number."
          },
          "fax_country_code": {
            "maxLength": 5,
            "type": "string",
            "description": "Fax country code."
          },
          "fax_area_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Fax area code."
          },
          "fax_subscriber_number": {
            "maxLength": 200,
            "type": "string",
            "description": "Fax subscriber number."
          },
          "website": {
            "maxLength": 200,
            "type": "string",
            "description": "Website address."
          },
          "credit_limit": {
            "type": "number",
            "description": "Credit limit for the customer.",
            "format": "decimal 2dp"
          },
          "country_code_id": {
            "type": "integer",
            "description": "Country code record Id.",
            "format": "int64"
          },
          "default_tax_code_id": {
            "type": "integer",
            "description": "Default tax code record Id. This defaults to the configured tax code Id for the customer.",
            "format": "int64"
          },
          "vat_number": {
            "maxLength": 30,
            "type": "string",
            "description": "VAT registration number."
          },
          "duns_code": {
            "maxLength": 9,
            "type": "string",
            "description": "DUNS number."
          },
          "account_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The account type is used to decide how transactions are stored on individual accounts.",
            "default": "TradingAccountTypeOpenItem"
          },
          "early_settlement_discount_percent": {
            "type": "number",
            "description": "The discount percentage offered to customers.",
            "format": "decimal 2dp"
          },
          "early_settlement_discount_days": {
            "type": "integer",
            "description": "The number of days an invoice must be paid within to qualify for the discount.",
            "format": "int16"
          },
          "payment_terms_days": {
            "type": "integer",
            "description": "The number of days which, together with the payment terms basis, determines the due date for invoices.",
            "format": "int16"
          },
          "payment_terms_basis": {
            "maxLength": 20,
            "type": "string",
            "description": "The payment terms which, together with the payment terms (days), determines the due date of invoices."
          },
          "average_time_to_pay": {
            "type": "integer",
            "description": "The customer average time to pay.",
            "format": "int32",
            "readOnly": true
          },
          "terms_agreed": {
            "type": "boolean",
            "description": "True if customer terms have been agreed else False."
          },
          "value_of_current_orders_in_sop": {
            "type": "number",
            "description": "Value of current sales orders for this customer.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "credit_bureau_id": {
            "type": "integer",
            "description": "Credit bureau record Id.",
            "format": "int64"
          },
          "credit_position_id": {
            "type": "integer",
            "description": "Credit position record Id.",
            "format": "int64"
          },
          "finance_charge_id": {
            "type": "integer",
            "description": "Finance charge record Id. (Sage 200 Professional only).",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "trading_terms": {
            "maxLength": 30,
            "type": "string",
            "description": "Trading terms."
          },
          "credit_reference": {
            "maxLength": 60,
            "type": "string",
            "description": "Credit reference."
          },
          "account_opened": {
            "type": "string",
            "description": "The date the account was opened.",
            "format": "date-time"
          },
          "last_credit_review": {
            "type": "string",
            "description": "The date of the last credit review.",
            "format": "date-time"
          },
          "next_credit_review": {
            "type": "string",
            "description": "The date of the next credit review.",
            "format": "date-time"
          },
          "application_date": {
            "type": "string",
            "description": "The application date.",
            "format": "date-time"
          },
          "date_received": {
            "type": "string",
            "description": "The date received.",
            "format": "date-time"
          },
          "date_finance_charge_last_run": {
            "type": "string",
            "description": "Date finance charge last run for this customer.",
            "format": "date-time",
            "readOnly": true
          },
          "office_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The type of office (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "associated_head_office_id": {
            "type": "integer",
            "description": "Associated head office Id (Sage 200 Professional only).",
            "format": "int64",
            "x-sage-professional-only": true
          },
          "produce_statements_for_customer": {
            "type": "boolean",
            "description": "True if statements are to be produced else False (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "is_head_office_with_branches": {
            "type": "boolean",
            "description": "True if customer is a Head Office with associated branches; otherwise False (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "use_consolidated_billing": {
            "type": "boolean",
            "description": "True if consolidated billing is to be used else False (Sage 200 Professional only).",
            "x-sage-professional-only": true
          },
          "order_priority": {
            "maxLength": 1,
            "type": "string",
            "description": "Order priority."
          },
          "use_tax_code_as_default": {
            "type": "boolean",
            "description": "True if tax code is used as the order and invoice default else False."
          },
          "months_to_keep_transactions": {
            "type": "integer",
            "description": "The number of months to keep transactions.",
            "format": "int16"
          },
          "default_nominal_code_id": {
            "type": "integer",
            "description": "Default nominal code record Id.",
            "format": "int64",
            "readOnly": true
          },
          "default_nominal_code_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "Default nominal code reference."
          },
          "default_nominal_code_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "Default nominal code cost centre."
          },
          "default_nominal_code_department": {
            "maxLength": 3,
            "type": "string",
            "description": "Default nominal code department."
          },
          "invoice_discount_percent": {
            "type": "number",
            "description": "Invoice discount percentage for the customer.",
            "format": "decimal 2dp"
          },
          "invoice_line_discount_percent": {
            "type": "number",
            "description": "Invoice line discount percentage for the customer.",
            "format": "decimal 2dp"
          },
          "customer_discount_group_id": {
            "type": "integer",
            "description": "Customer discount group Id for the customer.",
            "format": "int64"
          },
          "order_value_discount_id": {
            "type": "integer",
            "description": "Order value discount Id for the customer.",
            "format": "int64"
          },
          "price_band_id": {
            "type": "integer",
            "description": "Price band Id for the customer.",
            "format": "int64"
          },
          "analysis_code_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 1."
          },
          "analysis_code_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 2."
          },
          "analysis_code_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 3."
          },
          "analysis_code_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 4."
          },
          "analysis_code_5": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 5."
          },
          "analysis_code_6": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 6."
          },
          "analysis_code_7": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 7."
          },
          "analysis_code_8": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 8."
          },
          "analysis_code_9": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 9."
          },
          "analysis_code_10": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 10."
          },
          "analysis_code_11": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 11."
          },
          "analysis_code_12": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 12."
          },
          "analysis_code_13": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 13."
          },
          "analysis_code_14": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 14."
          },
          "analysis_code_15": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 15."
          },
          "analysis_code_16": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 16."
          },
          "analysis_code_17": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 17."
          },
          "analysis_code_18": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 18."
          },
          "analysis_code_19": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 19."
          },
          "analysis_code_20": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 20."
          },
          "spare_text_1": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 1."
          },
          "spare_text_2": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 2."
          },
          "spare_text_3": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 3."
          },
          "spare_text_4": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 4."
          },
          "spare_text_5": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 5."
          },
          "spare_text_6": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 6."
          },
          "spare_text_7": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 7."
          },
          "spare_text_8": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 8."
          },
          "spare_text_9": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 9."
          },
          "spare_text_10": {
            "maxLength": 100,
            "type": "string",
            "description": "Spare text 10."
          },
          "spare_number_1": {
            "type": "number",
            "description": "Spare number 1.",
            "format": "decimal 5dp"
          },
          "spare_number_2": {
            "type": "number",
            "description": "Spare number 2.",
            "format": "decimal 5dp"
          },
          "spare_number_3": {
            "type": "number",
            "description": "Spare number 3.",
            "format": "decimal 5dp"
          },
          "spare_number_4": {
            "type": "number",
            "description": "Spare number 4.",
            "format": "decimal 5dp"
          },
          "spare_number_5": {
            "type": "number",
            "description": "Spare number 5.",
            "format": "decimal 5dp"
          },
          "spare_number_6": {
            "type": "number",
            "description": "Spare number 6.",
            "format": "decimal 5dp"
          },
          "spare_number_7": {
            "type": "number",
            "description": "Spare number 7.",
            "format": "decimal 5dp"
          },
          "spare_number_8": {
            "type": "number",
            "description": "Spare number 8.",
            "format": "decimal 5dp"
          },
          "spare_number_9": {
            "type": "number",
            "description": "Spare number 9.",
            "format": "decimal 5dp"
          },
          "spare_number_10": {
            "type": "number",
            "description": "Spare number 10.",
            "format": "decimal 5dp"
          },
          "spare_date_1": {
            "type": "string",
            "description": "Spare date 1 (UTC).",
            "format": "date-time"
          },
          "spare_date_2": {
            "type": "string",
            "description": "Spare date 2 (UTC).",
            "format": "date-time"
          },
          "spare_date_3": {
            "type": "string",
            "description": "Spare date 3 (UTC).",
            "format": "date-time"
          },
          "spare_date_4": {
            "type": "string",
            "description": "Spare date 4 (UTC).",
            "format": "date-time"
          },
          "spare_date_5": {
            "type": "string",
            "description": "Spare date 5 (UTC).",
            "format": "date-time"
          },
          "spare_bool_1": {
            "type": "boolean",
            "description": "Spare bool 1.",
            "default": false
          },
          "spare_bool_2": {
            "type": "boolean",
            "description": "Spare bool 2.",
            "default": false
          },
          "spare_bool_3": {
            "type": "boolean",
            "description": "Spare bool 3.",
            "default": false
          },
          "spare_bool_4": {
            "type": "boolean",
            "description": "Spare bool 4.",
            "default": false
          },
          "spare_bool_5": {
            "type": "boolean",
            "description": "Spare bool 5.",
            "default": false
          },
          "associated_head_office": {
            "type": "object",
            "properties": {},
            "description": "The customers head office (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "country_code": {
            "type": "object",
            "properties": {},
            "description": "The customers country code.",
            "readOnly": true
          },
          "credit_bureau": {
            "type": "object",
            "properties": {},
            "description": "The customers credit bureau.",
            "readOnly": true
          },
          "credit_memo_note": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Memo note Id.",
                "format": "int64",
                "readOnly": true
              },
              "note": {
                "maxLength": 1000,
                "type": "string",
                "description": "Note."
              },
              "created_by": {
                "maxLength": 50,
                "type": "string",
                "description": "Which user created the note.",
                "readOnly": true
              },
              "date_time_created": {
                "type": "string",
                "description": "The date and time this entity was created (UTC).",
                "format": "date-time",
                "readOnly": true
              },
              "date_time_updated": {
                "type": "string",
                "description": "The date and time this entity was last updated (UTC).",
                "format": "date-time",
                "readOnly": true
              }
            },
            "description": "The customers credit memo note."
          },
          "credit_position": {
            "type": "object",
            "properties": {},
            "description": "The customers credit position.",
            "readOnly": true
          },
          "currency": {
            "type": "object",
            "properties": {},
            "description": "The customers currency.",
            "readOnly": true
          },
          "customer_discount_group": {
            "type": "object",
            "properties": {},
            "description": "The customers discount group.",
            "readOnly": true
          },
          "default_nominal_code": {
            "type": "object",
            "properties": {},
            "description": "The default nominal code to be used in transactions for the customer.",
            "readOnly": true
          },
          "default_tax_code": {
            "type": "object",
            "properties": {},
            "description": "The default tax code to be used in transactions for the customer.",
            "readOnly": true
          },
          "finance_charge": {
            "type": "object",
            "properties": {},
            "description": "The customers finance charge. (Sage 200 Professional only).",
            "readOnly": true,
            "x-sage-professional-only": true
          },
          "main_address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Customer main address Id.",
                "format": "int64",
                "readOnly": true
              },
              "customer_id": {
                "type": "integer",
                "description": "Customer Id.",
                "format": "int64",
                "readOnly": true
              },
              "address_1": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 1."
              },
              "address_2": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 2."
              },
              "address_3": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 3."
              },
              "address_4": {
                "maxLength": 60,
                "type": "string",
                "description": "Address line 4."
              },
              "city": {
                "maxLength": 60,
                "type": "string",
                "description": "City."
              },
              "county": {
                "maxLength": 60,
                "type": "string",
                "description": "County."
              },
              "postcode": {
                "maxLength": 10,
                "type": "string",
                "description": "Postcode."
              },
              "country": {
                "maxLength": 60,
                "type": "string",
                "description": "Country.",
                "readOnly": true
              },
              "contact_name": {
                "maxLength": 235,
                "type": "string",
                "description": "Contact Name.",
                "readOnly": true
              },
              "address_country_code_id": {
                "type": "integer",
                "description": "Country code Id",
                "format": "int64"
              },
              "address_country_code": {
                "type": "object",
                "properties": {},
                "description": "Country code",
                "readOnly": true
              },
              "date_time_created": {
                "type": "string",
                "description": "The date and time this entity was created (UTC).",
                "format": "date-time",
                "readOnly": true
              },
              "date_time_updated": {
                "type": "string",
                "description": "The date and time this entity was last updated (UTC).",
                "format": "date-time",
                "readOnly": true
              }
            },
            "description": "The customers main address which also expands address_country_code."
          },
          "order_value_discount": {
            "type": "object",
            "properties": {},
            "description": "The customers order value discount.",
            "readOnly": true
          },
          "price_band": {
            "type": "object",
            "properties": {},
            "description": "The customers price band.",
            "readOnly": true
          },
          "sales_credit_note_layout": {
            "type": "object",
            "properties": {},
            "description": "The customers sales credit note layout.",
            "readOnly": true
          },
          "sales_invoice_layout": {
            "type": "object",
            "properties": {},
            "description": "The customers sales invoice layout.",
            "readOnly": true
          },
          "statement_layout": {
            "type": "object",
            "properties": {},
            "description": "The customers statement layout.",
            "readOnly": true
          },
          "status": {
            "type": "object",
            "properties": {
              "is_live": {
                "type": "boolean",
                "description": "True if customer account is live, else False.",
                "readOnly": true
              },
              "date_time_created": {
                "type": "string",
                "description": "The date and time this entity was created (UTC).",
                "format": "date-time",
                "readOnly": true
              },
              "date_time_updated": {
                "type": "string",
                "description": "The date and time this entity was last updated (UTC).",
                "format": "date-time",
                "readOnly": true
              }
            },
            "description": "The customers status. Note: This could take a long time to complete the request.",
            "readOnly": true
          },
          "alerts": {
            "type": "array",
            "description": "The customers alerts.",
            "items": {
              "$ref": "#/components/schemas/customer_alert"
            }
          },
          "cards": {
            "type": "array",
            "description": "The customers cards.",
            "items": {
              "$ref": "#/components/schemas/customer_card"
            }
          },
          "contacts": {
            "type": "array",
            "description": "The customers contacts.",
            "items": {
              "$ref": "#/components/schemas/customer_contact"
            }
          },
          "limited_price_bands": {
            "type": "array",
            "description": "The customers limited price bands.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/customer_price_band"
            }
          },
          "memos": {
            "type": "array",
            "description": "The customers memos.",
            "items": {
              "$ref": "#/components/schemas/customer_memo"
            }
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Customers are one of the most important entities within Sage 200 as they are associated with many important resources within the application and underpin most of the main features (e.g. sales orders, payment receipts, etc). When making larger requests for customer information, the Customer Views resource can be a faster alternative to this resource."
      },
      "statement_layout_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Statement layout types are used to determine statement production when printing documents for customers within the application. Statement layout types can be 'Paper Standard', 'Paper Alternative', 'Email Standard' or 'Email Alternative'.<P>The API endpoint returns details of the statement layout types that can be used.</P>"
      },
      "customer_contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer contact record Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64",
            "readOnly": true
          },
          "salutation_id": {
            "type": "integer",
            "description": "Salutation record Id.",
            "format": "int64"
          },
          "name": {
            "maxLength": 180,
            "type": "string",
            "description": "Contact Name - Concatenated first_name, middle_name and last_name.",
            "readOnly": true
          },
          "first_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Contact first name."
          },
          "middle_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Contact middle name."
          },
          "last_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Contact surname."
          },
          "default_telephone": {
            "maxLength": 227,
            "type": "string",
            "description": "Default telephone number.",
            "readOnly": true
          },
          "default_email": {
            "maxLength": 227,
            "type": "string",
            "description": "Default email address.",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Is this the default contact for the parent customer.",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer, whether to delete this contact from the collection of customer contacts."
          },
          "salutation": {
            "type": "object",
            "properties": {},
            "description": "Contact salutation.",
            "readOnly": true
          },
          "emails": {
            "type": "array",
            "description": "Customer emails.",
            "items": {
              "$ref": "#/components/schemas/customer_email"
            }
          },
          "telephones": {
            "type": "array",
            "description": "Customer telephones.",
            "items": {
              "$ref": "#/components/schemas/customer_telephone"
            }
          },
          "mobiles": {
            "type": "array",
            "description": "Customer mobiles.",
            "items": {
              "$ref": "#/components/schemas/customer_mobile"
            }
          },
          "faxes": {
            "type": "array",
            "description": "Customer faxes.",
            "items": {
              "$ref": "#/components/schemas/customer_fax"
            }
          },
          "websites": {
            "type": "array",
            "description": "Customer websites.",
            "items": {
              "$ref": "#/components/schemas/customer_website"
            }
          },
          "roles": {
            "type": "array",
            "description": "Customer contact roles.",
            "items": {
              "$ref": "#/components/schemas/customer_contact_role"
            }
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Information can be stored for multiple contacts against each customer account. Each contact can have its own details such as telephone numbers, fax numbers, email address and website."
      },
      "customer_alert": {
        "required": [
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer alert record Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "alert_text": {
            "maxLength": 255,
            "type": "string",
            "description": "The alert text."
          },
          "is_active": {
            "type": "boolean",
            "description": "True if alert status is active, false if it is inactive.",
            "default": true
          },
          "show_alert_for_orders": {
            "type": "boolean",
            "description": "True if this alert shows for orders, false if not.",
            "default": false
          },
          "show_alert_for_proformas": {
            "type": "boolean",
            "description": "True if this alert shows for proformas, false if not.",
            "default": false
          },
          "show_alert_for_quotes": {
            "type": "boolean",
            "description": "True if this alert shows for quotes, false if not.",
            "default": false
          },
          "show_alert_for_credit_notes": {
            "type": "boolean",
            "description": "True if this alert shows for credit notes, false if not.",
            "default": false
          },
          "show_alert_for_price_enquiries": {
            "type": "boolean",
            "description": "True if this alert shows for price enquiries, false if not.",
            "default": false
          },
          "show_alert_for_invoices": {
            "type": "boolean",
            "description": "True if this alert shows for invoices, false if not.",
            "default": false
          },
          "show_alert_for_returns": {
            "type": "boolean",
            "description": "True if this alert shows for returns, false if not.",
            "default": false
          },
          "show_alert_for_project_bills": {
            "type": "boolean",
            "description": "True if this alert shows for project bills, false if not.",
            "default": false
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer, whether to delete this alert from the collection of customer alerts."
          },
          "updated_by": {
            "maxLength": 30,
            "type": "string",
            "description": "The user that updated the alert.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Alerts are messages that can be displayed when a user performs a particular task. You can show alerts when entering invoices or credit notes, sales orders and returns, quotations and pro forma invoices, and for customer price enquiries."
      },
      "customer_memo": {
        "required": [
          "customer_id",
          "note"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer memo record Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "note": {
            "maxLength": 1000,
            "type": "string",
            "description": "The memo text."
          },
          "is_active": {
            "type": "boolean",
            "description": "True if memo status is active, false if it is inactive."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer, whether to delete this memo from the collection of customer memos."
          },
          "created_by": {
            "maxLength": 20,
            "type": "string",
            "description": "The user that created the memo.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Memos are sections of text that can be used to make comments about a customer account such as reminders, or notes (e.g. if there is currently a dispute over an order).<br/><br/>Multiple memos can be added to each account. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them."
      },
      "customer_card": {
        "required": [
          "customer_id",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer card reference record Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "The customer card description."
          },
          "last_used_date": {
            "type": "string",
            "description": "The date and time this card was last used (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer, whether to delete this card from the collection of customer cards."
          }
        },
        "description": "Customer cards are the credit cards used by the customer. They are created when a transaction is made using an Online Card Provider. The description used for the card can be renamed, or the card removed. Multiple cards can be associated with one account. The date and time that the card was last used is also recorded."
      },
      "sales_trading_period": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "An unique Id specific to each sales trading period.",
            "format": "int64",
            "readOnly": true
          },
          "period_number": {
            "maxLength": 20,
            "type": "string",
            "description": "The period number.",
            "readOnly": true
          },
          "start_date": {
            "type": "string",
            "description": "Date the trading period starts. The returned string includes the time but this will always be 00:00:00.",
            "format": "date-time",
            "readOnly": true
          },
          "end_date": {
            "type": "string",
            "description": "Date the trading period ends. The returned string includes the time but this will always be 00:00:00.",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "This resource returns the details of all sales trading periods for all financial years held for the company. A company can have the trading periods set to be the same as the accounting periods or as different periods. (Sage 200 Professional only, Sage 200 Standard defaults to financial year periods).",
        "x-sage-professional-only": true
      },
      "customer_email": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Email address record Id.",
            "format": "int64",
            "readOnly": true
          },
          "email": {
            "maxLength": 227,
            "type": "string",
            "description": "Email address."
          },
          "customer_contact_id": {
            "type": "integer",
            "description": "Customer contact record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Flag to indicate if this is the default email address of the customer contact."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer contact, whether to delete this email from the collection of customer contact emails."
          },
          "customer_contact": {
            "type": "object",
            "properties": {},
            "description": "Customer contact."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Contact specific email addresses can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields."
      },
      "customer_fax": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Fax record Id.",
            "format": "int64",
            "readOnly": true
          },
          "full_number": {
            "maxLength": 227,
            "type": "string",
            "description": "Fax number.",
            "readOnly": true
          },
          "country_code": {
            "maxLength": 5,
            "type": "string",
            "description": "Fax number country code."
          },
          "area_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Fax number area code."
          },
          "subscriber_number": {
            "maxLength": 200,
            "type": "string",
            "description": "Fax subscriber number."
          },
          "customer_contact_id": {
            "type": "integer",
            "description": "Customer contact record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Flag to indicate if this is the default fax number of the customer contact."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer contact, whether to delete this fax from the collection of customer contact faxes."
          },
          "customer_contact": {
            "type": "object",
            "properties": {},
            "description": "Customer contact."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Contact specific fax numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields."
      },
      "customer_mobile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Mobile record Id.",
            "format": "int64",
            "readOnly": true
          },
          "full_number": {
            "maxLength": 227,
            "type": "string",
            "description": "Mobile number.",
            "readOnly": true
          },
          "country_code": {
            "maxLength": 5,
            "type": "string",
            "description": "Mobile number country code."
          },
          "area_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Mobile number area code."
          },
          "subscriber_number": {
            "maxLength": 200,
            "type": "string",
            "description": "Mobile subscriber number."
          },
          "customer_contact_id": {
            "type": "integer",
            "description": "Customer contact record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Flag to indicate if this is the default mobile number of the customer contact."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer contact, whether to delete this mobile number from the collection of customer contact mobile numbers."
          },
          "customer_contact": {
            "type": "object",
            "properties": {},
            "description": "Customer contact."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Contact specific mobile numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields."
      },
      "customer_sop_invoice_credit_line_view": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Unique Id of the customer.",
            "format": "int64"
          },
          "customer_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "The associated customer account reference."
          },
          "customer_name": {
            "maxLength": 60,
            "type": "string",
            "description": "The associated customer name."
          },
          "sop_invoice_credit_id": {
            "type": "integer",
            "description": "Associated sales invoice credit Id.",
            "format": "int64"
          },
          "sop_invoice_credit_type": {
            "maxLength": 20,
            "type": "string",
            "description": "Sales invoice credit type."
          },
          "sop_invoice_credit_document_no": {
            "maxLength": 20,
            "type": "string",
            "description": "Sales invoice credit document number."
          },
          "sop_invoice_credit_document_date": {
            "type": "string",
            "description": "Sales invoice credit date.",
            "format": "date-time"
          },
          "sop_invoice_credit_document_status": {
            "maxLength": 20,
            "type": "string",
            "description": "Document status.",
            "readOnly": true
          },
          "sop_invoice_credit_exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the sales invoice credit.",
            "format": "decimal 6dp"
          },
          "sop_invoice_credit_date_time_updated": {
            "type": "string",
            "description": "The date and time the sales invoice credit was last updated (UTC).",
            "format": "date-time"
          },
          "sop_invoice_credit_line_id": {
            "type": "integer",
            "description": "Associated sales invoice credit line Id.",
            "format": "int64"
          },
          "sop_invoice_credit_line_invoice_credit_date": {
            "type": "string",
            "description": "The invoice credit date.",
            "format": "date-time"
          },
          "sop_invoice_credit_line_total_value": {
            "type": "number",
            "description": "The total value of the line.",
            "format": "decimal 2dp"
          },
          "sop_invoice_credit_line_tax_value": {
            "type": "number",
            "description": "The tax value of the line.",
            "format": "decimal 2dp"
          },
          "sop_invoice_credit_line_date_time_updated": {
            "type": "string",
            "description": "The date and time the SOP invoice credit line was last updated (UTC).",
            "format": "date-time"
          },
          "invoice_line_profit_analysis_id": {
            "type": "integer",
            "description": "Associated sales invoice credit line profit analysis Id.",
            "format": "int64"
          },
          "invoice_line_profit_analysis_line_quantity": {
            "type": "number",
            "description": "The quantity.",
            "format": "decimal 5dp"
          },
          "invoice_line_profit_analysis_realised_cost_value": {
            "type": "number",
            "description": "The realised cost value.",
            "format": "decimal 5dp"
          },
          "invoice_line_profit_analysis_realised_profit_value": {
            "type": "number",
            "description": "The realised profit value.",
            "format": "decimal 5dp"
          },
          "invoice_line_profit_analysis_date_time_updated": {
            "type": "string",
            "description": "The date and time the SOP invoice credit line profit analysis was last updated (UTC).",
            "format": "date-time"
          },
          "product_id": {
            "type": "integer",
            "description": "The associated product record Id.",
            "format": "int64"
          },
          "product_code": {
            "maxLength": 30,
            "type": "string",
            "description": "The code of the product ordered."
          },
          "product_name": {
            "maxLength": 60,
            "type": "string",
            "description": "The name of the product ordered."
          },
          "product_description": {
            "maxLength": 1000,
            "type": "string",
            "description": "The associated product description."
          },
          "product_date_time_updated": {
            "type": "string",
            "description": "The date and time the product was last updated (UTC).",
            "format": "date-time"
          },
          "product_group_id": {
            "type": "integer",
            "description": "The associated product group record Id.",
            "format": "int64"
          },
          "product_group_code": {
            "maxLength": 20,
            "type": "string",
            "description": "The code of the product group."
          },
          "product_group_description": {
            "maxLength": 50,
            "type": "string",
            "description": "The associated product group description."
          },
          "product_group_date_time_updated": {
            "type": "string",
            "description": "The date and time the product group was last updated (UTC).",
            "format": "date-time"
          }
        },
        "description": "This resource returns a view of related customers, sales invoice credits, sales invoice credit lines, invoice line profit analysis, products, and product groups that can be queried on any field. The default sort (orderby) fields are by 'sop_invoice_credit_id' and 'sop_invoice_credit_line_id' descending."
      },
      "customer_telephone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Telephone record Id.",
            "format": "int64",
            "readOnly": true
          },
          "full_number": {
            "maxLength": 227,
            "type": "string",
            "description": "Telephone number.",
            "readOnly": true
          },
          "country_code": {
            "maxLength": 5,
            "type": "string",
            "description": "Telephone number country code."
          },
          "area_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Telephone number area code."
          },
          "subscriber_number": {
            "maxLength": 200,
            "type": "string",
            "description": "Telephone subscriber number."
          },
          "customer_contact_id": {
            "type": "integer",
            "description": "Customer contact record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Flag to indicate if this is the default telephone number of the customer contact."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer contact, whether to delete this telephone number from the collection of customer contact telephone numbers."
          },
          "customer_contact": {
            "type": "object",
            "properties": {},
            "description": "Customer contact."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Contact specific telephone numbers can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields."
      },
      "customer_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The reference for the account."
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer name."
          },
          "short_name": {
            "maxLength": 8,
            "type": "string",
            "description": "Customer short name."
          },
          "country_code_id": {
            "type": "integer",
            "description": "Country code record Id.",
            "format": "int64"
          },
          "country_code": {
            "maxLength": 2,
            "type": "string",
            "description": "The customer's country code."
          },
          "currency_id": {
            "type": "integer",
            "description": "Currency record Id.",
            "format": "int64"
          },
          "currency_name": {
            "maxLength": 30,
            "type": "string",
            "description": "The customer currency name."
          },
          "currency_symbol": {
            "maxLength": 4,
            "type": "string",
            "description": "Currency symbol."
          },
          "currency_iso_code_id": {
            "type": "integer",
            "description": "Currency ISO code record Id.",
            "format": "int64"
          },
          "currency_iso_code": {
            "maxLength": 3,
            "type": "string",
            "description": "ISO currency code."
          },
          "currency_iso_code_name": {
            "maxLength": 100,
            "type": "string",
            "description": "ISO currency name."
          },
          "balance": {
            "type": "number",
            "description": "Customer account balance in the customer's currency.",
            "format": "decimal 2dp"
          },
          "base_balance": {
            "type": "number",
            "description": "Customer account balance in the base currency.",
            "format": "decimal 2dp"
          },
          "credit_limit": {
            "type": "number",
            "description": "Credit limit of the customer.",
            "format": "decimal 2dp"
          },
          "vat_number": {
            "maxLength": 30,
            "type": "string",
            "description": "VAT registration number."
          },
          "default_tax_rate_id": {
            "type": "integer",
            "description": "Tax rate record Id.",
            "format": "int64"
          },
          "default_tax_rate_code": {
            "type": "integer",
            "description": "Default tax code.",
            "format": "int16"
          },
          "default_tax_rate_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Name of tax code."
          },
          "default_tax_rate": {
            "type": "integer",
            "description": "Tax rate.",
            "format": "decimal 2dp"
          },
          "default_order_priority": {
            "maxLength": 1,
            "type": "string",
            "description": "Default order priority."
          },
          "default_nominal_account_number": {
            "maxLength": 8,
            "type": "string",
            "description": "Default nominal account number."
          },
          "default_nominal_cost_centre": {
            "maxLength": 3,
            "type": "string",
            "description": "Default nominal cost centre."
          },
          "default_nominal_department": {
            "maxLength": 3,
            "type": "string",
            "description": "Default nominal department."
          },
          "early_settlement_discount_percent": {
            "type": "number",
            "description": "Early settlement discount percent.",
            "format": "decimal 2dp"
          },
          "days_early_settlement_disc_applies": {
            "type": "integer",
            "description": "Number of days early settlement discount applies.",
            "format": "int16"
          },
          "payment_terms_in_days": {
            "type": "integer",
            "description": "Payment terms in days.",
            "format": "int16"
          },
          "payment_terms_id": {
            "type": "integer",
            "description": "Payment terms Id.",
            "format": "int64"
          },
          "payment_terms": {
            "maxLength": 30,
            "type": "string",
            "description": "The payment terms."
          },
          "discount_group_id": {
            "type": "integer",
            "description": "Discount group Id.",
            "format": "int64"
          },
          "discount_group_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Discount group name."
          },
          "discount_group_description": {
            "maxLength": 50,
            "type": "string",
            "description": "Discount group description."
          },
          "order_value_discount_id": {
            "type": "integer",
            "description": "Order value discount Id.",
            "format": "int64"
          },
          "order_value_discount_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Order value discount name."
          },
          "order_value_discount_description": {
            "maxLength": 50,
            "type": "string",
            "description": "Order value discount description."
          },
          "price_band_id": {
            "type": "integer",
            "description": "Price band Id.",
            "format": "int64"
          },
          "price_band_name": {
            "maxLength": 20,
            "type": "string",
            "description": "Price band name."
          },
          "price_band_description": {
            "maxLength": 50,
            "type": "string",
            "description": "Price band description."
          },
          "use_consolidated_billing": {
            "type": "boolean",
            "description": "True if customer uses consolidated billing else False."
          },
          "invoice_line_discount_percent": {
            "type": "number",
            "description": "Invoice line discount percent.",
            "format": "decimal 2dp"
          },
          "invoice_discount_percent": {
            "type": "number",
            "description": "Invoice discount percent.",
            "format": "decimal 2dp"
          },
          "account_is_on_hold": {
            "type": "boolean",
            "description": "True if customer account is on hold, else False."
          },
          "account_status_type_id": {
            "type": "integer",
            "description": "The status of the customer account (Sage 200 Standard and versions of Professional released after July 2017). For example, this can either be 'Active' or 'Hidden'.",
            "format": "int64"
          },
          "account_status_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The status of the customer account (Sage 200 Standard and versions of Professional released after July 2017). For example, this can either be 'Active' or 'Hidden'."
          },
          "account_type_id": {
            "type": "integer",
            "description": "The account type is used to decide how transactions are stored on individual accounts.",
            "format": "int64"
          },
          "account_type": {
            "maxLength": 20,
            "type": "string",
            "description": "The account type is used to decide how transactions are stored on individual accounts."
          },
          "value_of_current_orders_in_sop": {
            "type": "number",
            "description": "Value of current sales orders for this customer.",
            "format": "decimal 2dp"
          },
          "date_account_details_last_changed": {
            "type": "string",
            "description": "Date account details last changed.",
            "format": "date-time"
          },
          "date_of_last_transaction": {
            "type": "string",
            "description": "Date of last transaction.",
            "format": "date-time"
          },
          "date_finance_charge_last_run": {
            "type": "string",
            "description": "Date finance charge last run for this customer.",
            "format": "date-time"
          },
          "trading_terms": {
            "maxLength": 30,
            "type": "string",
            "description": "Trading terms for this customer."
          },
          "credit_reference": {
            "maxLength": 60,
            "type": "string",
            "description": "Credit reference for this customer."
          },
          "credit_bureau_id": {
            "type": "integer",
            "description": "Credit bureau Id for this customer.",
            "format": "int64"
          },
          "credit_bureau_name": {
            "maxLength": 50,
            "type": "string",
            "description": "Credit bureau name."
          },
          "credit_position_id": {
            "type": "integer",
            "description": "Credit position Id.",
            "format": "int64"
          },
          "credit_position_name": {
            "maxLength": 50,
            "type": "string",
            "description": "Credit position name."
          },
          "average_time_to_pay": {
            "type": "integer",
            "description": "Average time to pay in days.",
            "format": "int32"
          },
          "account_opened": {
            "type": "string",
            "description": "The date the account was opened.",
            "format": "date-time"
          },
          "last_credit_review": {
            "type": "string",
            "description": "Date the customers credit details were last reviewed.",
            "format": "date-time"
          },
          "next_credit_review": {
            "type": "string",
            "description": "Date the customers credit details should next be reviewed.",
            "format": "date-time"
          },
          "application_date": {
            "type": "string",
            "description": "Date the customer applied for credit.",
            "format": "date-time"
          },
          "date_received": {
            "type": "string",
            "description": "Date the credit application was received.",
            "format": "date-time"
          },
          "terms_agreed": {
            "type": "boolean",
            "description": "True if customer terms have been agreed else False."
          },
          "is_over_credit_limit": {
            "type": "boolean",
            "description": "If the credit limit is not zero, then True is the balance is greater than the credit limit; otherwise False."
          },
          "months_to_keep_transactions_for": {
            "type": "integer",
            "description": "The number of months to keep transactions.",
            "format": "int16"
          },
          "use_tax_code_as_default": {
            "type": "boolean",
            "description": "True if the tax code is used as default else False."
          },
          "avg_time_to_pay_date_last_updated": {
            "type": "string",
            "description": "Date average time to pay was last updated.",
            "format": "date-time"
          },
          "duns_code": {
            "maxLength": 9,
            "type": "string",
            "description": "DUNS Code."
          },
          "telephone_area_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Telephone area code."
          },
          "telephone_country_code": {
            "maxLength": 5,
            "type": "string",
            "description": "Telephone country code."
          },
          "telephone_subscriber_number": {
            "maxLength": 200,
            "type": "string",
            "description": "Telephone subscriber number."
          },
          "fax_area_code": {
            "maxLength": 20,
            "type": "string",
            "description": "Fax area code."
          },
          "fax_country_code": {
            "maxLength": 5,
            "type": "string",
            "description": "Fax country code."
          },
          "fax_subscriber_number": {
            "maxLength": 200,
            "type": "string",
            "description": "Fax subscriber number."
          },
          "website": {
            "maxLength": 200,
            "type": "string",
            "description": "Website address."
          },
          "send_copy_statement_to_branch": {
            "type": "boolean",
            "description": "Send copy statment to branch."
          },
          "statement_transmission_method_id": {
            "type": "integer",
            "description": "Statement transmission method.",
            "format": "int64"
          },
          "statement_transmission_method": {
            "maxLength": 30,
            "type": "string",
            "description": "Statement transmission method."
          },
          "invoice_payments_status": {
            "maxLength": 60,
            "type": "string",
            "description": "Invoice payments status."
          },
          "contact_name": {
            "maxLength": 235,
            "type": "string",
            "description": "The default contact name."
          },
          "contact_first_name": {
            "maxLength": 60,
            "type": "string",
            "description": "The default contact first name."
          },
          "contact_middle_name": {
            "maxLength": 60,
            "type": "string",
            "description": "The default contact middle name."
          },
          "contact_last_name": {
            "maxLength": 60,
            "type": "string",
            "description": "The default contact last name."
          },
          "contact_default_telephone_number": {
            "maxLength": 227,
            "type": "string",
            "description": "The default contact default telephone number."
          },
          "contact_default_email_address": {
            "maxLength": 227,
            "type": "string",
            "description": "The default contact default email address."
          },
          "analysis_code_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 1."
          },
          "analysis_code_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 2."
          },
          "analysis_code_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 3."
          },
          "analysis_code_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 4."
          },
          "analysis_code_5": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 5."
          },
          "analysis_code_6": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 6."
          },
          "analysis_code_7": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 7."
          },
          "analysis_code_8": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 8."
          },
          "analysis_code_9": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 9."
          },
          "analysis_code_10": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 10."
          },
          "analysis_code_11": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 11."
          },
          "analysis_code_12": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 12."
          },
          "analysis_code_13": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 13."
          },
          "analysis_code_14": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 14."
          },
          "analysis_code_15": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 15."
          },
          "analysis_code_16": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 16."
          },
          "analysis_code_17": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 17."
          },
          "analysis_code_18": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 18."
          },
          "analysis_code_19": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 19."
          },
          "analysis_code_20": {
            "maxLength": 60,
            "type": "string",
            "description": "Analysis code 20."
          },
          "customer_location_id": {
            "type": "integer",
            "description": "Customer location Id.",
            "format": "int64"
          },
          "customer_location_address_line_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 1."
          },
          "customer_location_address_line_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 2."
          },
          "customer_location_address_line_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 3."
          },
          "customer_location_address_line_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 4."
          },
          "customer_location_post_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Post code."
          },
          "customer_location_city": {
            "maxLength": 60,
            "type": "string",
            "description": "City."
          },
          "customer_location_county": {
            "maxLength": 60,
            "type": "string",
            "description": "County."
          },
          "customer_location_country": {
            "maxLength": 60,
            "type": "string",
            "description": "Country."
          },
          "customer_location_full_address": {
            "maxLength": 444,
            "type": "string",
            "description": "This returns a concatenation of the address fields separated by a comma."
          },
          "customer_location_date_time_created": {
            "type": "string",
            "description": "Date time the location record was created (UTC).",
            "format": "date-time"
          },
          "customer_location_date_time_updated": {
            "type": "string",
            "description": "Date time the location record was updated (UTC).",
            "format": "date-time"
          },
          "customer_location_country_code_id": {
            "type": "integer",
            "description": "Customer location country code record Id.",
            "format": "int64"
          },
          "customer_location_country_code": {
            "maxLength": 2,
            "type": "string",
            "description": "Customer location country code."
          },
          "customer_location_country_code_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer location country name."
          },
          "customer_location_type_id": {
            "type": "integer",
            "description": "Customer location type.",
            "format": "int64"
          },
          "customer_location_type": {
            "maxLength": 20,
            "type": "string",
            "description": "Customer location type."
          },
          "customer_location_address_country_code_id": {
            "type": "integer",
            "description": "Customer location address country code record Id.",
            "format": "int64"
          },
          "customer_location_address_country_code": {
            "maxLength": 2,
            "type": "string",
            "description": "Customer location address country code."
          },
          "customer_location_address_country_code_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer location address country name."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time the customer was created (UTC).",
            "format": "date-time"
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time the customer was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "When making larger requests for customer information, the Customer Views resource can be a faster alternative to the 'Customer' resource. The Customer Views resource also returns a wider breadth of information than the Customer resource. Using Customer Views could therefore reduce the quantity of API requests needed to return the same information from multiple API resources."
      },
      "document_transmission_method_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Document transmission method types. Document transmission can be by 'Post' or 'Email'.<P>The API endpoint returns details of the document transmission method types that can be used.</P>"
      },
      "customer_website": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Website address record Id.",
            "format": "int64",
            "readOnly": true
          },
          "website": {
            "maxLength": 227,
            "type": "string",
            "description": "The web address."
          },
          "customer_contact_id": {
            "type": "integer",
            "description": "Customer contact record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Flag to indicate if this is the default website for the customer contact."
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer contact, whether to delete this website from the collection of customer contact websites."
          },
          "customer_contact": {
            "type": "object",
            "properties": {},
            "description": "Customer contact."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Contact specific websites can be queried, or updated in isolation, separate to the rest of the customer contact details. Calling this resource doesn't return, or update any other customer contact fields."
      },
      "customer_contact_role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer contact role record Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_contact_id": {
            "type": "integer",
            "description": "Customer contact record Id.",
            "format": "int64",
            "readOnly": true
          },
          "trader_contact_role_id": {
            "type": "integer",
            "description": "Trader contact role record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_preferred_contact_for_role": {
            "type": "boolean",
            "description": "Flag to indicate if this is the preferred customer contact for the role.",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer contact, whether to delete this role from the collection of customer contact roles."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Customer contacts can be assigned job roles. Customer contact roles describe roles assigned to a customer contact, including whether the contact is the preferred contact for the customer for a role."
      },
      "lookup_customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The reference for the account."
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer name."
          },
          "short_name": {
            "maxLength": 8,
            "type": "string",
            "description": "Customer short name."
          },
          "account_status_type_id": {
            "type": "integer",
            "description": "The status of the customer account. For example, this can either be 'Active' or 'Hidden'.",
            "format": "int64"
          },
          "post_code": {
            "maxLength": 10,
            "type": "string",
            "description": "Post code."
          },
          "office_type_id": {
            "type": "integer",
            "description": "The type of office (Sage 200 Professional only).",
            "format": "int64",
            "x-sage-professional-only": true
          }
        },
        "description": "A subset of customer information for populating a lookup."
      },
      "customer_price_band": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer price band record Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer Id.",
            "format": "int64",
            "readOnly": true
          },
          "price_band_id": {
            "type": "integer",
            "description": "Price band record Id.",
            "format": "int64",
            "readOnly": true
          },
          "is_to_delete": {
            "type": "boolean",
            "description": "When updating an existing customer, whether to delete this price band from the collection of customer price bands."
          },
          "price_band": {
            "type": "object",
            "properties": {},
            "description": "The price band.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Customer price band show which customers are linked to which price bands, one customer can have multiple limited price bands, and one price band can be linked to many customers."
      },
      "sales_aged_transaction_period_view": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer Id.",
            "format": "int64",
            "readOnly": true
          },
          "base_outstanding_value": {
            "type": "number",
            "description": "The aged debtor value in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "ageing_period_name": {
            "maxLength": 7,
            "type": "string",
            "description": "This is the ageing period that the outstanding value falls into e.g. 'Current', '30' etc..",
            "readOnly": true
          },
          "ageing_date": {
            "type": "string",
            "description": "The end date of the ageing period or the current date for the current period.",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Gets Sales aged transaction period views. Specifying a query parameter of '$periodnumber' will produce retrospective aged period values for the period specified. For example, '$periodnumber=0' will produce retrospective aged values for the current period. Specifying a query parameter of '$ageingdatetype' will produce values for the specified ageing type. Acceptable values are 'transactiondate', 'duedate', and 'calendarmonth', to calculate aged debt by Transaction Date, Due Date, or by calendar months. The default sort (orderby) field are by 'customer_id' and 'ageing_period_name' descending."
      },
      "sales_aged_debtor_view": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer Id.",
            "format": "int64",
            "readOnly": true
          },
          "posted_customer_transaction_id": {
            "type": "integer",
            "description": "Posted customer transaction record Id.",
            "format": "int64",
            "readOnly": true
          },
          "doc_past": {
            "type": "number",
            "description": "Value in document currency for past periods.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_future": {
            "type": "number",
            "description": "Value in document currency for future periods.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_current": {
            "type": "number",
            "description": "Value in document currency for the current period.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_1": {
            "type": "number",
            "description": "Value in document currency for ageing period 1.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_2": {
            "type": "number",
            "description": "Value in document currency for ageing period 2.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_3": {
            "type": "number",
            "description": "Value in document currency for ageing period 3.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_4": {
            "type": "number",
            "description": "Value in document currency for ageing period 4.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_5": {
            "type": "number",
            "description": "Value in document currency for ageing period 5.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_6": {
            "type": "number",
            "description": "Value in document currency for ageing period 6.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_7": {
            "type": "number",
            "description": "Value in document currency for ageing period 7.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "doc_period_8": {
            "type": "number",
            "description": "Value in document currency for ageing period 8.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_past": {
            "type": "number",
            "description": "Value in base currency for past periods.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_future": {
            "type": "number",
            "description": "Value in base currency for furure periods.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_current": {
            "type": "number",
            "description": "Value in base currency for the current period.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_1": {
            "type": "number",
            "description": "Value in base currency for ageing period 1.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_2": {
            "type": "number",
            "description": "Value in base currency for ageing period 2.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_3": {
            "type": "number",
            "description": "Value in base currency for ageing period 3.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_4": {
            "type": "number",
            "description": "Value in base currency for ageing period 4.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_5": {
            "type": "number",
            "description": "Value in base currency for ageing period 5.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_6": {
            "type": "number",
            "description": "Value in base currency for ageing period 6.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_7": {
            "type": "number",
            "description": "Value in base currency for ageing period 7.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_period_8": {
            "type": "number",
            "description": "Value in base currency for ageing period 8.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "aged_period_1": {
            "type": "string",
            "description": "The name of ageing period 1.",
            "readOnly": true
          },
          "aged_period_2": {
            "type": "string",
            "description": "The name of ageing period 2.",
            "readOnly": true
          },
          "aged_period_3": {
            "type": "string",
            "description": "The name of ageing period 3.",
            "readOnly": true
          },
          "aged_period_4": {
            "type": "string",
            "description": "The name of ageing period 4.",
            "readOnly": true
          },
          "aged_period_5": {
            "type": "string",
            "description": "The name of ageing period 5.",
            "readOnly": true
          },
          "aged_period_6": {
            "type": "string",
            "description": "The name of ageing period 6.",
            "readOnly": true
          },
          "aged_period_7": {
            "type": "string",
            "description": "The name of ageing period 7.",
            "readOnly": true
          },
          "aged_period_8": {
            "type": "string",
            "description": "The name of ageing period 8.",
            "readOnly": true
          }
        },
        "description": "Gets Sales aged debtor views. Specifying a query parameter of '$ageingdatetype' will produce values for the specified ageing type. Acceptable values are 'transactiondate', 'duedate', and 'calendarmonth', to calculate aged debt by Transaction Date, Due Date, or by calendar months."
      },
      "sales_allocation": {
        "required": [
          "allocation_lines",
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer Id associated with the allocation.",
            "format": "int64"
          },
          "allocation_date": {
            "type": "string",
            "description": "Allocation date. This defaults to the current system date.",
            "format": "date-time"
          },
          "allocation_lines": {
            "type": "array",
            "description": "Allocation lines.",
            "items": {
              "required": [
                "posted_tran_id",
                "value_to_allocate"
              ],
              "type": "object",
              "properties": {
                "posted_tran_id": {
                  "type": "integer",
                  "description": "The Id of the invoice, receipt, payment or credit note to allocate",
                  "format": "int64"
                },
                "value_to_allocate": {
                  "type": "number",
                  "description": "The value to allocate to this transaction.",
                  "format": "decimal 2dp"
                }
              }
            }
          }
        },
        "description": "Sales transactions can be allocated against each other i.e. receipts against invoices.<br /><br />This API resource can be used to determine which allocations are to be made."
      },
      "sales_posted_transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer Id.",
            "format": "int64",
            "readOnly": true
          },
          "trader_transaction_type": {
            "maxLength": 30,
            "type": "string",
            "description": "Transaction type.",
            "readOnly": true
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Transaction reference.",
            "readOnly": true
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Second reference.",
            "readOnly": true
          },
          "queried": {
            "maxLength": 1,
            "type": "string",
            "description": "Query flag."
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time",
            "readOnly": true
          },
          "posted_date": {
            "type": "string",
            "description": "Posted date.",
            "format": "date-time",
            "readOnly": true
          },
          "due_date": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "readOnly": true
          },
          "full_settlement_date": {
            "type": "string",
            "description": "Full settlement date.",
            "format": "date-time",
            "readOnly": true
          },
          "document_goods_value": {
            "type": "number",
            "description": "Value of the goods.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_gross_value": {
            "type": "number",
            "description": "Gross value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_tax_value": {
            "type": "number",
            "description": "Tax value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_discount_value": {
            "type": "number",
            "description": "Document discount value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "discount_percent": {
            "type": "number",
            "description": "Percentage discount.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_allocated_value": {
            "type": "number",
            "description": "Allocated value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_outstanding_value": {
            "type": "number",
            "description": "Outstanding value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_goods_value": {
            "type": "number",
            "description": "Value of the goods in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_gross_value": {
            "type": "number",
            "description": "Gross value in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_tax_value": {
            "type": "number",
            "description": "Tax value in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_discount_value": {
            "type": "number",
            "description": "Discount value in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "base_allocated_value": {
            "type": "number",
            "description": "Allocated value in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "control_value_in_base_currency": {
            "type": "number",
            "description": "Control value in base currency.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange rate used for transaction.",
            "format": "decimal 6dp",
            "readOnly": true
          },
          "settled_immediately": {
            "type": "boolean",
            "description": "Immediately settled.",
            "readOnly": true
          },
          "discount_days": {
            "type": "integer",
            "description": "Number of days discount valid.",
            "format": "int16",
            "readOnly": true
          },
          "urn": {
            "type": "integer",
            "description": "Unique reference number.",
            "format": "int64",
            "readOnly": true
          },
          "user_name": {
            "maxLength": 20,
            "type": "string",
            "description": "User who entered the transaction.",
            "readOnly": true
          },
          "tax_analysis_items": {
            "type": "array",
            "description": "Tax analysis items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Tax code Id",
                  "format": "int64",
                  "readOnly": true
                },
                "code": {
                  "type": "integer",
                  "description": "Tax code.",
                  "format": "int16",
                  "readOnly": true
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Tax code name.",
                  "readOnly": true
                },
                "entry_type": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The type of the tax code entry.",
                  "readOnly": true
                },
                "goods_amount": {
                  "type": "number",
                  "description": "Goods amount.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "tax_amount": {
                  "type": "number",
                  "description": "Tax amount.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "tax_discount_amount": {
                  "type": "number",
                  "description": "Tax discount amount.",
                  "format": "decimal 2dp",
                  "readOnly": true
                }
              }
            }
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code.",
                  "readOnly": true
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre.",
                  "readOnly": true
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department.",
                  "readOnly": true
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Nominal name.",
                  "readOnly": true
                },
                "location": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Location of the associated nominal transaction.",
                  "readOnly": true
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference.",
                  "readOnly": true
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative.",
                  "readOnly": true
                },
                "value": {
                  "type": "number",
                  "description": "Goods value.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "base_value": {
                  "type": "number",
                  "description": "Value in base currency.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The transaction analysis code used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid",
                  "readOnly": true
                },
                "source": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Source ledger",
                  "readOnly": true
                }
              }
            }
          },
          "bank_items": {
            "type": "array",
            "description": "Bank items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "bank_code": {
                  "type": "string",
                  "description": "Bank account code.",
                  "readOnly": true
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Account name.",
                  "readOnly": true
                },
                "bank_entry_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Bank entry type.",
                  "readOnly": true
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference.",
                  "readOnly": true
                },
                "cheque_value": {
                  "type": "number",
                  "description": "Value of item.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "statement_date": {
                  "type": "string",
                  "description": "Statement Date.",
                  "format": "date-time",
                  "readOnly": true
                },
                "statement_page_number": {
                  "type": "integer",
                  "description": "Page of statement item appears on.",
                  "format": "int32",
                  "readOnly": true
                },
                "urn": {
                  "type": "integer",
                  "description": "Unique reference number.",
                  "format": "int32",
                  "readOnly": true
                }
              }
            }
          },
          "allocation_session_items": {
            "type": "array",
            "description": "Allocation session items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "user_name": {
                  "type": "string",
                  "description": "Name of user that entered item.",
                  "readOnly": true
                },
                "ledger_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Ledger type",
                  "readOnly": true
                },
                "urn": {
                  "type": "integer",
                  "description": "Unique reference number.",
                  "format": "int64",
                  "readOnly": true
                },
                "allocation_date": {
                  "type": "string",
                  "description": "Date of allocation.",
                  "format": "date-time",
                  "readOnly": true
                },
                "trader_transaction_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Transaction type",
                  "readOnly": true
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference.",
                  "readOnly": true
                },
                "value": {
                  "type": "number",
                  "description": "Value of allocation item.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "allocation_value": {
                  "type": "number",
                  "description": "Value of allocation.",
                  "format": "decimal 2dp",
                  "readOnly": true
                }
              }
            }
          },
          "allocation_history_items": {
            "type": "array",
            "description": "Allocation history items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Allocation history record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "trading_revaluation_allocation_entry_type": {
                  "type": "string",
                  "description": "Revaluation allocation entry type.",
                  "readOnly": true
                },
                "entry_date": {
                  "type": "string",
                  "description": "Date of entry.",
                  "format": "date-time",
                  "readOnly": true
                },
                "allocation_value": {
                  "type": "number",
                  "description": "Value of allocation.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "nominal_updated": {
                  "type": "boolean",
                  "description": "If nominal has been updated.",
                  "readOnly": true
                },
                "exchange_rate": {
                  "type": "number",
                  "description": "Exchange rate.",
                  "format": "decimal 6dp",
                  "readOnly": true
                },
                "exchange_gain_loss": {
                  "type": "number",
                  "description": "Amount gained or lost since allocation.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "date_time_created": {
                  "type": "string",
                  "description": "The date and time this entity was created (UTC).",
                  "format": "date-time",
                  "readOnly": true
                },
                "date_time_updated": {
                  "type": "string",
                  "description": "The date and time this entity was last updated (UTC).",
                  "format": "date-time",
                  "readOnly": true
                }
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {},
            "description": "Customer.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Sales posted transactions are created when transactions, such as orders invoiced, receipts, refunds or credit notes, are posted against the Sales Ledger.<br /><br />It is not possible to use this API resource to create posted transactions. To post a transaction, the necessary API resource must be invoked. When making larger requests for customer information, the Sales Transactions Views resource can be a faster alternative to this resource.<br /><br />It is possible to use this API resource to update a transaction's queried status."
      },
      "sales_posted_transaction_memo": {
        "required": [
          "note",
          "posted_customer_transaction_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Sales posted transaction memo record Id.",
            "format": "int64",
            "readOnly": true
          },
          "posted_customer_transaction_id": {
            "type": "integer",
            "description": "Sales posted transaction record Id.",
            "format": "int64"
          },
          "note": {
            "maxLength": 1000,
            "type": "string",
            "description": "The memo text."
          },
          "is_active": {
            "type": "boolean",
            "description": "True if memo status is active, false if it is inactive."
          },
          "created_by": {
            "maxLength": 20,
            "type": "string",
            "description": "The user that created the memo.",
            "readOnly": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Memos are comments that are made about a sales posted transaction.<br/><br/>Multiple memos can be added to each sales posted transaction. The user that created the memo, the date it was created and last updated date and time are also recorded.<br/><br/>A user can also specify if a memo is currently 'Active' or 'Inactive'. This allows a user to keep a record of previous memos without deleting them."
      },
      "sales_historical_transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id.",
            "format": "int64"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer Id.",
            "format": "int64"
          },
          "trader_transaction_type": {
            "maxLength": 30,
            "type": "string",
            "description": "Transaction type."
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Transaction reference."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Second reference."
          },
          "queried": {
            "maxLength": 1,
            "type": "string",
            "description": "Query flag."
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time"
          },
          "posted_date": {
            "type": "string",
            "description": "Posted date.",
            "format": "date-time"
          },
          "due_date": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time"
          },
          "full_settlement_date": {
            "type": "string",
            "description": "Full settlement date.",
            "format": "date-time"
          },
          "document_goods_value": {
            "type": "number",
            "description": "Value of the goods.",
            "format": "decimal 2dp"
          },
          "document_gross_value": {
            "type": "number",
            "description": "Gross value.",
            "format": "decimal 2dp"
          },
          "document_tax_value": {
            "type": "number",
            "description": "Tax value.",
            "format": "decimal 2dp"
          },
          "document_discount_value": {
            "type": "number",
            "description": "Document discount value.",
            "format": "decimal 2dp"
          },
          "discount_percent": {
            "type": "number",
            "description": "Percentage discount.",
            "format": "decimal 2dp"
          },
          "document_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value.",
            "format": "decimal 2dp"
          },
          "document_allocated_value": {
            "type": "number",
            "description": "Allocated value.",
            "format": "decimal 2dp"
          },
          "document_outstanding_value": {
            "type": "number",
            "description": "Outstanding value.",
            "format": "decimal 2dp"
          },
          "base_goods_value": {
            "type": "number",
            "description": "Value of the goods in base currency.",
            "format": "decimal 2dp"
          },
          "base_gross_value": {
            "type": "number",
            "description": "Gross value in base currency.",
            "format": "decimal 2dp"
          },
          "base_tax_value": {
            "type": "number",
            "description": "Tax value in base currency.",
            "format": "decimal 2dp"
          },
          "base_discount_value": {
            "type": "number",
            "description": "Discount value in base currency.",
            "format": "decimal 2dp"
          },
          "base_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value in base currency.",
            "format": "decimal 2dp"
          },
          "base_allocated_value": {
            "type": "number",
            "description": "Allocated value in base currency.",
            "format": "decimal 2dp"
          },
          "control_value_in_base_currency": {
            "type": "number",
            "description": "Control value in base currency.",
            "format": "decimal 2dp"
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange rate used for transaction.",
            "format": "decimal 6dp"
          },
          "settled_immediately": {
            "type": "boolean",
            "description": "Immediately settled."
          },
          "discount_days": {
            "type": "integer",
            "description": "Number of days discount valid.",
            "format": "int16"
          },
          "urn": {
            "type": "integer",
            "description": "Unique reference number.",
            "format": "int64"
          },
          "user_name": {
            "maxLength": 20,
            "type": "string",
            "description": "User who entered the transaction."
          },
          "tax_analysis_items": {
            "type": "array",
            "description": "Tax analysis items.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Tax code Id",
                  "format": "int64"
                },
                "code": {
                  "type": "integer",
                  "description": "Tax code.",
                  "format": "int16"
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Tax code name."
                },
                "entry_type": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The type of the tax code entry."
                },
                "goods_amount": {
                  "type": "number",
                  "description": "Goods amount.",
                  "format": "decimal 2dp"
                },
                "tax_amount": {
                  "type": "number",
                  "description": "Tax amount.",
                  "format": "decimal 2dp"
                },
                "tax_discount_amount": {
                  "type": "number",
                  "description": "Tax discount amount.",
                  "format": "decimal 2dp"
                }
              }
            }
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis items.",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department."
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Nominal name."
                },
                "location": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Location of the associated nominal transaction."
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative."
                },
                "value": {
                  "type": "number",
                  "description": "Goods value.",
                  "format": "decimal 2dp"
                },
                "base_value": {
                  "type": "number",
                  "description": "Value in base currency.",
                  "format": "decimal 2dp"
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The transaction analysis code used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid"
                },
                "source": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Source ledger"
                }
              }
            }
          },
          "bank_items": {
            "type": "array",
            "description": "Bank items.",
            "items": {
              "type": "object",
              "properties": {
                "bank_code": {
                  "type": "string",
                  "description": "Bank account code."
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Account name."
                },
                "bank_entry_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Bank entry type."
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference."
                },
                "cheque_value": {
                  "type": "number",
                  "description": "Value of item.",
                  "format": "decimal 2dp"
                },
                "statement_date": {
                  "type": "string",
                  "description": "Statement Date.",
                  "format": "date-time"
                },
                "statement_page_number": {
                  "type": "integer",
                  "description": "Page of statement item appears on.",
                  "format": "int32"
                },
                "urn": {
                  "type": "integer",
                  "description": "Unique reference number.",
                  "format": "int32"
                }
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {},
            "description": "Customer."
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Sales historical transactions are created when transactions are archived from the Sales Ledger.<br /><br />It is not possible to use this API resource to create historical transactions."
      },
      "sales_transaction_view": {
        "type": "object",
        "properties": {
          "posted_customer_transaction_id": {
            "type": "integer",
            "description": "Id of the transaction.",
            "format": "int64",
            "readOnly": true
          },
          "transaction_type": {
            "maxLength": 30,
            "type": "string",
            "description": "Transaction type."
          },
          "transaction_date": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "posted_date": {
            "type": "string",
            "description": "The date the transaction was posted.",
            "format": "date-time"
          },
          "due_date": {
            "type": "string",
            "description": "The due date of the transaction.",
            "format": "date-time"
          },
          "discount_days": {
            "type": "integer",
            "description": "Days discount valid.",
            "format": "int16"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The reference of the transaction."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "The second reference of the transaction."
          },
          "query": {
            "maxLength": 1,
            "type": "string",
            "description": "Query."
          },
          "status": {
            "maxLength": 20,
            "type": "string",
            "description": "Status."
          },
          "user_name": {
            "maxLength": 20,
            "type": "string",
            "description": "User that posted the transaction."
          },
          "ledger_type": {
            "maxLength": 30,
            "type": "string",
            "description": "Ledger type."
          },
          "urn": {
            "type": "integer",
            "description": "Unique reference number.",
            "format": "int64"
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange Rate.",
            "format": "decimal 6dp"
          },
          "settled_immediately": {
            "type": "boolean",
            "description": "Immediately settled."
          },
          "base_goods_value": {
            "type": "number",
            "description": "Goods value in base currency.",
            "format": "decimal 2dp"
          },
          "base_gross_value": {
            "type": "number",
            "description": "Gross value in base currency.",
            "format": "decimal 2dp"
          },
          "base_discount_value": {
            "type": "number",
            "description": "Discount value in base currency.",
            "format": "decimal 2dp"
          },
          "base_tax_value": {
            "type": "number",
            "description": "Tax value in base currency.",
            "format": "decimal 2dp"
          },
          "base_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value in base currency.",
            "format": "decimal 2dp"
          },
          "base_allocated_value": {
            "type": "number",
            "description": "Allocated value in base currency.",
            "format": "decimal 2dp"
          },
          "base_outstanding_value": {
            "type": "number",
            "description": "Outstanding value in base currency.",
            "format": "decimal 2dp"
          },
          "document_goods_value": {
            "type": "number",
            "description": "Goods value.",
            "format": "decimal 2dp"
          },
          "document_gross_value": {
            "type": "number",
            "description": "Gross value.",
            "format": "decimal 2dp"
          },
          "document_discount_value": {
            "type": "number",
            "description": "Discount value.",
            "format": "decimal 2dp"
          },
          "document_tax_value": {
            "type": "number",
            "description": "Tax value.",
            "format": "decimal 2dp"
          },
          "document_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value.",
            "format": "decimal 2dp"
          },
          "document_allocated_value": {
            "type": "number",
            "description": "Allocated value.",
            "format": "decimal 2dp"
          },
          "document_outstanding_value": {
            "type": "number",
            "description": "Outstanding value.",
            "format": "decimal 2dp"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer Id.",
            "format": "int64"
          },
          "customer_reference": {
            "maxLength": 8,
            "type": "string",
            "description": "Customer account code."
          },
          "customer_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer account name."
          },
          "currency_name": {
            "maxLength": 30,
            "type": "string",
            "description": "Currency."
          },
          "currency_symbol": {
            "maxLength": 4,
            "type": "string",
            "description": "Currency symbol."
          },
          "transaction_date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "When making larger API requests for transaction information from the Sales ledger, the Sales Transaction Views resource can be a faster alternative to the 'Sales Posted Transactions' resource.<br /><br />The Sales Transaction Views resource also returns a wider breadth of information than the Sales Posted Transactions. By using the Sales Transaction Views resource, the quantity of API requests can be reduced, when returning the same information from multiple API resources."
      },
      "sales_transaction_enquiry_view": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer Id.",
            "format": "int64",
            "readOnly": true
          },
          "trader_transaction_type": {
            "maxLength": 30,
            "type": "string",
            "description": "Transaction type.",
            "readOnly": true
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Transaction reference.",
            "readOnly": true
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Second reference.",
            "readOnly": true
          },
          "queried": {
            "maxLength": 1,
            "type": "string",
            "description": "Query flag.",
            "readOnly": true
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date.",
            "format": "date-time",
            "readOnly": true
          },
          "posted_date": {
            "type": "string",
            "description": "Posted date.",
            "format": "date-time",
            "readOnly": true
          },
          "due_date": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "readOnly": true
          },
          "discount_days": {
            "type": "string",
            "description": "Discount days.",
            "format": "int16",
            "readOnly": true
          },
          "discount_due_date": {
            "type": "string",
            "description": "Due date.",
            "format": "date-time",
            "readOnly": true
          },
          "document_gross_value": {
            "type": "number",
            "description": "Gross value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_discount_value": {
            "type": "number",
            "description": "Document discount value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_discounted_value": {
            "type": "number",
            "description": "Document value after discounts.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_allocated_value": {
            "type": "number",
            "description": "Allocated value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "document_outstanding_value": {
            "type": "number",
            "description": "Outstanding value.",
            "format": "decimal 2dp",
            "readOnly": true
          },
          "allocation_status": {
            "maxLength": 50,
            "type": "string",
            "description": "Document's allocation status type.",
            "readOnly": true
          },
          "memo_note_status": {
            "maxLength": 1,
            "type": "string",
            "description": "Memo status.",
            "readOnly": true
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange rate used for transaction.",
            "format": "decimal 6dp",
            "readOnly": true
          },
          "settled_immediately": {
            "type": "boolean",
            "description": "Immediately settled.",
            "readOnly": true
          },
          "source": {
            "maxLength": 30,
            "type": "string",
            "description": "Ledger type.",
            "readOnly": true
          },
          "urn": {
            "type": "integer",
            "description": "Unique reference number.",
            "format": "int64",
            "readOnly": true
          },
          "user_name": {
            "maxLength": 20,
            "type": "string",
            "description": "User who entered the transaction.",
            "readOnly": true
          },
          "has_documents": {
            "type": "boolean",
            "description": "Indicates if there are any documents attached to the transaction.",
            "readOnly": true
          },
          "allocation_history_items": {
            "type": "array",
            "description": "Allocation history items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Allocation history record Id.",
                  "format": "int64",
                  "readOnly": true
                },
                "trading_revaluation_allocation_entry_type": {
                  "type": "string",
                  "description": "Revaluation allocation entry type.",
                  "readOnly": true
                },
                "entry_date": {
                  "type": "string",
                  "description": "Date of entry.",
                  "format": "date-time",
                  "readOnly": true
                },
                "allocation_value": {
                  "type": "number",
                  "description": "Value of allocation.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "nominal_updated": {
                  "type": "boolean",
                  "description": "If nominal has been updated.",
                  "readOnly": true
                },
                "exchange_rate": {
                  "type": "number",
                  "description": "Exchange rate.",
                  "format": "decimal 6dp",
                  "readOnly": true
                },
                "exchange_gain_loss": {
                  "type": "number",
                  "description": "Amount gained or lost since allocation.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "date_time_created": {
                  "type": "string",
                  "description": "The date and time this entity was created (UTC).",
                  "format": "date-time",
                  "readOnly": true
                },
                "date_time_updated": {
                  "type": "string",
                  "description": "The date and time this entity was last updated (UTC).",
                  "format": "date-time",
                  "readOnly": true
                }
              }
            }
          },
          "allocation_session_items": {
            "type": "array",
            "description": "Allocation session items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "user_name": {
                  "type": "string",
                  "description": "Name of user that entered item.",
                  "readOnly": true
                },
                "ledger_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Ledger type",
                  "readOnly": true
                },
                "urn": {
                  "type": "integer",
                  "description": "Unique reference number.",
                  "format": "int64",
                  "readOnly": true
                },
                "allocation_date": {
                  "type": "string",
                  "description": "Date of allocation.",
                  "format": "date-time",
                  "readOnly": true
                },
                "trader_transaction_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Transaction type",
                  "readOnly": true
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference.",
                  "readOnly": true
                },
                "value": {
                  "type": "number",
                  "description": "Value of allocation item.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "allocation_value": {
                  "type": "number",
                  "description": "Value of allocation.",
                  "format": "decimal 2dp",
                  "readOnly": true
                }
              }
            }
          },
          "bank_items": {
            "type": "array",
            "description": "Bank items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "bank_code": {
                  "type": "string",
                  "description": "Bank account code.",
                  "readOnly": true
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Account name.",
                  "readOnly": true
                },
                "bank_entry_type": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Bank entry type.",
                  "readOnly": true
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference.",
                  "readOnly": true
                },
                "cheque_value": {
                  "type": "number",
                  "description": "Value of item.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "statement_date": {
                  "type": "string",
                  "description": "Statement Date.",
                  "format": "date-time",
                  "readOnly": true
                },
                "statement_page_number": {
                  "type": "integer",
                  "description": "Page of statement item appears on.",
                  "format": "int32",
                  "readOnly": true
                },
                "urn": {
                  "type": "integer",
                  "description": "Unique reference number.",
                  "format": "int32",
                  "readOnly": true
                }
              }
            }
          },
          "memos": {
            "type": "array",
            "description": "Memos.",
            "items": {
              "$ref": "#/components/schemas/sales_posted_transaction_memo"
            }
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code.",
                  "readOnly": true
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre.",
                  "readOnly": true
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department.",
                  "readOnly": true
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Nominal name.",
                  "readOnly": true
                },
                "location": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Location of the associated nominal transaction.",
                  "readOnly": true
                },
                "reference": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Reference.",
                  "readOnly": true
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative.",
                  "readOnly": true
                },
                "value": {
                  "type": "number",
                  "description": "Goods value.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "base_value": {
                  "type": "number",
                  "description": "Value in base currency.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The transaction analysis code used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid",
                  "readOnly": true
                },
                "source": {
                  "maxLength": 30,
                  "type": "string",
                  "description": "Source ledger",
                  "readOnly": true
                }
              }
            }
          },
          "tax_analysis_items": {
            "type": "array",
            "description": "Tax analysis items.",
            "readOnly": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Tax code Id",
                  "format": "int64",
                  "readOnly": true
                },
                "code": {
                  "type": "integer",
                  "description": "Tax code.",
                  "format": "int16",
                  "readOnly": true
                },
                "name": {
                  "maxLength": 60,
                  "type": "string",
                  "description": "Tax code name.",
                  "readOnly": true
                },
                "entry_type": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "The type of the tax code entry.",
                  "readOnly": true
                },
                "goods_amount": {
                  "type": "number",
                  "description": "Goods amount.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "tax_amount": {
                  "type": "number",
                  "description": "Tax amount.",
                  "format": "decimal 2dp",
                  "readOnly": true
                },
                "tax_discount_amount": {
                  "type": "number",
                  "description": "Tax discount amount.",
                  "format": "decimal 2dp",
                  "readOnly": true
                }
              }
            }
          },
          "customer": {
            "type": "object",
            "properties": {},
            "description": "Customer.",
            "readOnly": true
          }
        },
        "description": "Sales transaction enquiry views represent sales transactions such as orders invoiced, receipts, refunds or credit notes, that are posted against the Sales Ledger. The $count includes memos and documents associated with the transaction."
      },
      "sales_credit_note": {
        "required": [
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date. This defaults to the current system date.",
            "format": "date-time"
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the credit note. This defaults to the customer exchange rate.",
            "format": "decimal 6dp"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Credit note reference."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Credit note second reference."
          },
          "settled_immediately": {
            "type": "boolean",
            "description": "Settled immediately.",
            "default": false
          },
          "document_goods_value": {
            "type": "number",
            "description": "Value of goods.",
            "format": "decimal 2dp"
          },
          "document_tax_value": {
            "type": "number",
            "description": "Tax value.",
            "format": "decimal 2dp"
          },
          "document_discount_value": {
            "type": "number",
            "description": "Discount value.",
            "format": "decimal 2dp"
          },
          "document_tax_discount_value": {
            "type": "number",
            "description": "Tax discount value.",
            "format": "decimal 2dp"
          },
          "discount_percent": {
            "type": "number",
            "description": "Percentage discount. This defaults to the settlement discount from the customer record.",
            "format": "decimal 2dp"
          },
          "discount_days": {
            "type": "integer",
            "description": "Number of days discount valid. This defaults to the settlement days from the customer record.",
            "format": "int16"
          },
          "is_eu_trader": {
            "type": "boolean",
            "description": "Indicates whether the Customer is in a different EU country.",
            "readOnly": true,
            "default": false
          },
          "triangular_transaction": {
            "type": "boolean",
            "description": "Indicates whether the transaction is triangluted.",
            "default": false
          },
          "tax_analysis_items": {
            "type": "array",
            "description": "Tax analysis lines.",
            "items": {
              "required": [
                "id"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Tax code record Id. This defaults to the tax code Id from the customer record",
                  "format": "int64"
                },
                "goods_amount": {
                  "type": "number",
                  "description": "Goods amount. Must add up to the headline value set on the credit note. This defaults to the document_goods_value from the sales credit note.",
                  "format": "decimal 2dp"
                },
                "discount_amount": {
                  "type": "number",
                  "description": "Discount amount. Must add up to the headline value set on the credit note. This defaults to the document_discount_value from the sales credit note.",
                  "format": "decimal 2dp"
                },
                "tax_amount": {
                  "type": "number",
                  "description": "Tax amount. Must add up to the headline value set on the credit note. This defaults to the document_tax_value from the sales credit note.",
                  "format": "decimal 2dp"
                },
                "tax_discount_amount": {
                  "type": "number",
                  "description": "Tax discount amount. Must add up to the headline value set on the credit note. This defaults to the document_tax_discount_value from the sales credit note.",
                  "format": "decimal 2dp"
                }
              }
            }
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis lines.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code. This defaults to the nominal code from the customer record."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code. This defaults to the nominal cost centre from the customer record."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code. This defaults to the nominal department from the customer record."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative."
                },
                "value": {
                  "type": "number",
                  "description": "Value. Must add up to the headline value of goods. This defaults to the document_goods_value from the sales credit note.",
                  "format": "decimal 2dp"
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Specify a transaction analysis code to be used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid"
                }
              }
            }
          }
        },
        "description": "Use this resource to enter credit notes directly onto to a particular customer's account. Credit notes are typically used when issuing refunds, returns, etc and reduces the turnover for the relevant customer's account.<br /><br />Posting a credit note does not actually create a 'credit note' entity, but a Posted Transaction of type 'TradingAccountEntryTypeCreditNote', therefore it is not possible to 'get' a credit note using the same API endpoint after it has been posted. Posting a sales credit note returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction."
      },
      "sales_credit_note_new_request": {
        "required": [
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          }
        },
        "description": "Returns a sales credit note with all the default values for a customer. The API endpoint does not persist the sales credit note."
      },
      "sales_invoice": {
        "required": [
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date. This defaults to the current system date.",
            "format": "date-time"
          },
          "due_date": {
            "type": "string",
            "description": "Date the invoice is due to be paid.",
            "format": "date-time"
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the invoice. This defaults to the customer exchange rate.",
            "format": "decimal 6dp"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Invoice reference."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Invoice second reference."
          },
          "settled_immediately": {
            "type": "boolean",
            "description": "When set to True this indicates that the invoice has been paid and any settlement discount has been applied.",
            "default": false
          },
          "document_goods_value": {
            "type": "number",
            "description": "Value of goods.",
            "format": "decimal 2dp"
          },
          "document_tax_value": {
            "type": "number",
            "description": "Tax value.",
            "format": "decimal 2dp"
          },
          "document_discount_value": {
            "type": "number",
            "description": "Discount value.",
            "format": "decimal 2dp"
          },
          "document_tax_discount_value": {
            "type": "number",
            "description": "Amount VAT is discounted when a settlement discount is applied.",
            "format": "decimal 2dp"
          },
          "discount_percent": {
            "type": "number",
            "description": "Percentage discount. This defaults to the settlement discount from the customer record.",
            "format": "decimal 2dp"
          },
          "discount_days": {
            "type": "integer",
            "description": "Number of days to pay to qualify for the settlement discount. This defaults to the settlement days from the customer record.",
            "format": "int16"
          },
          "is_eu_trader": {
            "type": "boolean",
            "description": "Indicates whether the Customer is in a different EU country.",
            "readOnly": true,
            "default": false
          },
          "triangular_transaction": {
            "type": "boolean",
            "description": "Indicates whether the transaction is triangluted.",
            "default": false
          },
          "tax_analysis_items": {
            "type": "array",
            "description": "Tax analysis lines.",
            "items": {
              "required": [
                "id"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Tax code record Id. This defaults to the tax code Id from the customer record",
                  "format": "int64"
                },
                "goods_amount": {
                  "type": "number",
                  "description": "Goods amount. Must add up to the headline value set on the invoice. This defaults to the document_goods_value from the sales invoice.",
                  "format": "decimal 2dp"
                },
                "discount_amount": {
                  "type": "number",
                  "description": "Discount amount. Must add up to the headline value set on the invoice. This defaults to the document_discount_value from the sales invoice.",
                  "format": "decimal 2dp"
                },
                "tax_amount": {
                  "type": "number",
                  "description": "Tax amount. Must add up to the headline value set on the invoice. This defaults to the document_tax_value from the sales invoice.",
                  "format": "decimal 2dp"
                },
                "tax_discount_amount": {
                  "type": "number",
                  "description": "Tax discount amount. Must add up to the headline value set on the invoice. This defaults to the document_tax_discount_value from the sales invoice.",
                  "format": "decimal 2dp"
                }
              }
            }
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis lines.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code. This defaults to the nominal code from the customer record."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code. This defaults to the nominal cost centre from the customer record."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code. This defaults to the nominal department from the customer record.",
                  "default": "Default Nominal Department from Customer."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative."
                },
                "value": {
                  "type": "number",
                  "description": "Value. Must add up to the headline value of goods. This defaults to the document_goods_value from the sales invoice.",
                  "format": "decimal 2dp"
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Specify a transaction analysis code to be used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid"
                }
              }
            }
          }
        },
        "description": "Invoices are used to record a sale against a particular customer's account.<br /><br />Posting a sales invoice does not actually create a 'sales invoice' entity, but a Posted Transaction of type 'TradingAccountEntryTypeInvoice', therefore it is not possible to 'get' a sales invoice using the same API endpoint after it has been posted. Posting a sales invoice returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction."
      },
      "sales_invoice_new_request": {
        "required": [
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          }
        },
        "description": "Returns a sales invoice with all the default values for a customer. The API endpoint does not persist the sales invoice."
      },
      "sales_payment": {
        "required": [
          "bank_id",
          "cheque_value",
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "bank_id": {
            "type": "integer",
            "description": "Bank record Id.",
            "format": "int64"
          },
          "cheque_currency_id": {
            "type": "integer",
            "description": "Payment currency record Id. This defaults to the customer account currency.",
            "format": "int64"
          },
          "cheque_value": {
            "type": "number",
            "description": "Value of the payment.",
            "format": "decimal 2dp"
          },
          "customer_cheque_value": {
            "type": "number",
            "description": "Value to post to the customer account.",
            "format": "decimal 2dp"
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date. This defaults to the current system date.",
            "format": "date-time"
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the payment. This defaults to the currency exchange rate.",
            "format": "decimal 2dp"
          },
          "bank_exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the customer to the bank currency.",
            "format": "decimal 6dp"
          },
          "cheque_exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the customer to the cheque currency.",
            "format": "decimal 6dp"
          },
          "settlement_discount_value": {
            "type": "number",
            "description": "Settlement discount value.",
            "format": "decimal 2dp"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Payment reference."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Payment second reference."
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis lines.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code. This defaults to the bank charges nominal code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code. This defaults to the bank charges nominal cost centre."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code. This defaults to the bank charges nominal department."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative."
                },
                "value": {
                  "type": "number",
                  "description": "Value. Must add up to the headline value of goods.",
                  "format": "decimal 2dp"
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Specify a transaction analysis code to be used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid"
                }
              }
            }
          }
        },
        "description": "Payments are used to record a sales payment against a particular customer's account.<br /><br />Posting a sales payment does not actually create a 'sales payment' entity, but a Posted Transaction of type 'TradingAccountEntryTypePurchaseReceiptSalesPayment', therefore it is not possible to 'get' a sales payment using the same API endpoint after it has been posted. Posting a sales payment returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting sales payments via the API, at least one bank account must exist within Sage 200."
      },
      "sales_receipt": {
        "required": [
          "bank_id",
          "cheque_value",
          "customer_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "bank_id": {
            "type": "integer",
            "description": "Bank record Id.",
            "format": "int64"
          },
          "cheque_currency_id": {
            "type": "integer",
            "description": "Receipt currency record Id. This defaults to the customer account currency.",
            "format": "int64"
          },
          "cheque_value": {
            "type": "number",
            "description": "Value of the receipt.",
            "format": "decimal 2dp"
          },
          "customer_cheque_value": {
            "type": "number",
            "description": "Value to post to the customer account.",
            "format": "decimal 2dp"
          },
          "transaction_date": {
            "type": "string",
            "description": "Transaction date. This defaults to the current system date.",
            "format": "date-time"
          },
          "exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the receipt. This defaults to the customer exchange rate.",
            "format": "decimal 6dp"
          },
          "bank_exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the customer to the bank currency.",
            "format": "decimal 6dp"
          },
          "cheque_exchange_rate": {
            "type": "number",
            "description": "Exchange rate for the customer to the cheque currency.",
            "format": "decimal 6dp"
          },
          "settlement_discount_value": {
            "type": "number",
            "description": "Settlement discount value.",
            "format": "decimal 2dp"
          },
          "reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Receipt reference."
          },
          "second_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Receipt second reference."
          },
          "nominal_analysis_items": {
            "type": "array",
            "description": "Nominal analysis lines.",
            "items": {
              "required": [
                "code"
              ],
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 8,
                  "type": "string",
                  "description": "Nominal account code."
                },
                "cost_centre": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Cost centre. If specified must correspond to the code."
                },
                "department": {
                  "maxLength": 3,
                  "type": "string",
                  "description": "Department. If specified must correspond to the code."
                },
                "narrative": {
                  "maxLength": 6000,
                  "type": "string",
                  "description": "Narrative."
                },
                "value": {
                  "type": "number",
                  "description": "Value to post to the nominal account.",
                  "format": "decimal 2dp"
                },
                "transaction_analysis_code": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Specify a transaction analysis code to be used on the nominal analysis item. This requires that the ledger settings allow additional analysis and that the code is valid"
                }
              }
            }
          }
        },
        "description": "Receipts are used to record a sales receipt against a particular customer's account.<br /><br />Posting a sales receipt does not actually create a 'sales receipt' entity, but a Posted Transaction of type 'TradingAccountEntryTypePurchasePaymentSalesReceipt', therefore it is not possible to 'get' a sales receipt using the same API endpoint after it has been posted. Posting a sales receipt returns a URN (Unique Reference Number) that can be used to find the corresponding posted transaction.<br /><br />Note: Before posting sales receipts via the API, at least one bank account must exist within Sage 200."
      },
      "customer_delivery_address": {
        "required": [
          "customer_id",
          "description",
          "tax_code_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique Id of the customer delivery address.",
            "format": "int64",
            "readOnly": true
          },
          "customer_id": {
            "type": "integer",
            "description": "Unique Id of the customer account the customer delivery address is associated with.",
            "format": "int64"
          },
          "is_default": {
            "type": "boolean",
            "description": "Flag to indicate if this is the default customer delivery address for the parent customer."
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "The description of the customer delivery address."
          },
          "postal_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Postal name is the name of the person or company who the invoice or sales order is addressed to."
          },
          "address_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 1."
          },
          "address_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 2."
          },
          "address_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 3."
          },
          "address_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Address line 4."
          },
          "city": {
            "maxLength": 60,
            "type": "string",
            "description": "City (if using segmented addresses in Sage 200 Professional)."
          },
          "county": {
            "maxLength": 60,
            "type": "string",
            "description": "County (if using segmented addresses in Sage 200 Professional)."
          },
          "postcode": {
            "maxLength": 10,
            "type": "string",
            "description": "Postcode."
          },
          "country": {
            "maxLength": 60,
            "type": "string",
            "description": "The Country name (if using segmented addresses in Sage 200 Professional).",
            "readOnly": true
          },
          "address_country_code_id": {
            "type": "integer",
            "description": "Country code Id.",
            "format": "int64"
          },
          "contact": {
            "maxLength": 235,
            "type": "string",
            "description": "The contact associated with the customer delivery address."
          },
          "telephone": {
            "maxLength": 60,
            "type": "string",
            "description": "Country (if using segmented addresses in Sage 200 Professional)."
          },
          "fax": {
            "maxLength": 30,
            "type": "string",
            "description": "The fax number associated with the customer delivery address."
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "The email address associated with the customer delivery address."
          },
          "tax_number": {
            "maxLength": 30,
            "type": "string",
            "description": "The tax number."
          },
          "tax_code_id": {
            "type": "integer",
            "description": "The tax code record Id.",
            "format": "int64"
          },
          "country_code_id": {
            "type": "integer",
            "description": "VAT details Country code Id.",
            "format": "int64"
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "customer": {
            "type": "object",
            "properties": {},
            "description": "The customer.",
            "readOnly": true
          },
          "address_country_code": {
            "type": "object",
            "properties": {},
            "description": "Address country code.",
            "readOnly": true
          },
          "tax_code": {
            "type": "object",
            "properties": {},
            "description": "The tax code.",
            "readOnly": true
          },
          "country_code": {
            "type": "object",
            "properties": {},
            "description": "VAT Details country code.",
            "readOnly": true
          }
        },
        "description": "A customer can have multiple delivery addresses stored for their account which can be used when creating an invoice or sales order."
      },
      "customers_new_request": {
        "type": "object",
        "description": "Returns a customer with all the defaults that have been specified within the application. The API endpoint does not persist the customer."
      },
      "urn": {
        "type": "object",
        "properties": {
          "urn": {
            "maxLength": 20,
            "type": "string",
            "description": "Unique reference number."
          }
        },
        "description": "This is the description of the urn."
      },
      "customer_price_enquiry_request": {
        "required": [
          "customer_id",
          "product_id"
        ],
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Unique Id of the customer.",
            "format": "int64"
          },
          "product_id": {
            "type": "integer",
            "description": "An Id specific to the product being checked.",
            "format": "int64"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity to find the price for.",
            "format": "decimal 5dp"
          },
          "selling_unit_id": {
            "type": "integer",
            "description": "The Unit record Id for the selling unit.",
            "format": "int64"
          },
          "pricing_unit_id": {
            "type": "integer",
            "description": "The Unit record Id for the pricing unit.",
            "format": "int64"
          },
          "include_previous_prices": {
            "type": "boolean",
            "description": "Specifies whether we want the response to include the last five prices that the customer has paid for the product from Sales Orders.",
            "default": false
          }
        },
        "description": "Returns the price of a product, and any available discount, for the specified customer. This includes any discounts based on the quantity specified. In Sage 200, product prices are set on price bands and then linked to customer accounts. Discounts are set per product, or product group and then linked to customer accounts."
      },
      "customer_price_enquiry": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Unique Id of the customer.",
            "format": "int64"
          },
          "product_id": {
            "type": "integer",
            "description": "An Id specific to the product being checked.",
            "format": "int64"
          },
          "product_type": {
            "maxLength": 50,
            "type": "string",
            "description": "The product type of the product group."
          },
          "selling_unit_id": {
            "type": "integer",
            "description": "The Unit record Id for the selling unit.",
            "format": "int64"
          },
          "selling_unit": {
            "maxLength": 20,
            "type": "string",
            "description": "The name of the unit the product is stocked in. For example box, crate, bottle. The default unit is each."
          },
          "selling_unit_multiple": {
            "type": "number",
            "description": "The multiple of the unit the product is stocked in.",
            "format": "decimal 5dp"
          },
          "pricing_unit_id": {
            "type": "integer",
            "description": "The Unit record Id for the pricing unit.",
            "format": "int64"
          },
          "pricing_unit": {
            "maxLength": 20,
            "type": "string",
            "description": "The name of the unit the product is priced in. This will always be the same as the selling unit."
          },
          "pricing_unit_multiple": {
            "type": "number",
            "description": "The multiple of the unit the product is priced in.",
            "format": "decimal 5dp"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity which the price is for.",
            "format": "decimal 5dp"
          },
          "currency_id": {
            "type": "integer",
            "description": "The Id for the currency used for the price. This is the same as the currency set on the customer account.",
            "format": "int64"
          },
          "currency_name": {
            "maxLength": 30,
            "type": "string",
            "description": "The name of the currency used for the price. This is the same as the currency set on the customer account."
          },
          "currency_symbol": {
            "maxLength": 4,
            "type": "string",
            "description": "The symbol of the currency used for the price. This is the same as the currency set on the customer account."
          },
          "unit_price": {
            "type": "number",
            "description": "The price per unit of the product for the selected customer, in the currency shown. If the price is set in a different currency on the price band, the price shown is converted using the current exchange rate set in Sage 200.",
            "format": "decimal 2dp"
          },
          "discounted_unit_price": {
            "type": "number",
            "description": "The discounted price per unit of the product for the selected customer, in the currency shown. If the price is set in a different currency on the price band, the price shown is converted using the current exchange rate set in Sage 200.",
            "format": "decimal 2dp"
          },
          "total_price_before_discount": {
            "type": "number",
            "description": "The total price before discount for the product specified, for this customer, i.e. the unit price multiplied by the quantity.",
            "format": "decimal 2dp"
          },
          "total_discount": {
            "type": "number",
            "description": "The total amount of discount available for the product specified, for this customer, i.e. the discount price per unit multiplied by the quantity.",
            "format": "decimal 2dp"
          },
          "total_discounted_price": {
            "type": "number",
            "description": "The total price less the total discount available for the product specified, for this customer.",
            "format": "decimal 2dp"
          },
          "include_previous_prices": {
            "type": "boolean",
            "description": "Whether we have specified to include the last five prices that the customer has paid for the product from Sales Orders.",
            "default": false
          },
          "previous_prices": {
            "type": "array",
            "description": "The last five prices that the customer paid for the product from Sales Orders. This will only return if the request include_previous_prices is set to true.",
            "items": {
              "type": "object",
              "properties": {
                "sop_document_no": {
                  "maxLength": 20,
                  "type": "string",
                  "description": "Sales order document number."
                },
                "sop_document_date": {
                  "type": "string",
                  "description": "Sales order date.",
                  "format": "date-time"
                },
                "quantity": {
                  "type": "number",
                  "description": "The sales order line quantity ordered of the product.",
                  "format": "decimal 5dp"
                },
                "discounted_unit_price": {
                  "type": "number",
                  "description": "The discounted unit price of the line.",
                  "format": "decimal 5dp"
                }
              }
            }
          }
        },
        "description": "Returns the price of a product, and any available discount, for the specified customer. This includes any discounts based on the quantity specified. In Sage 200, product prices are set on price bands and then linked to customer accounts. Discounts are set per product, or product group and then linked to customer accounts."
      },
      "sales_ledger_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Sales Ledger Settings record Id.",
            "format": "int64",
            "readOnly": true
          },
          "copy_statements_for_head_offices": {
            "type": "boolean",
            "description": "Whether to send customer account statements to both head offices and any branch offices of the same company.",
            "default": false
          },
          "allow_batch_processing": {
            "type": "boolean",
            "description": "Whether multiple customer transactions can be entered at once.",
            "default": false
          },
          "auto_generate_account_numbers": {
            "type": "boolean",
            "description": "Whether customer account numbers (reference) are generated automatically.",
            "default": false
          },
          "next_account_number": {
            "type": "integer",
            "description": "The next customer account number (reference) which will be assigned.",
            "format": "int32"
          },
          "allow_additional_trans_analysis": {
            "type": "boolean",
            "description": "Whether to include additional nominal transaction information for each transaction that is entered.",
            "default": false
          },
          "use_card_processing": {
            "type": "boolean",
            "description": "Whether you can use the Online Card Receipt option to record receipts from customers.",
            "default": false
          },
          "use_transaction_date_for_allocation": {
            "type": "boolean",
            "description": "Whether or not to use the receipt/payment date as the default allocation date.",
            "default": false
          },
          "early_settlement_discount_days": {
            "type": "integer",
            "description": "The default number of days an invoice must be paid within to qualify for the discount.",
            "format": "int16"
          },
          "early_settlement_discount_percent": {
            "type": "number",
            "description": "The default discount percentage offered to customers.",
            "format": "decimal 2dp"
          },
          "keep_transactions_for": {
            "type": "integer",
            "description": "The default length of time (in months) to keep transactions for customer accounts.",
            "format": "int16"
          },
          "archive_transaction_after_keeping": {
            "type": "boolean",
            "description": "Whether to archive (or delete) customer transactions after the period to keep transactions.",
            "default": false
          },
          "maximum_enquiry_transactions_to_display": {
            "type": "integer",
            "description": "The default number of transactions to display on the Customer Transaction Enquiry screen.",
            "format": "int64"
          },
          "show_outstanding_transactions": {
            "type": "boolean",
            "description": "Whether to show only outstanding transactions (by default) on the Customer Transaction Enquiry screen.",
            "default": false
          },
          "tax_recovery_period": {
            "type": "integer",
            "description": "The default number of accounting periods for which to store sales transactions before they can be considered bad debts.",
            "format": "int16"
          },
          "default_tax_code_id": {
            "type": "integer",
            "description": "The customer default tax code record Id.",
            "format": "int64"
          },
          "default_terms_agreed": {
            "type": "boolean",
            "description": "Whether (by default) terms have been agreed with new customer accounts.",
            "default": false
          },
          "no_of_reporting_periods": {
            "type": "integer",
            "description": "The number of ageing and overdue periods.",
            "format": "int16"
          },
          "default_payment_terms_basis": {
            "maxLength": 20,
            "type": "string",
            "description": "The default terms which, together with the default payment terms (days), determines the due date of invoices. For example, \"From document date\", or \"From end of month\"",
            "default": "PaymentDueFromCalendarMonth"
          },
          "default_payment_terms_days": {
            "type": "integer",
            "description": "The number of days which, together with the default payment terms basis, determines the due date for invoices.",
            "format": "int16"
          },
          "use_account_periods_as_trading_periods": {
            "type": "boolean",
            "description": "Whether or not the accounting periods are used as the trading periods. (Sage 200 Standard value is true and cannot be changed).",
            "default": true
          },
          "ageing_periods": {
            "type": "array",
            "description": "Ageing periods.",
            "items": {
              "$ref": "#/components/schemas/ageing_period"
            }
          },
          "overdue_periods": {
            "type": "array",
            "description": "Overdue periods.",
            "items": {
              "$ref": "#/components/schemas/overdue_period"
            }
          },
          "revalue_foreign_entries": {
            "type": "boolean",
            "description": "Whether to revalue invoices paid in foreign currency to their value in base currency.",
            "default": false
          },
          "statement_terms": {
            "maxLength": 20,
            "type": "string",
            "description": "Determines which transactions to include on customer statements. For example, \"All transactions\", or \"Outstanding transactions\"",
            "default": "StatementTermsAllTransactions"
          },
          "statement_ageing_terms": {
            "maxLength": 20,
            "type": "string",
            "description": "How to age debts on customer statements. For example, \"From transaction date\", or \"From due date\"",
            "default": "StatementAgeingTermsTypeEnumInstrumentDate"
          },
          "charge_interest_on_finance_charges": {
            "type": "boolean",
            "description": "Whether to add interest to finance charges already calculated on any remaining overdue debts.",
            "default": false
          },
          "default_tax_code": {
            "type": "object",
            "properties": {},
            "description": "The customer default tax code."
          },
          "finance_charges": {
            "type": "array",
            "description": "Finance charges. (Sage 200 Professional only).",
            "items": {
              "$ref": "#/components/schemas/finance_charge"
            },
            "x-sage-professional-only": true
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "The Sales Ledger settings are used to configure application behaviour with respect to the Sales Ledger module.<br/><br/>Settings include whether to automatically generate customer account numbers, the customer default tax code, etc."
      },
      "finance_charge": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Finance charge Id.",
            "format": "int64",
            "readOnly": true
          },
          "code": {
            "type": "integer",
            "description": "The finance charge code.",
            "format": "int16"
          },
          "finance_charge_percent": {
            "type": "number",
            "description": "The finance charge percent.",
            "format": "decimal 2dp"
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Use finance charges to add interest or finance charges to overdue customer invoices. (Sage 200 Professional only).",
        "x-sage-professional-only": true
      },
      "ageing_period": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Ageing period Id.",
            "format": "int64",
            "readOnly": true
          },
          "days_period_starts_after": {
            "type": "integer",
            "description": "The number of days after which the ageing period starts.",
            "format": "int16"
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Ageing periods help to manage outstanding customer and supplier debt. They determine how transactions appear on statements, letters, and Aged Debtor reports."
      },
      "overdue_period": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Overdue period Id.",
            "format": "int64",
            "readOnly": true
          },
          "days_period_starts_after": {
            "type": "integer",
            "description": "The number of days after which the overdue period starts.",
            "format": "int16"
          },
          "date_time_created": {
            "type": "string",
            "description": "The date and time this entity was created (UTC).",
            "format": "date-time",
            "readOnly": true
          },
          "date_time_updated": {
            "type": "string",
            "description": "The date and time this entity was last updated (UTC).",
            "format": "date-time",
            "readOnly": true
          }
        },
        "description": "Overdue periods help to manage outstanding customer and supplier debt. They determine how transactions appear on the Due Date report."
      },
      "statement_terms": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Statement terms record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Description of the statement terms.",
            "readOnly": true
          },
          "value": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Gets the list of Customer statement terms which can be used. For example, \"All transactions\", or \"Outstanding only\"."
      },
      "statement_ageing_terms": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Statement ageing terms record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 30,
            "type": "string",
            "description": "Description of the statement ageing terms.",
            "readOnly": true
          },
          "value": {
            "maxLength": 20,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Gets the list of Customer statement ageing terms which can be used. For example, \"Use transaction date\", or \"Use due date\"."
      },
      "head_office_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Enum record Id.",
            "format": "int64",
            "readOnly": true
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum description.",
            "readOnly": true
          },
          "value": {
            "maxLength": 50,
            "type": "string",
            "description": "Enum value.",
            "readOnly": true
          }
        },
        "description": "Head office types are used to have several customers set up for the same company and statements for all customers need to be sent to the head office for a customer that exists within the application. Customers can be 'Independent', 'Branch', 'Head Office', 'Independent No Statement' or 'Head Office No Statement'.<P>The API endpoint returns details of the head office types that can be used.</P>"
      },
      "customer_period_value_view": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "customer_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "customer account reference."
          },
          "customer_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer name."
          },
          "customer_analysis_code_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 1."
          },
          "customer_analysis_code_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 2."
          },
          "customer_analysis_code_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 3."
          },
          "customer_analysis_code_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 4."
          },
          "customer_analysis_code_5": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 5."
          },
          "customer_period_value_id": {
            "type": "integer",
            "description": "Customer period value record Id.",
            "format": "int64"
          },
          "period_value_total_invoice_value_to_date": {
            "type": "number",
            "description": "Total invoice value to date for the period.",
            "format": "decimal 2dp"
          },
          "period_value_total_credit_note_value_to_date": {
            "type": "number",
            "description": "Total credit note value to date for the period.",
            "format": "decimal 2dp"
          },
          "period_value_total_cash_value_to_date": {
            "type": "number",
            "description": "Total cash value to date for the period.",
            "format": "decimal 2dp"
          },
          "period_value_total_profit_value_to_date": {
            "type": "number",
            "description": "Total profit value to date for the period.",
            "format": "decimal 2dp"
          },
          "period_value_total_invoice_value_to_date_in_base": {
            "type": "number",
            "description": "Total invoice value to date for the period in base currency.",
            "format": "decimal 2dp"
          },
          "period_value_total_cred_note_value_to_date_in_base": {
            "type": "number",
            "description": "Total credit note value to date for the period in base currency.",
            "format": "decimal 2dp"
          },
          "period_value_total_cash_value_to_date_in_base": {
            "type": "number",
            "description": "Total cash value to date for the period in base currency.",
            "format": "decimal 2dp"
          },
          "period_value_total_profit_value_to_date_in_base": {
            "type": "number",
            "description": "Total profit value to date for the period in base currency.",
            "format": "decimal 2dp"
          },
          "period_value_exchange_rate_gain_or_loss": {
            "type": "integer",
            "description": "Exchange rate gain or loss for the period.",
            "format": "int64",
            "readOnly": true
          },
          "period_value_total_finance_charges_applied": {
            "type": "number",
            "description": "Total finance charges applied for the period.",
            "format": "decimal 2dp"
          },
          "customer_analysis_period_id": {
            "type": "integer",
            "description": "Customer analysis period record Id.",
            "format": "int64"
          },
          "analysis_period_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "Analysis period reference."
          },
          "analysis_period_start_date": {
            "type": "string",
            "description": "Analysis period start date.",
            "format": "date-time"
          },
          "analysis_period_end_date": {
            "type": "string",
            "description": "Analysis period end date.",
            "format": "date-time"
          },
          "period_value_date_time_updated": {
            "type": "string",
            "description": "The date and time the customer analysis period entity was last updated (UTC).",
            "format": "date-time"
          }
        },
        "description": "Includes customer values (total invoices, total credit notes, total cash, etc.) for a period of a financial year held for the company. A company always has five future financial years and can have unlimited previous years, depending on how long the company has been operating."
      },
      "customer_year_value_view": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer record Id.",
            "format": "int64"
          },
          "customer_reference": {
            "maxLength": 20,
            "type": "string",
            "description": "customer account reference."
          },
          "customer_name": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer name."
          },
          "customer_analysis_code_1": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 1."
          },
          "customer_analysis_code_2": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 2."
          },
          "customer_analysis_code_3": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 3."
          },
          "customer_analysis_code_4": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 4."
          },
          "customer_analysis_code_5": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer analysis code 5."
          },
          "customer_year_value_id": {
            "type": "integer",
            "description": "Customer year value record Id.",
            "format": "int64"
          },
          "year_value_total_invoice_value_to_date": {
            "type": "number",
            "description": "Total invoice value to date for the year.",
            "format": "decimal 2dp"
          },
          "year_value_total_credit_note_value_to_date": {
            "type": "number",
            "description": "Total credit note value to date for the year.",
            "format": "decimal 2dp"
          },
          "year_value_total_cash_value_to_date": {
            "type": "number",
            "description": "Total cash value to date for the year.",
            "format": "decimal 2dp"
          },
          "year_value_total_profit_value_to_date": {
            "type": "number",
            "description": "Total profit value to date for the year.",
            "format": "decimal 2dp"
          },
          "year_value_total_invoice_value_to_date_in_base": {
            "type": "number",
            "description": "Total invoice value to date for the year in base currency.",
            "format": "decimal 2dp"
          },
          "year_value_total_cred_note_value_to_date_in_base": {
            "type": "number",
            "description": "Total credit note value to date for the year in base currency.",
            "format": "decimal 2dp"
          },
          "year_value_total_cash_value_to_date_in_base": {
            "type": "number",
            "description": "Total cash value to date for the year in base currency.",
            "format": "decimal 2dp"
          },
          "year_value_total_profit_value_to_date_in_base": {
            "type": "number",
            "description": "Total profit value to date for the year in base currency.",
            "format": "decimal 2dp"
          },
          "year_value_exchange_rate_gain_or_loss": {
            "type": "integer",
            "description": "Exchange rate gain or loss for the year.",
            "format": "int64"
          },
          "year_value_total_finance_charges_applied": {
            "type": "number",
            "description": "Total finance charges applied for the year.",
            "format": "decimal 2dp"
          },
          "financial_year_id": {
            "type": "integer",
            "description": "Financial year record Id.",
            "format": "int64"
          },
          "financial_year_start_date": {
            "type": "string",
            "description": "Financial year start date.",
            "format": "date-time"
          },
          "financial_year_end_date": {
            "type": "string",
            "description": "Financial year end date.",
            "format": "date-time"
          },
          "year_relative_to_current_year": {
            "type": "integer",
            "description": "Financial year relative to current year.",
            "format": "int32"
          },
          "number_of_periods_in_year": {
            "type": "integer",
            "description": "Number of accounting periods in the financial year.",
            "format": "int16"
          },
          "year_value_date_time_updated": {
            "type": "string",
            "description": "The date and time the customer year value entity was last updated (UTC).",
            "format": "date-time"
          }
        },
        "description": "Includes customer values (total invoices, total credit notes, total cash, etc.) for a financial year held for the company. A company always has five future financial years and can have unlimited previous years, depending on how long the company has been operating."
      }
    }
  },
  "x-original-swagger-version": "2.0"
}